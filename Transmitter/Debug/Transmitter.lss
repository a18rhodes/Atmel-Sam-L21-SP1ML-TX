
Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dc0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  00002dc0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0001007c  2**0
                  CONTENTS
  3 .bss          000000f0  2000007c  00002e3c  0001007c  2**2
                  ALLOC
  4 .stack        00002004  2000016c  00002f2c  0001007c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000100a4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000245b2  00000000  00000000  000100ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000327b  00000000  00000000  000346b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005658  00000000  00000000  0003792c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005a0  00000000  00000000  0003cf84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000630  00000000  00000000  0003d524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bdf3  00000000  00000000  0003db54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d528  00000000  00000000  00059947  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00091ee7  00000000  00000000  00066e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000112c  00000000  00000000  000f8d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002170 	.word	0x20002170
       4:	00001f79 	.word	0x00001f79
       8:	00001f75 	.word	0x00001f75
       c:	00001f75 	.word	0x00001f75
	...
      2c:	00001f75 	.word	0x00001f75
	...
      38:	00001f75 	.word	0x00001f75
      3c:	00001f75 	.word	0x00001f75
      40:	00001f75 	.word	0x00001f75
      44:	00001f75 	.word	0x00001f75
      48:	00001f75 	.word	0x00001f75
      4c:	000003ad 	.word	0x000003ad
      50:	00001f75 	.word	0x00001f75
      54:	00001f75 	.word	0x00001f75
      58:	00001f75 	.word	0x00001f75
      5c:	00000325 	.word	0x00000325
      60:	00001f75 	.word	0x00001f75
      64:	00001f75 	.word	0x00001f75
      68:	00001f75 	.word	0x00001f75
      6c:	00001f75 	.word	0x00001f75
      70:	00001f75 	.word	0x00001f75
      74:	00001f75 	.word	0x00001f75
      78:	00001f75 	.word	0x00001f75
      7c:	00001f75 	.word	0x00001f75
      80:	00001f75 	.word	0x00001f75
      84:	00001f75 	.word	0x00001f75
      88:	00001f75 	.word	0x00001f75
	...
      94:	00001f75 	.word	0x00001f75
      98:	00001f75 	.word	0x00001f75
      9c:	00001f75 	.word	0x00001f75
      a0:	00001f75 	.word	0x00001f75
      a4:	00001f75 	.word	0x00001f75
      a8:	00001f75 	.word	0x00001f75
      ac:	00001f75 	.word	0x00001f75
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000007c 	.word	0x2000007c
      d4:	00000000 	.word	0x00000000
      d8:	00002dc0 	.word	0x00002dc0

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00002dc0 	.word	0x00002dc0
     108:	20000080 	.word	0x20000080
     10c:	00002dc0 	.word	0x00002dc0
     110:	00000000 	.word	0x00000000

00000114 <configure_ADT7420>:
#include "HAL.h"

uint16_t uiTemperature=0;

void configure_ADT7420(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b087      	sub	sp, #28

	struct i2c_master_packet i2c_packet;
	uint16_t timeout = 0;
	uint8_t wr_buffer[2] = {TEMP_SENSOR_CONFIG_ADDR,TEMP_SENSOR_CONFIG_OP_MODE_SHDN};
     118:	ac02      	add	r4, sp, #8
     11a:	1c20      	adds	r0, r4, #0
     11c:	491b      	ldr	r1, [pc, #108]	; (18c <configure_ADT7420+0x78>)
     11e:	2202      	movs	r2, #2
     120:	4b1b      	ldr	r3, [pc, #108]	; (190 <configure_ADT7420+0x7c>)
     122:	4798      	blx	r3
	
	i2c_packet.address = TEMP_SENSOR_ADDRESS;
     124:	ab03      	add	r3, sp, #12
     126:	2248      	movs	r2, #72	; 0x48
     128:	801a      	strh	r2, [r3, #0]
	i2c_packet.ten_bit_address = false;
     12a:	2200      	movs	r2, #0
     12c:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     12e:	725a      	strb	r2, [r3, #9]
	i2c_packet.data_length = 2;
     130:	2102      	movs	r1, #2
     132:	8059      	strh	r1, [r3, #2]
	i2c_packet.data = wr_buffer;
     134:	9404      	str	r4, [sp, #16]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     136:	a901      	add	r1, sp, #4
     138:	2380      	movs	r3, #128	; 0x80
     13a:	700b      	strb	r3, [r1, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     13c:	70ca      	strb	r2, [r1, #3]
	
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     13e:	3b7f      	subs	r3, #127	; 0x7f
     140:	704b      	strb	r3, [r1, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
     142:	2302      	movs	r3, #2
     144:	708b      	strb	r3, [r1, #2]
	
	// Mode 0
	system_pinmux_pin_set_config(ADT7420_EN_PIN, &config_pinmux);
     146:	200f      	movs	r0, #15
     148:	4b12      	ldr	r3, [pc, #72]	; (194 <configure_ADT7420+0x80>)
     14a:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     14c:	2280      	movs	r2, #128	; 0x80
     14e:	0212      	lsls	r2, r2, #8
     150:	4b11      	ldr	r3, [pc, #68]	; (198 <configure_ADT7420+0x84>)
     152:	619a      	str	r2, [r3, #24]
     154:	4b11      	ldr	r3, [pc, #68]	; (19c <configure_ADT7420+0x88>)
     156:	3b01      	subs	r3, #1
	port_pin_set_output_level(ADT7420_EN_PIN, true);
	
	for(int i = 0; i < 10000; i++);
     158:	2b00      	cmp	r3, #0
     15a:	d1fc      	bne.n	156 <configure_ADT7420+0x42>
     15c:	2500      	movs	r5, #0
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     15e:	4c10      	ldr	r4, [pc, #64]	; (1a0 <configure_ADT7420+0x8c>)
     160:	4f10      	ldr	r7, [pc, #64]	; (1a4 <configure_ADT7420+0x90>)
     162:	4e11      	ldr	r6, [pc, #68]	; (1a8 <configure_ADT7420+0x94>)
     164:	e006      	b.n	174 <configure_ADT7420+0x60>
 		if(timeout++ == i2c_master_instance.buffer_timeout) break;
     166:	1c6b      	adds	r3, r5, #1
     168:	b29b      	uxth	r3, r3
     16a:	4a0d      	ldr	r2, [pc, #52]	; (1a0 <configure_ADT7420+0x8c>)
     16c:	8912      	ldrh	r2, [r2, #8]
     16e:	42aa      	cmp	r2, r5
     170:	d006      	beq.n	180 <configure_ADT7420+0x6c>
     172:	1c1d      	adds	r5, r3, #0
	system_pinmux_pin_set_config(ADT7420_EN_PIN, &config_pinmux);
	port_pin_set_output_level(ADT7420_EN_PIN, true);
	
	for(int i = 0; i < 10000; i++);
	
	while((status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet)) != STATUS_OK){
     174:	1c20      	adds	r0, r4, #0
     176:	a903      	add	r1, sp, #12
     178:	47b8      	blx	r7
     17a:	7030      	strb	r0, [r6, #0]
     17c:	2800      	cmp	r0, #0
     17e:	d1f2      	bne.n	166 <configure_ADT7420+0x52>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     180:	2280      	movs	r2, #128	; 0x80
     182:	0212      	lsls	r2, r2, #8
     184:	4b04      	ldr	r3, [pc, #16]	; (198 <configure_ADT7420+0x84>)
     186:	615a      	str	r2, [r3, #20]
 		if(timeout++ == i2c_master_instance.buffer_timeout) break;
	}
	
	port_pin_set_output_level(ADT7420_EN_PIN, false);
}
     188:	b007      	add	sp, #28
     18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     18c:	00002c58 	.word	0x00002c58
     190:	00002445 	.word	0x00002445
     194:	00001f15 	.word	0x00001f15
     198:	40002800 	.word	0x40002800
     19c:	00002710 	.word	0x00002710
     1a0:	20000118 	.word	0x20000118
     1a4:	000009b9 	.word	0x000009b9
     1a8:	20000124 	.word	0x20000124

000001ac <ADT7420_read_temp>:


void ADT7420_read_temp(void)
{
     1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ae:	b087      	sub	sp, #28
	struct i2c_master_packet i2c_packet;
	uint16_t uiTimer = 0;
	uint8_t ucDataBuffer[1] = {0};
     1b0:	2200      	movs	r2, #0
     1b2:	ab02      	add	r3, sp, #8
     1b4:	701a      	strb	r2, [r3, #0]
	uint8_t wr_buffer[2] = {0,0};
	
	i2c_packet.address = TEMP_SENSOR_ADDRESS;
     1b6:	ab03      	add	r3, sp, #12
     1b8:	2148      	movs	r1, #72	; 0x48
     1ba:	8019      	strh	r1, [r3, #0]
	i2c_packet.ten_bit_address = false;
     1bc:	721a      	strb	r2, [r3, #8]
	i2c_packet.high_speed = false;
     1be:	725a      	strb	r2, [r3, #9]
	i2c_packet.hs_master_code = 0;
     1c0:	729a      	strb	r2, [r3, #10]
	i2c_packet.data_length = 2;
     1c2:	3202      	adds	r2, #2
     1c4:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = wr_buffer;
     1c6:	aa01      	add	r2, sp, #4
     1c8:	9204      	str	r2, [sp, #16]
	wr_buffer[0] = TEMP_SENSOR_CONFIG_ADDR;
     1ca:	2303      	movs	r3, #3
     1cc:	7013      	strb	r3, [r2, #0]
	wr_buffer[1] = TEMP_SENSOR_CONFIG_OP_MODE_OS;
     1ce:	331d      	adds	r3, #29
     1d0:	7053      	strb	r3, [r2, #1]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1d2:	2280      	movs	r2, #128	; 0x80
     1d4:	0212      	lsls	r2, r2, #8
     1d6:	4b4a      	ldr	r3, [pc, #296]	; (300 <ADT7420_read_temp+0x154>)
     1d8:	619a      	str	r2, [r3, #24]
     1da:	4b4a      	ldr	r3, [pc, #296]	; (304 <ADT7420_read_temp+0x158>)
     1dc:	3b01      	subs	r3, #1
	
	port_pin_set_output_level(ADT7420_EN_PIN, true);
	
	// Delay long enough for the chip to come up
	for(int i = 0; i < 10000; i++);
     1de:	2b00      	cmp	r3, #0
     1e0:	d1fc      	bne.n	1dc <ADT7420_read_temp+0x30>
     1e2:	2400      	movs	r4, #0
	
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
     1e4:	4d48      	ldr	r5, [pc, #288]	; (308 <ADT7420_read_temp+0x15c>)
     1e6:	4f49      	ldr	r7, [pc, #292]	; (30c <ADT7420_read_temp+0x160>)
     1e8:	4e49      	ldr	r6, [pc, #292]	; (310 <ADT7420_read_temp+0x164>)
     1ea:	1c28      	adds	r0, r5, #0
     1ec:	a903      	add	r1, sp, #12
     1ee:	47b8      	blx	r7
     1f0:	7030      	strb	r0, [r6, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     1f2:	1c63      	adds	r3, r4, #1
     1f4:	b29b      	uxth	r3, r3
     1f6:	892a      	ldrh	r2, [r5, #8]
     1f8:	42a2      	cmp	r2, r4
     1fa:	d006      	beq.n	20a <ADT7420_read_temp+0x5e>
	}while(status != STATUS_OK);
     1fc:	4a44      	ldr	r2, [pc, #272]	; (310 <ADT7420_read_temp+0x164>)
     1fe:	7812      	ldrb	r2, [r2, #0]
	// Delay long enough for the chip to come up
	for(int i = 0; i < 10000; i++);
	
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     200:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     202:	2a00      	cmp	r2, #0
     204:	d1f1      	bne.n	1ea <ADT7420_read_temp+0x3e>
     206:	4b3f      	ldr	r3, [pc, #252]	; (304 <ADT7420_read_temp+0x158>)
     208:	e000      	b.n	20c <ADT7420_read_temp+0x60>
     20a:	4b3e      	ldr	r3, [pc, #248]	; (304 <ADT7420_read_temp+0x158>)
     20c:	3b01      	subs	r3, #1
	
	// Wait for 240 ms for conversion to complete
	for(int i = 0; i < 10000; i++);
     20e:	2b00      	cmp	r3, #0
     210:	d1fc      	bne.n	20c <ADT7420_read_temp+0x60>
	
	uiTimer = 0;
	
	// Set reg pointer to upper byte and read it
	i2c_packet.data_length = 1;
     212:	2201      	movs	r2, #1
     214:	ab03      	add	r3, sp, #12
     216:	805a      	strh	r2, [r3, #2]
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_MS_ADDR;
     218:	2200      	movs	r2, #0
     21a:	ab01      	add	r3, sp, #4
     21c:	701a      	strb	r2, [r3, #0]
	}while(status != STATUS_OK);
	
	// Wait for 240 ms for conversion to complete
	for(int i = 0; i < 10000; i++);
	
	uiTimer = 0;
     21e:	2400      	movs	r4, #0
	
	// Set reg pointer to upper byte and read it
	i2c_packet.data_length = 1;
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_MS_ADDR;
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
     220:	4d39      	ldr	r5, [pc, #228]	; (308 <ADT7420_read_temp+0x15c>)
     222:	4f3a      	ldr	r7, [pc, #232]	; (30c <ADT7420_read_temp+0x160>)
     224:	4e3a      	ldr	r6, [pc, #232]	; (310 <ADT7420_read_temp+0x164>)
     226:	1c28      	adds	r0, r5, #0
     228:	a903      	add	r1, sp, #12
     22a:	47b8      	blx	r7
     22c:	7030      	strb	r0, [r6, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     22e:	1c63      	adds	r3, r4, #1
     230:	b29b      	uxth	r3, r3
     232:	892a      	ldrh	r2, [r5, #8]
     234:	42a2      	cmp	r2, r4
     236:	d004      	beq.n	242 <ADT7420_read_temp+0x96>
	}while(status != STATUS_OK);
     238:	4a35      	ldr	r2, [pc, #212]	; (310 <ADT7420_read_temp+0x164>)
     23a:	7812      	ldrb	r2, [r2, #0]
	// Set reg pointer to upper byte and read it
	i2c_packet.data_length = 1;
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_MS_ADDR;
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     23c:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     23e:	2a00      	cmp	r2, #0
     240:	d1f1      	bne.n	226 <ADT7420_read_temp+0x7a>
	
	uiTimer = 0;
	
	i2c_packet.data_length = 1;
     242:	ab03      	add	r3, sp, #12
     244:	2201      	movs	r2, #1
     246:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = ucDataBuffer;
     248:	aa02      	add	r2, sp, #8
     24a:	9204      	str	r2, [sp, #16]
	do{
		status = i2c_master_write_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
	}while(status != STATUS_OK);
	
	uiTimer = 0;
     24c:	2400      	movs	r4, #0
	
	i2c_packet.data_length = 1;
	i2c_packet.data = ucDataBuffer;
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
     24e:	4d2e      	ldr	r5, [pc, #184]	; (308 <ADT7420_read_temp+0x15c>)
     250:	4f30      	ldr	r7, [pc, #192]	; (314 <ADT7420_read_temp+0x168>)
     252:	4e2f      	ldr	r6, [pc, #188]	; (310 <ADT7420_read_temp+0x164>)
     254:	1c28      	adds	r0, r5, #0
     256:	a903      	add	r1, sp, #12
     258:	47b8      	blx	r7
     25a:	7030      	strb	r0, [r6, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     25c:	1c63      	adds	r3, r4, #1
     25e:	b29b      	uxth	r3, r3
     260:	892a      	ldrh	r2, [r5, #8]
     262:	42a2      	cmp	r2, r4
     264:	d004      	beq.n	270 <ADT7420_read_temp+0xc4>
	}while(status != STATUS_OK);
     266:	4a2a      	ldr	r2, [pc, #168]	; (310 <ADT7420_read_temp+0x164>)
     268:	7812      	ldrb	r2, [r2, #0]
	
	i2c_packet.data_length = 1;
	i2c_packet.data = ucDataBuffer;
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     26a:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     26c:	2a00      	cmp	r2, #0
     26e:	d1f1      	bne.n	254 <ADT7420_read_temp+0xa8>
	uiTemperature = ucDataBuffer[0] << 8;
     270:	ab02      	add	r3, sp, #8
     272:	781b      	ldrb	r3, [r3, #0]
     274:	021b      	lsls	r3, r3, #8
     276:	4a28      	ldr	r2, [pc, #160]	; (318 <ADT7420_read_temp+0x16c>)
     278:	8013      	strh	r3, [r2, #0]
	
	uiTimer = 0;
	
	// Set reg pointer to lower byte and read it
	i2c_packet.data = wr_buffer;
     27a:	aa03      	add	r2, sp, #12
     27c:	ab01      	add	r3, sp, #4
     27e:	9304      	str	r3, [sp, #16]
	i2c_packet.data_length = 1;
     280:	2101      	movs	r1, #1
     282:	8051      	strh	r1, [r2, #2]
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_LS_ADDR;
     284:	2201      	movs	r2, #1
     286:	701a      	strb	r2, [r3, #0]
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
	}while(status != STATUS_OK);
	uiTemperature = ucDataBuffer[0] << 8;
	
	uiTimer = 0;
     288:	2400      	movs	r4, #0
	// Set reg pointer to lower byte and read it
	i2c_packet.data = wr_buffer;
	i2c_packet.data_length = 1;
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_LS_ADDR;
	do{
		status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_packet);
     28a:	4d1f      	ldr	r5, [pc, #124]	; (308 <ADT7420_read_temp+0x15c>)
     28c:	4f23      	ldr	r7, [pc, #140]	; (31c <ADT7420_read_temp+0x170>)
     28e:	4e20      	ldr	r6, [pc, #128]	; (310 <ADT7420_read_temp+0x164>)
     290:	1c28      	adds	r0, r5, #0
     292:	a903      	add	r1, sp, #12
     294:	47b8      	blx	r7
     296:	7030      	strb	r0, [r6, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     298:	1c63      	adds	r3, r4, #1
     29a:	b29b      	uxth	r3, r3
     29c:	892a      	ldrh	r2, [r5, #8]
     29e:	42a2      	cmp	r2, r4
     2a0:	d004      	beq.n	2ac <ADT7420_read_temp+0x100>
	}while(status != STATUS_OK);
     2a2:	4a1b      	ldr	r2, [pc, #108]	; (310 <ADT7420_read_temp+0x164>)
     2a4:	7812      	ldrb	r2, [r2, #0]
	i2c_packet.data = wr_buffer;
	i2c_packet.data_length = 1;
	wr_buffer[0] = TEMP_SENSOR_TEMP_REG_LS_ADDR;
	do{
		status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     2a6:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     2a8:	2a00      	cmp	r2, #0
     2aa:	d1f1      	bne.n	290 <ADT7420_read_temp+0xe4>
	i2c_packet.data_length = 1;
     2ac:	ab03      	add	r3, sp, #12
     2ae:	2201      	movs	r2, #1
     2b0:	805a      	strh	r2, [r3, #2]
	i2c_packet.data = ucDataBuffer;
     2b2:	aa02      	add	r2, sp, #8
     2b4:	9204      	str	r2, [sp, #16]
	
	uiTimer = 0;
     2b6:	2400      	movs	r4, #0
	
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
     2b8:	4d13      	ldr	r5, [pc, #76]	; (308 <ADT7420_read_temp+0x15c>)
     2ba:	4f16      	ldr	r7, [pc, #88]	; (314 <ADT7420_read_temp+0x168>)
     2bc:	4e14      	ldr	r6, [pc, #80]	; (310 <ADT7420_read_temp+0x164>)
     2be:	1c28      	adds	r0, r5, #0
     2c0:	a903      	add	r1, sp, #12
     2c2:	47b8      	blx	r7
     2c4:	7030      	strb	r0, [r6, #0]
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     2c6:	1c63      	adds	r3, r4, #1
     2c8:	b29b      	uxth	r3, r3
     2ca:	892a      	ldrh	r2, [r5, #8]
     2cc:	42a2      	cmp	r2, r4
     2ce:	d004      	beq.n	2da <ADT7420_read_temp+0x12e>
	}while(status != STATUS_OK);
     2d0:	4a0f      	ldr	r2, [pc, #60]	; (310 <ADT7420_read_temp+0x164>)
     2d2:	7812      	ldrb	r2, [r2, #0]
	
	uiTimer = 0;
	
	do{
		status = i2c_master_read_packet_wait(&i2c_master_instance, &i2c_packet);
		if(uiTimer++ == i2c_master_instance.buffer_timeout) break;
     2d4:	1c1c      	adds	r4, r3, #0
	}while(status != STATUS_OK);
     2d6:	2a00      	cmp	r2, #0
     2d8:	d1f1      	bne.n	2be <ADT7420_read_temp+0x112>
	uiTemperature = uiTemperature | ucDataBuffer[0];
     2da:	ab02      	add	r3, sp, #8
     2dc:	7819      	ldrb	r1, [r3, #0]
     2de:	4a0e      	ldr	r2, [pc, #56]	; (318 <ADT7420_read_temp+0x16c>)
     2e0:	8813      	ldrh	r3, [r2, #0]
     2e2:	430b      	orrs	r3, r1
     2e4:	8013      	strh	r3, [r2, #0]
	uint8_t ucTemp = (uiTemperature/128 & 0xFF);
     2e6:	466a      	mov	r2, sp
     2e8:	1cd0      	adds	r0, r2, #3
     2ea:	09db      	lsrs	r3, r3, #7
     2ec:	7003      	strb	r3, [r0, #0]
	SP1ML_transmit_data(&ucTemp, 1);
     2ee:	2101      	movs	r1, #1
     2f0:	4b0b      	ldr	r3, [pc, #44]	; (320 <ADT7420_read_temp+0x174>)
     2f2:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2f4:	2280      	movs	r2, #128	; 0x80
     2f6:	0212      	lsls	r2, r2, #8
     2f8:	4b01      	ldr	r3, [pc, #4]	; (300 <ADT7420_read_temp+0x154>)
     2fa:	615a      	str	r2, [r3, #20]
	
	// Put it back in shutdown.
	port_pin_set_output_level(ADT7420_EN_PIN, false);
	
     2fc:	b007      	add	sp, #28
     2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     300:	40002800 	.word	0x40002800
     304:	00002710 	.word	0x00002710
     308:	20000118 	.word	0x20000118
     30c:	000009b9 	.word	0x000009b9
     310:	20000124 	.word	0x20000124
     314:	000009a5 	.word	0x000009a5
     318:	20000098 	.word	0x20000098
     31c:	000009cd 	.word	0x000009cd
     320:	000012c5 	.word	0x000012c5

00000324 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     324:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     326:	4b0c      	ldr	r3, [pc, #48]	; (358 <EVSYS_Handler+0x34>)
     328:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     32a:	2186      	movs	r1, #134	; 0x86
     32c:	05c9      	lsls	r1, r1, #23
     32e:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     330:	6898      	ldr	r0, [r3, #8]
     332:	4302      	orrs	r2, r0
     334:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     336:	4b09      	ldr	r3, [pc, #36]	; (35c <EVSYS_Handler+0x38>)
     338:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     33a:	2c00      	cmp	r4, #0
     33c:	d005      	beq.n	34a <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     33e:	6820      	ldr	r0, [r4, #0]
     340:	6863      	ldr	r3, [r4, #4]
     342:	4798      	blx	r3
		current_hook = current_hook->next;
     344:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
     346:	2c00      	cmp	r4, #0
     348:	d1f9      	bne.n	33e <EVSYS_Handler+0x1a>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     34a:	4b03      	ldr	r3, [pc, #12]	; (358 <EVSYS_Handler+0x34>)
     34c:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     34e:	689a      	ldr	r2, [r3, #8]
     350:	438a      	bics	r2, r1
     352:	609a      	str	r2, [r3, #8]
}
     354:	bd10      	pop	{r4, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	20000000 	.word	0x20000000
     35c:	0fff0fff 	.word	0x0fff0fff

00000360 <_system_events_init>:

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     360:	4906      	ldr	r1, [pc, #24]	; (37c <_system_events_init+0x1c>)
     362:	6a0b      	ldr	r3, [r1, #32]
     364:	2201      	movs	r2, #1
     366:	4313      	orrs	r3, r2
     368:	620b      	str	r3, [r1, #32]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     36a:	2386      	movs	r3, #134	; 0x86
     36c:	05db      	lsls	r3, r3, #23
     36e:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     370:	1c19      	adds	r1, r3, #0
     372:	780b      	ldrb	r3, [r1, #0]
     374:	4213      	tst	r3, r2
     376:	d1fc      	bne.n	372 <_system_events_init+0x12>
	}
}
     378:	4770      	bx	lr
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	40000400 	.word	0x40000400

00000380 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     380:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     382:	2a00      	cmp	r2, #0
     384:	d10d      	bne.n	3a2 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     386:	008b      	lsls	r3, r1, #2
     388:	4a07      	ldr	r2, [pc, #28]	; (3a8 <extint_register_callback+0x28>)
     38a:	589b      	ldr	r3, [r3, r2]
     38c:	2b00      	cmp	r3, #0
     38e:	d103      	bne.n	398 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
     390:	0089      	lsls	r1, r1, #2
     392:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     394:	2300      	movs	r3, #0
     396:	e004      	b.n	3a2 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
     398:	4283      	cmp	r3, r0
     39a:	d001      	beq.n	3a0 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     39c:	231d      	movs	r3, #29
     39e:	e000      	b.n	3a2 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     3a0:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     3a2:	1c18      	adds	r0, r3, #0
     3a4:	4770      	bx	lr
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	20000128 	.word	0x20000128

000003ac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     3ac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     3ae:	2200      	movs	r2, #0
     3b0:	4b15      	ldr	r3, [pc, #84]	; (408 <EIC_Handler+0x5c>)
     3b2:	701a      	strb	r2, [r3, #0]
     3b4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     3b6:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     3b8:	4e14      	ldr	r6, [pc, #80]	; (40c <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     3ba:	4c13      	ldr	r4, [pc, #76]	; (408 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     3bc:	2b1f      	cmp	r3, #31
     3be:	d919      	bls.n	3f4 <EIC_Handler+0x48>
     3c0:	e00f      	b.n	3e2 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     3c2:	2100      	movs	r1, #0
     3c4:	e000      	b.n	3c8 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     3c6:	4912      	ldr	r1, [pc, #72]	; (410 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     3c8:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     3ca:	009b      	lsls	r3, r3, #2
     3cc:	599b      	ldr	r3, [r3, r6]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d000      	beq.n	3d4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     3d2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     3d4:	7823      	ldrb	r3, [r4, #0]
     3d6:	3301      	adds	r3, #1
     3d8:	b2db      	uxtb	r3, r3
     3da:	7023      	strb	r3, [r4, #0]
     3dc:	2b0f      	cmp	r3, #15
     3de:	d9ed      	bls.n	3bc <EIC_Handler+0x10>
     3e0:	e011      	b.n	406 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     3e2:	1c29      	adds	r1, r5, #0
     3e4:	4019      	ands	r1, r3
     3e6:	2201      	movs	r2, #1
     3e8:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     3ea:	2100      	movs	r1, #0
     3ec:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     3ee:	4211      	tst	r1, r2
     3f0:	d1e7      	bne.n	3c2 <EIC_Handler+0x16>
     3f2:	e7ef      	b.n	3d4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     3f4:	1c29      	adds	r1, r5, #0
     3f6:	4019      	ands	r1, r3
     3f8:	2201      	movs	r2, #1
     3fa:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     3fc:	4904      	ldr	r1, [pc, #16]	; (410 <EIC_Handler+0x64>)
     3fe:	6949      	ldr	r1, [r1, #20]
     400:	4211      	tst	r1, r2
     402:	d1e0      	bne.n	3c6 <EIC_Handler+0x1a>
     404:	e7e6      	b.n	3d4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     406:	bd70      	pop	{r4, r5, r6, pc}
     408:	20000125 	.word	0x20000125
     40c:	20000128 	.word	0x20000128
     410:	40002400 	.word	0x40002400

00000414 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     414:	4a06      	ldr	r2, [pc, #24]	; (430 <_extint_enable+0x1c>)
     416:	7811      	ldrb	r1, [r2, #0]
     418:	2302      	movs	r3, #2
     41a:	430b      	orrs	r3, r1
     41c:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     41e:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     420:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     422:	6853      	ldr	r3, [r2, #4]
     424:	4219      	tst	r1, r3
     426:	d1fc      	bne.n	422 <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     428:	6853      	ldr	r3, [r2, #4]
     42a:	4218      	tst	r0, r3
     42c:	d1f9      	bne.n	422 <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     42e:	4770      	bx	lr
     430:	40002400 	.word	0x40002400

00000434 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     434:	b500      	push	{lr}
     436:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     438:	4a18      	ldr	r2, [pc, #96]	; (49c <_system_extint_init+0x68>)
     43a:	6953      	ldr	r3, [r2, #20]
     43c:	2180      	movs	r1, #128	; 0x80
     43e:	0089      	lsls	r1, r1, #2
     440:	430b      	orrs	r3, r1
     442:	6153      	str	r3, [r2, #20]

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     444:	a901      	add	r1, sp, #4
     446:	2301      	movs	r3, #1
     448:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     44a:	2003      	movs	r0, #3
     44c:	4b14      	ldr	r3, [pc, #80]	; (4a0 <_system_extint_init+0x6c>)
     44e:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     450:	2003      	movs	r0, #3
     452:	4b14      	ldr	r3, [pc, #80]	; (4a4 <_system_extint_init+0x70>)
     454:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     456:	4a14      	ldr	r2, [pc, #80]	; (4a8 <_system_extint_init+0x74>)
     458:	7811      	ldrb	r1, [r2, #0]
     45a:	2301      	movs	r3, #1
     45c:	430b      	orrs	r3, r1
     45e:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     460:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     462:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     464:	6853      	ldr	r3, [r2, #4]
     466:	4219      	tst	r1, r3
     468:	d1fc      	bne.n	464 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     46a:	6853      	ldr	r3, [r2, #4]
     46c:	4218      	tst	r0, r3
     46e:	d009      	beq.n	484 <_system_extint_init+0x50>
     470:	e7f8      	b.n	464 <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     472:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     474:	428b      	cmp	r3, r1
     476:	d1fc      	bne.n	472 <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     478:	2208      	movs	r2, #8
     47a:	4b0c      	ldr	r3, [pc, #48]	; (4ac <_system_extint_init+0x78>)
     47c:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     47e:	4b0c      	ldr	r3, [pc, #48]	; (4b0 <_system_extint_init+0x7c>)
     480:	4798      	blx	r3
     482:	e009      	b.n	498 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     484:	4a08      	ldr	r2, [pc, #32]	; (4a8 <_system_extint_init+0x74>)
     486:	7813      	ldrb	r3, [r2, #0]
     488:	2110      	movs	r1, #16
     48a:	438b      	bics	r3, r1
     48c:	7013      	strb	r3, [r2, #0]
     48e:	4b09      	ldr	r3, [pc, #36]	; (4b4 <_system_extint_init+0x80>)
     490:	1c19      	adds	r1, r3, #0
     492:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     494:	2200      	movs	r2, #0
     496:	e7ec      	b.n	472 <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     498:	b003      	add	sp, #12
     49a:	bd00      	pop	{pc}
     49c:	40000400 	.word	0x40000400
     4a0:	00001e19 	.word	0x00001e19
     4a4:	00001db1 	.word	0x00001db1
     4a8:	40002400 	.word	0x40002400
     4ac:	e000e100 	.word	0xe000e100
     4b0:	00000415 	.word	0x00000415
     4b4:	20000128 	.word	0x20000128

000004b8 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     4b8:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     4ba:	2207      	movs	r2, #7
     4bc:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     4be:	421a      	tst	r2, r3
     4c0:	d1fc      	bne.n	4bc <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     4c2:	4770      	bx	lr

000004c4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4c6:	464f      	mov	r7, r9
     4c8:	4646      	mov	r6, r8
     4ca:	b4c0      	push	{r6, r7}
     4cc:	b083      	sub	sp, #12
     4ce:	1c07      	adds	r7, r0, #0
     4d0:	1c0d      	adds	r5, r1, #0
     4d2:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     4d4:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     4d6:	1c08      	adds	r0, r1, #0
     4d8:	4b6b      	ldr	r3, [pc, #428]	; (688 <i2c_master_init+0x1c4>)
     4da:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21)
	if (sercom_index == 5) {
     4dc:	2805      	cmp	r0, #5
     4de:	d100      	bne.n	4e2 <i2c_master_init+0x1e>
     4e0:	e0ba      	b.n	658 <i2c_master_init+0x194>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     4e2:	1c04      	adds	r4, r0, #0
     4e4:	3412      	adds	r4, #18
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     4e6:	4969      	ldr	r1, [pc, #420]	; (68c <i2c_master_init+0x1c8>)
     4e8:	69cb      	ldr	r3, [r1, #28]
	/* Turn on module in PM */
#if (SAML21)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     4ea:	2201      	movs	r2, #1
     4ec:	4082      	lsls	r2, r0
     4ee:	1c10      	adds	r0, r2, #0
     4f0:	4318      	orrs	r0, r3
     4f2:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     4f4:	a901      	add	r1, sp, #4
     4f6:	7b33      	ldrb	r3, [r6, #12]
     4f8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     4fa:	b2e4      	uxtb	r4, r4
     4fc:	1c20      	adds	r0, r4, #0
     4fe:	4b64      	ldr	r3, [pc, #400]	; (690 <i2c_master_init+0x1cc>)
     500:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     502:	1c20      	adds	r0, r4, #0
     504:	4b63      	ldr	r3, [pc, #396]	; (694 <i2c_master_init+0x1d0>)
     506:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     508:	7b30      	ldrb	r0, [r6, #12]
     50a:	2100      	movs	r1, #0
     50c:	4b62      	ldr	r3, [pc, #392]	; (698 <i2c_master_init+0x1d4>)
     50e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     510:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     512:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     514:	079b      	lsls	r3, r3, #30
     516:	d500      	bpl.n	51a <i2c_master_init+0x56>
     518:	e0b0      	b.n	67c <i2c_master_init+0x1b8>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     51a:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     51c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     51e:	07db      	lsls	r3, r3, #31
     520:	d500      	bpl.n	524 <i2c_master_init+0x60>
     522:	e0ab      	b.n	67c <i2c_master_init+0x1b8>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     524:	2314      	movs	r3, #20
     526:	602b      	str	r3, [r5, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     528:	683d      	ldr	r5, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     52a:	1c28      	adds	r0, r5, #0
     52c:	4b56      	ldr	r3, [pc, #344]	; (688 <i2c_master_init+0x1c4>)
     52e:	4798      	blx	r3
     530:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     532:	2380      	movs	r3, #128	; 0x80
     534:	466a      	mov	r2, sp
     536:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     538:	2300      	movs	r3, #0
     53a:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     53c:	2201      	movs	r2, #1
     53e:	4669      	mov	r1, sp
     540:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     542:	70cb      	strb	r3, [r1, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     544:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     546:	6a34      	ldr	r4, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     548:	2800      	cmp	r0, #0
     54a:	d103      	bne.n	554 <i2c_master_init+0x90>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     54c:	1c28      	adds	r0, r5, #0
     54e:	2100      	movs	r1, #0
     550:	4b52      	ldr	r3, [pc, #328]	; (69c <i2c_master_init+0x1d8>)
     552:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     554:	466b      	mov	r3, sp
     556:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     558:	2302      	movs	r3, #2
     55a:	466a      	mov	r2, sp
     55c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     55e:	0c00      	lsrs	r0, r0, #16
     560:	b2c0      	uxtb	r0, r0
     562:	4669      	mov	r1, sp
     564:	4b4e      	ldr	r3, [pc, #312]	; (6a0 <i2c_master_init+0x1dc>)
     566:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     568:	2c00      	cmp	r4, #0
     56a:	d104      	bne.n	576 <i2c_master_init+0xb2>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     56c:	1c28      	adds	r0, r5, #0
     56e:	2101      	movs	r1, #1
     570:	4b4a      	ldr	r3, [pc, #296]	; (69c <i2c_master_init+0x1d8>)
     572:	4798      	blx	r3
     574:	1c04      	adds	r4, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     576:	466b      	mov	r3, sp
     578:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     57a:	2302      	movs	r3, #2
     57c:	466a      	mov	r2, sp
     57e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     580:	0c24      	lsrs	r4, r4, #16
     582:	b2e0      	uxtb	r0, r4
     584:	4669      	mov	r1, sp
     586:	4b46      	ldr	r3, [pc, #280]	; (6a0 <i2c_master_init+0x1dc>)
     588:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     58a:	8ab3      	ldrh	r3, [r6, #20]
     58c:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     58e:	8af3      	ldrh	r3, [r6, #22]
     590:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     592:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     594:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     596:	2a00      	cmp	r2, #0
     598:	d104      	bne.n	5a4 <i2c_master_init+0xe0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     59a:	4b42      	ldr	r3, [pc, #264]	; (6a4 <i2c_master_init+0x1e0>)
     59c:	789b      	ldrb	r3, [r3, #2]
     59e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     5a0:	0fdb      	lsrs	r3, r3, #31
     5a2:	01db      	lsls	r3, r3, #7
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     5a4:	6932      	ldr	r2, [r6, #16]
     5a6:	2a00      	cmp	r2, #0
     5a8:	d000      	beq.n	5ac <i2c_master_init+0xe8>
		tmp_ctrla |= config->start_hold_time;
     5aa:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     5ac:	68b2      	ldr	r2, [r6, #8]
     5ae:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     5b0:	2224      	movs	r2, #36	; 0x24
     5b2:	5cb2      	ldrb	r2, [r6, r2]
     5b4:	2a00      	cmp	r2, #0
     5b6:	d002      	beq.n	5be <i2c_master_init+0xfa>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     5b8:	2280      	movs	r2, #128	; 0x80
     5ba:	05d2      	lsls	r2, r2, #23
     5bc:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     5be:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     5c0:	2a00      	cmp	r2, #0
     5c2:	d000      	beq.n	5c6 <i2c_master_init+0x102>
		tmp_ctrla |= config->inactive_timeout;
     5c4:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     5c6:	222c      	movs	r2, #44	; 0x2c
     5c8:	5cb2      	ldrb	r2, [r6, r2]
     5ca:	2a00      	cmp	r2, #0
     5cc:	d002      	beq.n	5d4 <i2c_master_init+0x110>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     5ce:	2280      	movs	r2, #128	; 0x80
     5d0:	0512      	lsls	r2, r2, #20
     5d2:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     5d4:	222d      	movs	r2, #45	; 0x2d
     5d6:	5cb2      	ldrb	r2, [r6, r2]
     5d8:	2a00      	cmp	r2, #0
     5da:	d002      	beq.n	5e2 <i2c_master_init+0x11e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     5dc:	2280      	movs	r2, #128	; 0x80
     5de:	0412      	lsls	r2, r2, #16
     5e0:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     5e2:	222e      	movs	r2, #46	; 0x2e
     5e4:	5cb2      	ldrb	r2, [r6, r2]
     5e6:	2a00      	cmp	r2, #0
     5e8:	d002      	beq.n	5f0 <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     5ea:	2280      	movs	r2, #128	; 0x80
     5ec:	03d2      	lsls	r2, r2, #15
     5ee:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     5f0:	682a      	ldr	r2, [r5, #0]
     5f2:	4313      	orrs	r3, r2
     5f4:	602b      	str	r3, [r5, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     5f6:	2380      	movs	r3, #128	; 0x80
     5f8:	005b      	lsls	r3, r3, #1
     5fa:	606b      	str	r3, [r5, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     5fc:	4647      	mov	r7, r8
     5fe:	3712      	adds	r7, #18
     600:	b2fb      	uxtb	r3, r7
     602:	4698      	mov	r8, r3
     604:	1c18      	adds	r0, r3, #0
     606:	4b28      	ldr	r3, [pc, #160]	; (6a8 <i2c_master_init+0x1e4>)
     608:	4798      	blx	r3
     60a:	1c04      	adds	r4, r0, #0
	uint32_t fscl        = 1000*config->baud_rate;
     60c:	20fa      	movs	r0, #250	; 0xfa
     60e:	0080      	lsls	r0, r0, #2
     610:	6833      	ldr	r3, [r6, #0]
     612:	4343      	muls	r3, r0
     614:	4699      	mov	r9, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
	int32_t  denominator = 2*fscl;
     616:	005f      	lsls	r7, r3, #1
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
     618:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
     61a:	4360      	muls	r0, r4
     61c:	4923      	ldr	r1, [pc, #140]	; (6ac <i2c_master_init+0x1e8>)
     61e:	4b24      	ldr	r3, [pc, #144]	; (6b0 <i2c_master_init+0x1ec>)
     620:	4798      	blx	r3
     622:	300a      	adds	r0, #10
     624:	464b      	mov	r3, r9
     626:	4358      	muls	r0, r3
     628:	1a20      	subs	r0, r4, r0
	int32_t  denominator = 2*fscl;
	/* For more accurate result, can use round div. */
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
     62a:	19c0      	adds	r0, r0, r7
     62c:	3801      	subs	r0, #1
     62e:	1c39      	adds	r1, r7, #0
     630:	4b20      	ldr	r3, [pc, #128]	; (6b4 <i2c_master_init+0x1f0>)
     632:	4798      	blx	r3
     634:	1e04      	subs	r4, r0, #0

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     636:	2cff      	cmp	r4, #255	; 0xff
     638:	d81f      	bhi.n	67a <i2c_master_init+0x1b6>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     63a:	4640      	mov	r0, r8
     63c:	4b1a      	ldr	r3, [pc, #104]	; (6a8 <i2c_master_init+0x1e4>)
     63e:	4798      	blx	r3
     640:	6871      	ldr	r1, [r6, #4]
     642:	23fa      	movs	r3, #250	; 0xfa
     644:	00db      	lsls	r3, r3, #3
     646:	4359      	muls	r1, r3
     648:	1e4b      	subs	r3, r1, #1
     64a:	1818      	adds	r0, r3, r0
     64c:	4b18      	ldr	r3, [pc, #96]	; (6b0 <i2c_master_init+0x1ec>)
     64e:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     650:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     652:	28ff      	cmp	r0, #255	; 0xff
     654:	d811      	bhi.n	67a <i2c_master_init+0x1b6>
     656:	e006      	b.n	666 <i2c_master_init+0x1a2>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     658:	4a0c      	ldr	r2, [pc, #48]	; (68c <i2c_master_init+0x1c8>)
     65a:	6a11      	ldr	r1, [r2, #32]
     65c:	2302      	movs	r3, #2
     65e:	430b      	orrs	r3, r1
     660:	6213      	str	r3, [r2, #32]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     662:	2418      	movs	r4, #24
     664:	e746      	b.n	4f4 <i2c_master_init+0x30>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     666:	0400      	lsls	r0, r0, #16
     668:	23ff      	movs	r3, #255	; 0xff
     66a:	041b      	lsls	r3, r3, #16
     66c:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     66e:	23ff      	movs	r3, #255	; 0xff
     670:	401c      	ands	r4, r3
     672:	4304      	orrs	r4, r0
     674:	60ec      	str	r4, [r5, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     676:	2000      	movs	r0, #0
     678:	e000      	b.n	67c <i2c_master_init+0x1b8>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     67a:	2040      	movs	r0, #64	; 0x40
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     67c:	b003      	add	sp, #12
     67e:	bc0c      	pop	{r2, r3}
     680:	4690      	mov	r8, r2
     682:	4699      	mov	r9, r3
     684:	bdf0      	pop	{r4, r5, r6, r7, pc}
     686:	46c0      	nop			; (mov r8, r8)
     688:	00000d89 	.word	0x00000d89
     68c:	40000400 	.word	0x40000400
     690:	00001e19 	.word	0x00001e19
     694:	00001db1 	.word	0x00001db1
     698:	00000bd1 	.word	0x00000bd1
     69c:	00000c1d 	.word	0x00000c1d
     6a0:	00001f15 	.word	0x00001f15
     6a4:	41002000 	.word	0x41002000
     6a8:	00001e3d 	.word	0x00001e3d
     6ac:	3b9aca00 	.word	0x3b9aca00
     6b0:	000020a1 	.word	0x000020a1
     6b4:	000021c1 	.word	0x000021c1

000006b8 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6b8:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     6ba:	7e1a      	ldrb	r2, [r3, #24]
     6bc:	0792      	lsls	r2, r2, #30
     6be:	d507      	bpl.n	6d0 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     6c0:	2202      	movs	r2, #2
     6c2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     6c4:	8b5b      	ldrh	r3, [r3, #26]
     6c6:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     6c8:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     6ca:	17db      	asrs	r3, r3, #31
     6cc:	4018      	ands	r0, r3
     6ce:	e00a      	b.n	6e6 <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     6d0:	8b5a      	ldrh	r2, [r3, #26]
     6d2:	0752      	lsls	r2, r2, #29
     6d4:	d506      	bpl.n	6e4 <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6d6:	685a      	ldr	r2, [r3, #4]
     6d8:	21c0      	movs	r1, #192	; 0xc0
     6da:	0289      	lsls	r1, r1, #10
     6dc:	430a      	orrs	r2, r1
     6de:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     6e0:	2018      	movs	r0, #24
     6e2:	e000      	b.n	6e6 <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
     6e4:	2000      	movs	r0, #0
}
     6e6:	4770      	bx	lr

000006e8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     6e8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6ea:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     6ec:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     6ee:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     6f0:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     6f2:	e004      	b.n	6fe <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     6f4:	3301      	adds	r3, #1
     6f6:	b29b      	uxth	r3, r3
     6f8:	8901      	ldrh	r1, [r0, #8]
     6fa:	4299      	cmp	r1, r3
     6fc:	d907      	bls.n	70e <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     6fe:	7e11      	ldrb	r1, [r2, #24]
     700:	4221      	tst	r1, r4
     702:	d106      	bne.n	712 <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     704:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     706:	4229      	tst	r1, r5
     708:	d0f4      	beq.n	6f4 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     70a:	2000      	movs	r0, #0
     70c:	e002      	b.n	714 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     70e:	2012      	movs	r0, #18
     710:	e000      	b.n	714 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
     712:	2000      	movs	r0, #0
}
     714:	bd30      	pop	{r4, r5, pc}
     716:	46c0      	nop			; (mov r8, r8)

00000718 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     718:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     71a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     71c:	6863      	ldr	r3, [r4, #4]
     71e:	2280      	movs	r2, #128	; 0x80
     720:	02d2      	lsls	r2, r2, #11
     722:	4313      	orrs	r3, r2
     724:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     726:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     728:	4b02      	ldr	r3, [pc, #8]	; (734 <_i2c_master_send_hs_master_code+0x1c>)
     72a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     72c:	2301      	movs	r3, #1
     72e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     730:	bd10      	pop	{r4, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	000006e9 	.word	0x000006e9

00000738 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     738:	b5f0      	push	{r4, r5, r6, r7, lr}
     73a:	465f      	mov	r7, fp
     73c:	4656      	mov	r6, sl
     73e:	464d      	mov	r5, r9
     740:	4644      	mov	r4, r8
     742:	b4f0      	push	{r4, r5, r6, r7}
     744:	b083      	sub	sp, #12
     746:	1c06      	adds	r6, r0, #0
     748:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     74a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     74c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     74e:	682b      	ldr	r3, [r5, #0]
     750:	011b      	lsls	r3, r3, #4
     752:	0fdb      	lsrs	r3, r3, #31
     754:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     756:	7a4b      	ldrb	r3, [r1, #9]
     758:	2b00      	cmp	r3, #0
     75a:	d002      	beq.n	762 <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     75c:	7a89      	ldrb	r1, [r1, #10]
     75e:	4b4f      	ldr	r3, [pc, #316]	; (89c <_i2c_master_read_packet+0x164>)
     760:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     762:	686a      	ldr	r2, [r5, #4]
     764:	4b4e      	ldr	r3, [pc, #312]	; (8a0 <_i2c_master_read_packet+0x168>)
     766:	4013      	ands	r3, r2
     768:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     76a:	464b      	mov	r3, r9
     76c:	7a1b      	ldrb	r3, [r3, #8]
     76e:	2b00      	cmp	r3, #0
     770:	d026      	beq.n	7c0 <_i2c_master_read_packet+0x88>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     772:	464b      	mov	r3, r9
     774:	7a5b      	ldrb	r3, [r3, #9]
     776:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     778:	464b      	mov	r3, r9
     77a:	881b      	ldrh	r3, [r3, #0]
     77c:	005b      	lsls	r3, r3, #1
     77e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     780:	2280      	movs	r2, #128	; 0x80
     782:	0212      	lsls	r2, r2, #8
     784:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     786:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     788:	1c30      	adds	r0, r6, #0
     78a:	4b46      	ldr	r3, [pc, #280]	; (8a4 <_i2c_master_read_packet+0x16c>)
     78c:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     78e:	686a      	ldr	r2, [r5, #4]
     790:	4b43      	ldr	r3, [pc, #268]	; (8a0 <_i2c_master_read_packet+0x168>)
     792:	4013      	ands	r3, r2
     794:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     796:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     798:	d178      	bne.n	88c <_i2c_master_read_packet+0x154>
			tmp_status = _i2c_master_address_response(module);
     79a:	1c30      	adds	r0, r6, #0
     79c:	4b42      	ldr	r3, [pc, #264]	; (8a8 <_i2c_master_read_packet+0x170>)
     79e:	4798      	blx	r3
     7a0:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
     7a2:	d173      	bne.n	88c <_i2c_master_read_packet+0x154>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a4:	464b      	mov	r3, r9
     7a6:	7a5b      	ldrb	r3, [r3, #9]
     7a8:	039b      	lsls	r3, r3, #14
     7aa:	2201      	movs	r2, #1
     7ac:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7ae:	464a      	mov	r2, r9
     7b0:	8812      	ldrh	r2, [r2, #0]
     7b2:	0a12      	lsrs	r2, r2, #8
     7b4:	2178      	movs	r1, #120	; 0x78
     7b6:	430a      	orrs	r2, r1
     7b8:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7ba:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7bc:	626b      	str	r3, [r5, #36]	; 0x24
     7be:	e009      	b.n	7d4 <_i2c_master_read_packet+0x9c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7c0:	464b      	mov	r3, r9
     7c2:	881b      	ldrh	r3, [r3, #0]
     7c4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7c6:	464b      	mov	r3, r9
     7c8:	7a5b      	ldrb	r3, [r3, #9]
     7ca:	039b      	lsls	r3, r3, #14
     7cc:	4313      	orrs	r3, r2
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7ce:	2201      	movs	r2, #1
     7d0:	4313      	orrs	r3, r2
     7d2:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     7d4:	1c30      	adds	r0, r6, #0
     7d6:	4b33      	ldr	r3, [pc, #204]	; (8a4 <_i2c_master_read_packet+0x16c>)
     7d8:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     7da:	686a      	ldr	r2, [r5, #4]
     7dc:	4b30      	ldr	r3, [pc, #192]	; (8a0 <_i2c_master_read_packet+0x168>)
     7de:	4013      	ands	r3, r2
     7e0:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     7e2:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     7e4:	d152      	bne.n	88c <_i2c_master_read_packet+0x154>
		tmp_status = _i2c_master_address_response(module);
     7e6:	1c30      	adds	r0, r6, #0
     7e8:	4b2f      	ldr	r3, [pc, #188]	; (8a8 <_i2c_master_read_packet+0x170>)
     7ea:	4798      	blx	r3
     7ec:	9001      	str	r0, [sp, #4]
     7ee:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     7f0:	d14c      	bne.n	88c <_i2c_master_read_packet+0x154>
     7f2:	3c01      	subs	r4, #1
     7f4:	b2a4      	uxth	r4, r4
     7f6:	2300      	movs	r3, #0
     7f8:	4698      	mov	r8, r3
		/* Read data buffer. */
		while (tmp_data_length--) {
     7fa:	4b2c      	ldr	r3, [pc, #176]	; (8ac <_i2c_master_read_packet+0x174>)
     7fc:	469b      	mov	fp, r3
     7fe:	e029      	b.n	854 <_i2c_master_read_packet+0x11c>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     800:	8b6b      	ldrh	r3, [r5, #26]
     802:	069b      	lsls	r3, r3, #26
     804:	d541      	bpl.n	88a <_i2c_master_read_packet+0x152>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     806:	7af3      	ldrb	r3, [r6, #11]
     808:	2b00      	cmp	r3, #0
     80a:	d00f      	beq.n	82c <_i2c_master_read_packet+0xf4>
     80c:	4653      	mov	r3, sl
     80e:	2b00      	cmp	r3, #0
     810:	d102      	bne.n	818 <_i2c_master_read_packet+0xe0>
     812:	2c00      	cmp	r4, #0
     814:	d002      	beq.n	81c <_i2c_master_read_packet+0xe4>
     816:	e009      	b.n	82c <_i2c_master_read_packet+0xf4>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     818:	2c01      	cmp	r4, #1
     81a:	d107      	bne.n	82c <_i2c_master_read_packet+0xf4>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     81c:	686b      	ldr	r3, [r5, #4]
     81e:	2280      	movs	r2, #128	; 0x80
     820:	02d2      	lsls	r2, r2, #11
     822:	4313      	orrs	r3, r2
     824:	606b      	str	r3, [r5, #4]
     826:	3c01      	subs	r4, #1
     828:	b2a4      	uxth	r4, r4
     82a:	e013      	b.n	854 <_i2c_master_read_packet+0x11c>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     82c:	1c30      	adds	r0, r6, #0
     82e:	4b20      	ldr	r3, [pc, #128]	; (8b0 <_i2c_master_read_packet+0x178>)
     830:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     832:	4643      	mov	r3, r8
     834:	1c5f      	adds	r7, r3, #1
     836:	b2bf      	uxth	r7, r7
     838:	2328      	movs	r3, #40	; 0x28
     83a:	5ceb      	ldrb	r3, [r5, r3]
     83c:	464a      	mov	r2, r9
     83e:	6852      	ldr	r2, [r2, #4]
     840:	4641      	mov	r1, r8
     842:	5453      	strb	r3, [r2, r1]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     844:	1c30      	adds	r0, r6, #0
     846:	4b17      	ldr	r3, [pc, #92]	; (8a4 <_i2c_master_read_packet+0x16c>)
     848:	4798      	blx	r3
     84a:	3c01      	subs	r4, #1
     84c:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     84e:	2800      	cmp	r0, #0
     850:	d103      	bne.n	85a <_i2c_master_read_packet+0x122>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     852:	46b8      	mov	r8, r7
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     854:	455c      	cmp	r4, fp
     856:	d1d3      	bne.n	800 <_i2c_master_read_packet+0xc8>
     858:	e001      	b.n	85e <_i2c_master_read_packet+0x126>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     85a:	46b8      	mov	r8, r7
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     85c:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     85e:	7ab3      	ldrb	r3, [r6, #10]
     860:	2b00      	cmp	r3, #0
     862:	d007      	beq.n	874 <_i2c_master_read_packet+0x13c>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     864:	1c30      	adds	r0, r6, #0
     866:	4b12      	ldr	r3, [pc, #72]	; (8b0 <_i2c_master_read_packet+0x178>)
     868:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     86a:	686b      	ldr	r3, [r5, #4]
     86c:	22c0      	movs	r2, #192	; 0xc0
     86e:	0292      	lsls	r2, r2, #10
     870:	4313      	orrs	r3, r2
     872:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     874:	1c30      	adds	r0, r6, #0
     876:	4b0e      	ldr	r3, [pc, #56]	; (8b0 <_i2c_master_read_packet+0x178>)
     878:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     87a:	2328      	movs	r3, #40	; 0x28
     87c:	5cea      	ldrb	r2, [r5, r3]
     87e:	464b      	mov	r3, r9
     880:	685b      	ldr	r3, [r3, #4]
     882:	4641      	mov	r1, r8
     884:	545a      	strb	r2, [r3, r1]
     886:	9b01      	ldr	r3, [sp, #4]
     888:	e000      	b.n	88c <_i2c_master_read_packet+0x154>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     88a:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     88c:	1c18      	adds	r0, r3, #0
     88e:	b003      	add	sp, #12
     890:	bc3c      	pop	{r2, r3, r4, r5}
     892:	4690      	mov	r8, r2
     894:	4699      	mov	r9, r3
     896:	46a2      	mov	sl, r4
     898:	46ab      	mov	fp, r5
     89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89c:	00000719 	.word	0x00000719
     8a0:	fffbffff 	.word	0xfffbffff
     8a4:	000006e9 	.word	0x000006e9
     8a8:	000006b9 	.word	0x000006b9
     8ac:	0000ffff 	.word	0x0000ffff
     8b0:	000004b9 	.word	0x000004b9

000008b4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b6:	465f      	mov	r7, fp
     8b8:	4656      	mov	r6, sl
     8ba:	464d      	mov	r5, r9
     8bc:	4644      	mov	r4, r8
     8be:	b4f0      	push	{r4, r5, r6, r7}
     8c0:	b083      	sub	sp, #12
     8c2:	1c06      	adds	r6, r0, #0
     8c4:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8c6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     8c8:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     8ca:	4b31      	ldr	r3, [pc, #196]	; (990 <_i2c_master_write_packet+0xdc>)
     8cc:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     8ce:	7a7b      	ldrb	r3, [r7, #9]
     8d0:	2b00      	cmp	r3, #0
     8d2:	d003      	beq.n	8dc <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     8d4:	7ab9      	ldrb	r1, [r7, #10]
     8d6:	1c30      	adds	r0, r6, #0
     8d8:	4b2e      	ldr	r3, [pc, #184]	; (994 <_i2c_master_write_packet+0xe0>)
     8da:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     8dc:	686a      	ldr	r2, [r5, #4]
     8de:	4b2e      	ldr	r3, [pc, #184]	; (998 <_i2c_master_write_packet+0xe4>)
     8e0:	4013      	ands	r3, r2
     8e2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     8e4:	7a3b      	ldrb	r3, [r7, #8]
     8e6:	2b00      	cmp	r3, #0
     8e8:	d009      	beq.n	8fe <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     8ea:	7a7b      	ldrb	r3, [r7, #9]
     8ec:	039a      	lsls	r2, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8ee:	883b      	ldrh	r3, [r7, #0]
     8f0:	005b      	lsls	r3, r3, #1
     8f2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     8f4:	2280      	movs	r2, #128	; 0x80
     8f6:	0212      	lsls	r2, r2, #8
     8f8:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8fa:	626b      	str	r3, [r5, #36]	; 0x24
     8fc:	e005      	b.n	90a <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     8fe:	7a7b      	ldrb	r3, [r7, #9]
     900:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     902:	883b      	ldrh	r3, [r7, #0]
     904:	005b      	lsls	r3, r3, #1
     906:	4313      	orrs	r3, r2
     908:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     90a:	1c30      	adds	r0, r6, #0
     90c:	4b23      	ldr	r3, [pc, #140]	; (99c <_i2c_master_write_packet+0xe8>)
     90e:	4798      	blx	r3
     910:	1e03      	subs	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     912:	d136      	bne.n	982 <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
     914:	1c30      	adds	r0, r6, #0
     916:	4b22      	ldr	r3, [pc, #136]	; (9a0 <_i2c_master_write_packet+0xec>)
     918:	4798      	blx	r3
     91a:	1e03      	subs	r3, r0, #0
     91c:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     91e:	d130      	bne.n	982 <_i2c_master_write_packet+0xce>
     920:	46a0      	mov	r8, r4
     922:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     924:	3320      	adds	r3, #32
     926:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     928:	4b19      	ldr	r3, [pc, #100]	; (990 <_i2c_master_write_packet+0xdc>)
     92a:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     92c:	4b1b      	ldr	r3, [pc, #108]	; (99c <_i2c_master_write_packet+0xe8>)
     92e:	469a      	mov	sl, r3
     930:	e011      	b.n	956 <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     932:	8b6b      	ldrh	r3, [r5, #26]
     934:	464a      	mov	r2, r9
     936:	4213      	tst	r3, r2
     938:	d022      	beq.n	980 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     93a:	1c30      	adds	r0, r6, #0
     93c:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     93e:	687b      	ldr	r3, [r7, #4]
     940:	5d1a      	ldrb	r2, [r3, r4]
     942:	2328      	movs	r3, #40	; 0x28
     944:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     946:	1c30      	adds	r0, r6, #0
     948:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     94a:	2800      	cmp	r0, #0
     94c:	d106      	bne.n	95c <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     94e:	8b6b      	ldrh	r3, [r5, #26]
     950:	3401      	adds	r4, #1
     952:	075b      	lsls	r3, r3, #29
     954:	d404      	bmi.n	960 <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     956:	4544      	cmp	r4, r8
     958:	d1eb      	bne.n	932 <_i2c_master_write_packet+0x7e>
     95a:	e003      	b.n	964 <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     95c:	9001      	str	r0, [sp, #4]
     95e:	e001      	b.n	964 <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     960:	231e      	movs	r3, #30
     962:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     964:	7ab3      	ldrb	r3, [r6, #10]
     966:	9801      	ldr	r0, [sp, #4]
     968:	2b00      	cmp	r3, #0
     96a:	d00a      	beq.n	982 <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     96c:	1c30      	adds	r0, r6, #0
     96e:	4b08      	ldr	r3, [pc, #32]	; (990 <_i2c_master_write_packet+0xdc>)
     970:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     972:	686b      	ldr	r3, [r5, #4]
     974:	22c0      	movs	r2, #192	; 0xc0
     976:	0292      	lsls	r2, r2, #10
     978:	4313      	orrs	r3, r2
     97a:	606b      	str	r3, [r5, #4]
     97c:	9801      	ldr	r0, [sp, #4]
     97e:	e000      	b.n	982 <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     980:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     982:	b003      	add	sp, #12
     984:	bc3c      	pop	{r2, r3, r4, r5}
     986:	4690      	mov	r8, r2
     988:	4699      	mov	r9, r3
     98a:	46a2      	mov	sl, r4
     98c:	46ab      	mov	fp, r5
     98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     990:	000004b9 	.word	0x000004b9
     994:	00000719 	.word	0x00000719
     998:	fffbffff 	.word	0xfffbffff
     99c:	000006e9 	.word	0x000006e9
     9a0:	000006b9 	.word	0x000006b9

000009a4 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9a4:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     9a6:	2301      	movs	r3, #1
     9a8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9aa:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_read_packet(module, packet);
     9ac:	4b01      	ldr	r3, [pc, #4]	; (9b4 <i2c_master_read_packet_wait+0x10>)
     9ae:	4798      	blx	r3
}
     9b0:	bd08      	pop	{r3, pc}
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	00000739 	.word	0x00000739

000009b8 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9b8:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     9ba:	2301      	movs	r3, #1
     9bc:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9be:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     9c0:	4b01      	ldr	r3, [pc, #4]	; (9c8 <i2c_master_write_packet_wait+0x10>)
     9c2:	4798      	blx	r3
}
     9c4:	bd08      	pop	{r3, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	000008b5 	.word	0x000008b5

000009cc <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9cc:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     9ce:	2300      	movs	r3, #0
     9d0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9d2:	3301      	adds	r3, #1
     9d4:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     9d6:	4b01      	ldr	r3, [pc, #4]	; (9dc <i2c_master_write_packet_wait_no_stop+0x10>)
     9d8:	4798      	blx	r3
}
     9da:	bd08      	pop	{r3, pc}
     9dc:	000008b5 	.word	0x000008b5

000009e0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     9e0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     9e2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9e4:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     9e6:	4281      	cmp	r1, r0
     9e8:	d30c      	bcc.n	a04 <_sercom_get_sync_baud_val+0x24>
     9ea:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     9ec:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     9ee:	3301      	adds	r3, #1
     9f0:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     9f2:	4288      	cmp	r0, r1
     9f4:	d9fa      	bls.n	9ec <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     9f6:	3b01      	subs	r3, #1
     9f8:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9fa:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     9fc:	2bff      	cmp	r3, #255	; 0xff
     9fe:	d801      	bhi.n	a04 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     a00:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     a02:	2400      	movs	r4, #0
	}
}
     a04:	1c20      	adds	r0, r4, #0
     a06:	bd10      	pop	{r4, pc}

00000a08 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a08:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0a:	465f      	mov	r7, fp
     a0c:	4656      	mov	r6, sl
     a0e:	464d      	mov	r5, r9
     a10:	4644      	mov	r4, r8
     a12:	b4f0      	push	{r4, r5, r6, r7}
     a14:	b089      	sub	sp, #36	; 0x24
     a16:	1c1c      	adds	r4, r3, #0
     a18:	ab12      	add	r3, sp, #72	; 0x48
     a1a:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a1c:	1c06      	adds	r6, r0, #0
     a1e:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a20:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a22:	428e      	cmp	r6, r1
     a24:	d900      	bls.n	a28 <_sercom_get_async_baud_val+0x20>
     a26:	e0c7      	b.n	bb8 <_sercom_get_async_baud_val+0x1b0>
     a28:	1c25      	adds	r5, r4, #0
     a2a:	9207      	str	r2, [sp, #28]
     a2c:	1c0c      	adds	r4, r1, #0
     a2e:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a30:	2d00      	cmp	r5, #0
     a32:	d151      	bne.n	ad8 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a34:	1c18      	adds	r0, r3, #0
     a36:	2100      	movs	r1, #0
     a38:	2300      	movs	r3, #0
     a3a:	4d63      	ldr	r5, [pc, #396]	; (bc8 <_sercom_get_async_baud_val+0x1c0>)
     a3c:	47a8      	blx	r5
     a3e:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     a40:	1c26      	adds	r6, r4, #0
     a42:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a44:	2300      	movs	r3, #0
     a46:	2400      	movs	r4, #0
     a48:	9302      	str	r3, [sp, #8]
     a4a:	9403      	str	r4, [sp, #12]
     a4c:	2200      	movs	r2, #0
     a4e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     a50:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     a52:	2120      	movs	r1, #32
     a54:	468c      	mov	ip, r1
     a56:	391f      	subs	r1, #31
     a58:	9600      	str	r6, [sp, #0]
     a5a:	9701      	str	r7, [sp, #4]
     a5c:	2420      	movs	r4, #32
     a5e:	4264      	negs	r4, r4
     a60:	1904      	adds	r4, r0, r4
     a62:	d403      	bmi.n	a6c <_sercom_get_async_baud_val+0x64>
     a64:	1c0d      	adds	r5, r1, #0
     a66:	40a5      	lsls	r5, r4
     a68:	46a8      	mov	r8, r5
     a6a:	e004      	b.n	a76 <_sercom_get_async_baud_val+0x6e>
     a6c:	4664      	mov	r4, ip
     a6e:	1a24      	subs	r4, r4, r0
     a70:	1c0d      	adds	r5, r1, #0
     a72:	40e5      	lsrs	r5, r4
     a74:	46a8      	mov	r8, r5
     a76:	1c0c      	adds	r4, r1, #0
     a78:	4084      	lsls	r4, r0
     a7a:	46a1      	mov	r9, r4

		r = r << 1;
     a7c:	1c14      	adds	r4, r2, #0
     a7e:	1c1d      	adds	r5, r3, #0
     a80:	18a4      	adds	r4, r4, r2
     a82:	415d      	adcs	r5, r3
     a84:	1c22      	adds	r2, r4, #0
     a86:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     a88:	465e      	mov	r6, fp
     a8a:	4647      	mov	r7, r8
     a8c:	423e      	tst	r6, r7
     a8e:	d003      	beq.n	a98 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     a90:	1c0e      	adds	r6, r1, #0
     a92:	4326      	orrs	r6, r4
     a94:	1c32      	adds	r2, r6, #0
     a96:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     a98:	9c01      	ldr	r4, [sp, #4]
     a9a:	429c      	cmp	r4, r3
     a9c:	d810      	bhi.n	ac0 <_sercom_get_async_baud_val+0xb8>
     a9e:	d102      	bne.n	aa6 <_sercom_get_async_baud_val+0x9e>
     aa0:	9c00      	ldr	r4, [sp, #0]
     aa2:	4294      	cmp	r4, r2
     aa4:	d80c      	bhi.n	ac0 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     aa6:	9c00      	ldr	r4, [sp, #0]
     aa8:	9d01      	ldr	r5, [sp, #4]
     aaa:	1b12      	subs	r2, r2, r4
     aac:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     aae:	464d      	mov	r5, r9
     ab0:	9e02      	ldr	r6, [sp, #8]
     ab2:	9f03      	ldr	r7, [sp, #12]
     ab4:	4335      	orrs	r5, r6
     ab6:	1c3c      	adds	r4, r7, #0
     ab8:	4646      	mov	r6, r8
     aba:	4334      	orrs	r4, r6
     abc:	9502      	str	r5, [sp, #8]
     abe:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     ac0:	3801      	subs	r0, #1
     ac2:	d2cb      	bcs.n	a5c <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ac4:	2200      	movs	r2, #0
     ac6:	2301      	movs	r3, #1
     ac8:	9802      	ldr	r0, [sp, #8]
     aca:	9903      	ldr	r1, [sp, #12]
     acc:	1a12      	subs	r2, r2, r0
     ace:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     ad0:	0c11      	lsrs	r1, r2, #16
     ad2:	041b      	lsls	r3, r3, #16
     ad4:	4319      	orrs	r1, r3
     ad6:	e06c      	b.n	bb2 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     ad8:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ada:	2d01      	cmp	r5, #1
     adc:	d169      	bne.n	bb2 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     ade:	0f61      	lsrs	r1, r4, #29
     ae0:	1c0f      	adds	r7, r1, #0
     ae2:	00e1      	lsls	r1, r4, #3
     ae4:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     ae6:	1c18      	adds	r0, r3, #0
     ae8:	2100      	movs	r1, #0
     aea:	2300      	movs	r3, #0
     aec:	4c36      	ldr	r4, [pc, #216]	; (bc8 <_sercom_get_async_baud_val+0x1c0>)
     aee:	47a0      	blx	r4
     af0:	1c04      	adds	r4, r0, #0
     af2:	1c0d      	adds	r5, r1, #0
     af4:	2300      	movs	r3, #0
     af6:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     af8:	3320      	adds	r3, #32
     afa:	469b      	mov	fp, r3
     afc:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     afe:	4663      	mov	r3, ip
     b00:	9305      	str	r3, [sp, #20]
     b02:	46b9      	mov	r9, r7
     b04:	466b      	mov	r3, sp
     b06:	7d1b      	ldrb	r3, [r3, #20]
     b08:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     b0a:	2300      	movs	r3, #0
     b0c:	469c      	mov	ip, r3
     b0e:	2000      	movs	r0, #0
     b10:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     b12:	223f      	movs	r2, #63	; 0x3f
     b14:	9400      	str	r4, [sp, #0]
     b16:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     b18:	2320      	movs	r3, #32
     b1a:	425b      	negs	r3, r3
     b1c:	18d3      	adds	r3, r2, r3
     b1e:	d403      	bmi.n	b28 <_sercom_get_async_baud_val+0x120>
     b20:	1c34      	adds	r4, r6, #0
     b22:	409c      	lsls	r4, r3
     b24:	1c23      	adds	r3, r4, #0
     b26:	e004      	b.n	b32 <_sercom_get_async_baud_val+0x12a>
     b28:	465b      	mov	r3, fp
     b2a:	1a9b      	subs	r3, r3, r2
     b2c:	1c34      	adds	r4, r6, #0
     b2e:	40dc      	lsrs	r4, r3
     b30:	1c23      	adds	r3, r4, #0
     b32:	1c37      	adds	r7, r6, #0
     b34:	4097      	lsls	r7, r2

		r = r << 1;
     b36:	1c04      	adds	r4, r0, #0
     b38:	1c0d      	adds	r5, r1, #0
     b3a:	1824      	adds	r4, r4, r0
     b3c:	414d      	adcs	r5, r1
     b3e:	1c20      	adds	r0, r4, #0
     b40:	1c29      	adds	r1, r5, #0
     b42:	9002      	str	r0, [sp, #8]
     b44:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     b46:	4644      	mov	r4, r8
     b48:	403c      	ands	r4, r7
     b4a:	46a2      	mov	sl, r4
     b4c:	464c      	mov	r4, r9
     b4e:	4023      	ands	r3, r4
     b50:	4654      	mov	r4, sl
     b52:	4323      	orrs	r3, r4
     b54:	d005      	beq.n	b62 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     b56:	9b02      	ldr	r3, [sp, #8]
     b58:	9c03      	ldr	r4, [sp, #12]
     b5a:	1c1d      	adds	r5, r3, #0
     b5c:	4335      	orrs	r5, r6
     b5e:	1c28      	adds	r0, r5, #0
     b60:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     b62:	9b01      	ldr	r3, [sp, #4]
     b64:	428b      	cmp	r3, r1
     b66:	d80a      	bhi.n	b7e <_sercom_get_async_baud_val+0x176>
     b68:	d102      	bne.n	b70 <_sercom_get_async_baud_val+0x168>
     b6a:	9b00      	ldr	r3, [sp, #0]
     b6c:	4283      	cmp	r3, r0
     b6e:	d806      	bhi.n	b7e <_sercom_get_async_baud_val+0x176>
			r = r - d;
     b70:	9b00      	ldr	r3, [sp, #0]
     b72:	9c01      	ldr	r4, [sp, #4]
     b74:	1ac0      	subs	r0, r0, r3
     b76:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     b78:	4663      	mov	r3, ip
     b7a:	433b      	orrs	r3, r7
     b7c:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     b7e:	3a01      	subs	r2, #1
     b80:	d2ca      	bcs.n	b18 <_sercom_get_async_baud_val+0x110>
     b82:	9c00      	ldr	r4, [sp, #0]
     b84:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     b86:	4662      	mov	r2, ip
     b88:	9905      	ldr	r1, [sp, #20]
     b8a:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     b8c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     b8e:	4a0f      	ldr	r2, [pc, #60]	; (bcc <_sercom_get_async_baud_val+0x1c4>)
     b90:	4293      	cmp	r3, r2
     b92:	d908      	bls.n	ba6 <_sercom_get_async_baud_val+0x19e>
     b94:	9a06      	ldr	r2, [sp, #24]
     b96:	3201      	adds	r2, #1
     b98:	b2d2      	uxtb	r2, r2
     b9a:	9206      	str	r2, [sp, #24]
     b9c:	1c0a      	adds	r2, r1, #0
     b9e:	3201      	adds	r2, #1
     ba0:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     ba2:	2a08      	cmp	r2, #8
     ba4:	d1ae      	bne.n	b04 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ba6:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     ba8:	9a06      	ldr	r2, [sp, #24]
     baa:	2a08      	cmp	r2, #8
     bac:	d004      	beq.n	bb8 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     bae:	0351      	lsls	r1, r2, #13
     bb0:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     bb2:	9b07      	ldr	r3, [sp, #28]
     bb4:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     bb6:	2500      	movs	r5, #0
}
     bb8:	1c28      	adds	r0, r5, #0
     bba:	b009      	add	sp, #36	; 0x24
     bbc:	bc3c      	pop	{r2, r3, r4, r5}
     bbe:	4690      	mov	r8, r2
     bc0:	4699      	mov	r9, r3
     bc2:	46a2      	mov	sl, r4
     bc4:	46ab      	mov	fp, r5
     bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bc8:	000023a5 	.word	0x000023a5
     bcc:	00001fff 	.word	0x00001fff

00000bd0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bd0:	b510      	push	{r4, lr}
     bd2:	b082      	sub	sp, #8
     bd4:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     bd6:	4b0e      	ldr	r3, [pc, #56]	; (c10 <sercom_set_gclk_generator+0x40>)
     bd8:	781b      	ldrb	r3, [r3, #0]
     bda:	2b00      	cmp	r3, #0
     bdc:	d001      	beq.n	be2 <sercom_set_gclk_generator+0x12>
     bde:	2900      	cmp	r1, #0
     be0:	d00d      	beq.n	bfe <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     be2:	a901      	add	r1, sp, #4
     be4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     be6:	2011      	movs	r0, #17
     be8:	4b0a      	ldr	r3, [pc, #40]	; (c14 <sercom_set_gclk_generator+0x44>)
     bea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     bec:	2011      	movs	r0, #17
     bee:	4b0a      	ldr	r3, [pc, #40]	; (c18 <sercom_set_gclk_generator+0x48>)
     bf0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     bf2:	4b07      	ldr	r3, [pc, #28]	; (c10 <sercom_set_gclk_generator+0x40>)
     bf4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     bf6:	2201      	movs	r2, #1
     bf8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     bfa:	2000      	movs	r0, #0
     bfc:	e006      	b.n	c0c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     bfe:	4b04      	ldr	r3, [pc, #16]	; (c10 <sercom_set_gclk_generator+0x40>)
     c00:	785b      	ldrb	r3, [r3, #1]
     c02:	4283      	cmp	r3, r0
     c04:	d001      	beq.n	c0a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c06:	201d      	movs	r0, #29
     c08:	e000      	b.n	c0c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     c0a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c0c:	b002      	add	sp, #8
     c0e:	bd10      	pop	{r4, pc}
     c10:	2000009c 	.word	0x2000009c
     c14:	00001e19 	.word	0x00001e19
     c18:	00001db1 	.word	0x00001db1

00000c1c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c1c:	4b40      	ldr	r3, [pc, #256]	; (d20 <_sercom_get_default_pad+0x104>)
     c1e:	4298      	cmp	r0, r3
     c20:	d034      	beq.n	c8c <_sercom_get_default_pad+0x70>
     c22:	d807      	bhi.n	c34 <_sercom_get_default_pad+0x18>
     c24:	2384      	movs	r3, #132	; 0x84
     c26:	05db      	lsls	r3, r3, #23
     c28:	4298      	cmp	r0, r3
     c2a:	d00d      	beq.n	c48 <_sercom_get_default_pad+0x2c>
     c2c:	4b3d      	ldr	r3, [pc, #244]	; (d24 <_sercom_get_default_pad+0x108>)
     c2e:	4298      	cmp	r0, r3
     c30:	d01b      	beq.n	c6a <_sercom_get_default_pad+0x4e>
     c32:	e067      	b.n	d04 <_sercom_get_default_pad+0xe8>
     c34:	4b3c      	ldr	r3, [pc, #240]	; (d28 <_sercom_get_default_pad+0x10c>)
     c36:	4298      	cmp	r0, r3
     c38:	d04a      	beq.n	cd0 <_sercom_get_default_pad+0xb4>
     c3a:	4b3c      	ldr	r3, [pc, #240]	; (d2c <_sercom_get_default_pad+0x110>)
     c3c:	4298      	cmp	r0, r3
     c3e:	d050      	beq.n	ce2 <_sercom_get_default_pad+0xc6>
     c40:	4b3b      	ldr	r3, [pc, #236]	; (d30 <_sercom_get_default_pad+0x114>)
     c42:	4298      	cmp	r0, r3
     c44:	d15e      	bne.n	d04 <_sercom_get_default_pad+0xe8>
     c46:	e032      	b.n	cae <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c48:	2901      	cmp	r1, #1
     c4a:	d006      	beq.n	c5a <_sercom_get_default_pad+0x3e>
     c4c:	2900      	cmp	r1, #0
     c4e:	d05b      	beq.n	d08 <_sercom_get_default_pad+0xec>
     c50:	2902      	cmp	r1, #2
     c52:	d006      	beq.n	c62 <_sercom_get_default_pad+0x46>
     c54:	2903      	cmp	r1, #3
     c56:	d006      	beq.n	c66 <_sercom_get_default_pad+0x4a>
     c58:	e001      	b.n	c5e <_sercom_get_default_pad+0x42>
     c5a:	4836      	ldr	r0, [pc, #216]	; (d34 <_sercom_get_default_pad+0x118>)
     c5c:	e05f      	b.n	d1e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     c5e:	2000      	movs	r0, #0
     c60:	e05d      	b.n	d1e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c62:	4835      	ldr	r0, [pc, #212]	; (d38 <_sercom_get_default_pad+0x11c>)
     c64:	e05b      	b.n	d1e <_sercom_get_default_pad+0x102>
     c66:	4835      	ldr	r0, [pc, #212]	; (d3c <_sercom_get_default_pad+0x120>)
     c68:	e059      	b.n	d1e <_sercom_get_default_pad+0x102>
     c6a:	2901      	cmp	r1, #1
     c6c:	d006      	beq.n	c7c <_sercom_get_default_pad+0x60>
     c6e:	2900      	cmp	r1, #0
     c70:	d04c      	beq.n	d0c <_sercom_get_default_pad+0xf0>
     c72:	2902      	cmp	r1, #2
     c74:	d006      	beq.n	c84 <_sercom_get_default_pad+0x68>
     c76:	2903      	cmp	r1, #3
     c78:	d006      	beq.n	c88 <_sercom_get_default_pad+0x6c>
     c7a:	e001      	b.n	c80 <_sercom_get_default_pad+0x64>
     c7c:	4830      	ldr	r0, [pc, #192]	; (d40 <_sercom_get_default_pad+0x124>)
     c7e:	e04e      	b.n	d1e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     c80:	2000      	movs	r0, #0
     c82:	e04c      	b.n	d1e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c84:	482f      	ldr	r0, [pc, #188]	; (d44 <_sercom_get_default_pad+0x128>)
     c86:	e04a      	b.n	d1e <_sercom_get_default_pad+0x102>
     c88:	482f      	ldr	r0, [pc, #188]	; (d48 <_sercom_get_default_pad+0x12c>)
     c8a:	e048      	b.n	d1e <_sercom_get_default_pad+0x102>
     c8c:	2901      	cmp	r1, #1
     c8e:	d006      	beq.n	c9e <_sercom_get_default_pad+0x82>
     c90:	2900      	cmp	r1, #0
     c92:	d03d      	beq.n	d10 <_sercom_get_default_pad+0xf4>
     c94:	2902      	cmp	r1, #2
     c96:	d006      	beq.n	ca6 <_sercom_get_default_pad+0x8a>
     c98:	2903      	cmp	r1, #3
     c9a:	d006      	beq.n	caa <_sercom_get_default_pad+0x8e>
     c9c:	e001      	b.n	ca2 <_sercom_get_default_pad+0x86>
     c9e:	482b      	ldr	r0, [pc, #172]	; (d4c <_sercom_get_default_pad+0x130>)
     ca0:	e03d      	b.n	d1e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     ca2:	2000      	movs	r0, #0
     ca4:	e03b      	b.n	d1e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ca6:	482a      	ldr	r0, [pc, #168]	; (d50 <_sercom_get_default_pad+0x134>)
     ca8:	e039      	b.n	d1e <_sercom_get_default_pad+0x102>
     caa:	482a      	ldr	r0, [pc, #168]	; (d54 <_sercom_get_default_pad+0x138>)
     cac:	e037      	b.n	d1e <_sercom_get_default_pad+0x102>
     cae:	2901      	cmp	r1, #1
     cb0:	d006      	beq.n	cc0 <_sercom_get_default_pad+0xa4>
     cb2:	2900      	cmp	r1, #0
     cb4:	d02e      	beq.n	d14 <_sercom_get_default_pad+0xf8>
     cb6:	2902      	cmp	r1, #2
     cb8:	d006      	beq.n	cc8 <_sercom_get_default_pad+0xac>
     cba:	2903      	cmp	r1, #3
     cbc:	d006      	beq.n	ccc <_sercom_get_default_pad+0xb0>
     cbe:	e001      	b.n	cc4 <_sercom_get_default_pad+0xa8>
     cc0:	4825      	ldr	r0, [pc, #148]	; (d58 <_sercom_get_default_pad+0x13c>)
     cc2:	e02c      	b.n	d1e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     cc4:	2000      	movs	r0, #0
     cc6:	e02a      	b.n	d1e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cc8:	4824      	ldr	r0, [pc, #144]	; (d5c <_sercom_get_default_pad+0x140>)
     cca:	e028      	b.n	d1e <_sercom_get_default_pad+0x102>
     ccc:	4824      	ldr	r0, [pc, #144]	; (d60 <_sercom_get_default_pad+0x144>)
     cce:	e026      	b.n	d1e <_sercom_get_default_pad+0x102>
     cd0:	2902      	cmp	r1, #2
     cd2:	d002      	beq.n	cda <_sercom_get_default_pad+0xbe>
     cd4:	2903      	cmp	r1, #3
     cd6:	d002      	beq.n	cde <_sercom_get_default_pad+0xc2>
     cd8:	e01e      	b.n	d18 <_sercom_get_default_pad+0xfc>
     cda:	4822      	ldr	r0, [pc, #136]	; (d64 <_sercom_get_default_pad+0x148>)
     cdc:	e01f      	b.n	d1e <_sercom_get_default_pad+0x102>
     cde:	4822      	ldr	r0, [pc, #136]	; (d68 <_sercom_get_default_pad+0x14c>)
     ce0:	e01d      	b.n	d1e <_sercom_get_default_pad+0x102>
     ce2:	2901      	cmp	r1, #1
     ce4:	d006      	beq.n	cf4 <_sercom_get_default_pad+0xd8>
     ce6:	2900      	cmp	r1, #0
     ce8:	d018      	beq.n	d1c <_sercom_get_default_pad+0x100>
     cea:	2902      	cmp	r1, #2
     cec:	d006      	beq.n	cfc <_sercom_get_default_pad+0xe0>
     cee:	2903      	cmp	r1, #3
     cf0:	d006      	beq.n	d00 <_sercom_get_default_pad+0xe4>
     cf2:	e001      	b.n	cf8 <_sercom_get_default_pad+0xdc>
     cf4:	481d      	ldr	r0, [pc, #116]	; (d6c <_sercom_get_default_pad+0x150>)
     cf6:	e012      	b.n	d1e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     cf8:	2000      	movs	r0, #0
     cfa:	e010      	b.n	d1e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cfc:	481c      	ldr	r0, [pc, #112]	; (d70 <_sercom_get_default_pad+0x154>)
     cfe:	e00e      	b.n	d1e <_sercom_get_default_pad+0x102>
     d00:	481c      	ldr	r0, [pc, #112]	; (d74 <_sercom_get_default_pad+0x158>)
     d02:	e00c      	b.n	d1e <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     d04:	2000      	movs	r0, #0
     d06:	e00a      	b.n	d1e <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d08:	481b      	ldr	r0, [pc, #108]	; (d78 <_sercom_get_default_pad+0x15c>)
     d0a:	e008      	b.n	d1e <_sercom_get_default_pad+0x102>
     d0c:	2003      	movs	r0, #3
     d0e:	e006      	b.n	d1e <_sercom_get_default_pad+0x102>
     d10:	481a      	ldr	r0, [pc, #104]	; (d7c <_sercom_get_default_pad+0x160>)
     d12:	e004      	b.n	d1e <_sercom_get_default_pad+0x102>
     d14:	481a      	ldr	r0, [pc, #104]	; (d80 <_sercom_get_default_pad+0x164>)
     d16:	e002      	b.n	d1e <_sercom_get_default_pad+0x102>
     d18:	2000      	movs	r0, #0
     d1a:	e000      	b.n	d1e <_sercom_get_default_pad+0x102>
     d1c:	4819      	ldr	r0, [pc, #100]	; (d84 <_sercom_get_default_pad+0x168>)
	}

	Assert(false);
	return 0;
}
     d1e:	4770      	bx	lr
     d20:	42000800 	.word	0x42000800
     d24:	42000400 	.word	0x42000400
     d28:	42001000 	.word	0x42001000
     d2c:	43000400 	.word	0x43000400
     d30:	42000c00 	.word	0x42000c00
     d34:	00050003 	.word	0x00050003
     d38:	00060003 	.word	0x00060003
     d3c:	00070003 	.word	0x00070003
     d40:	00010003 	.word	0x00010003
     d44:	001e0003 	.word	0x001e0003
     d48:	001f0003 	.word	0x001f0003
     d4c:	00090003 	.word	0x00090003
     d50:	000a0003 	.word	0x000a0003
     d54:	000b0003 	.word	0x000b0003
     d58:	00110003 	.word	0x00110003
     d5c:	00120003 	.word	0x00120003
     d60:	00130003 	.word	0x00130003
     d64:	000e0003 	.word	0x000e0003
     d68:	000f0003 	.word	0x000f0003
     d6c:	00170003 	.word	0x00170003
     d70:	00180003 	.word	0x00180003
     d74:	00190003 	.word	0x00190003
     d78:	00040003 	.word	0x00040003
     d7c:	00080003 	.word	0x00080003
     d80:	00100003 	.word	0x00100003
     d84:	00160003 	.word	0x00160003

00000d88 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d88:	b530      	push	{r4, r5, lr}
     d8a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d8c:	4b0c      	ldr	r3, [pc, #48]	; (dc0 <_sercom_get_sercom_inst_index+0x38>)
     d8e:	466a      	mov	r2, sp
     d90:	cb32      	ldmia	r3!, {r1, r4, r5}
     d92:	c232      	stmia	r2!, {r1, r4, r5}
     d94:	cb32      	ldmia	r3!, {r1, r4, r5}
     d96:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d98:	9b00      	ldr	r3, [sp, #0]
     d9a:	4283      	cmp	r3, r0
     d9c:	d006      	beq.n	dac <_sercom_get_sercom_inst_index+0x24>
     d9e:	2301      	movs	r3, #1
     da0:	009a      	lsls	r2, r3, #2
     da2:	4669      	mov	r1, sp
     da4:	5852      	ldr	r2, [r2, r1]
     da6:	4282      	cmp	r2, r0
     da8:	d103      	bne.n	db2 <_sercom_get_sercom_inst_index+0x2a>
     daa:	e000      	b.n	dae <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dac:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     dae:	b2d8      	uxtb	r0, r3
     db0:	e003      	b.n	dba <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     db2:	3301      	adds	r3, #1
     db4:	2b06      	cmp	r3, #6
     db6:	d1f3      	bne.n	da0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     db8:	2000      	movs	r0, #0
}
     dba:	b007      	add	sp, #28
     dbc:	bd30      	pop	{r4, r5, pc}
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	00002c5c 	.word	0x00002c5c

00000dc4 <configure_sleepmode>:
 * \param[in] sleep_mode  Sleep mode to configure for the next sleep operation
 */
static inline void system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
	PM->SLEEPCFG.reg = sleep_mode;
     dc4:	2204      	movs	r2, #4
     dc6:	2380      	movs	r3, #128	; 0x80
     dc8:	05db      	lsls	r3, r3, #23
     dca:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
     dcc:	1c1a      	adds	r2, r3, #0
     dce:	7853      	ldrb	r3, [r2, #1]
     dd0:	2b04      	cmp	r3, #4
     dd2:	d1fc      	bne.n	dce <configure_sleepmode+0xa>
	uint8_t ucIndex;
	struct system_standby_config stby_config;
	system_standby_get_config_defaults(&stby_config);
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
	// Force buck mode on the internal regulator
	SUPC->VREG.bit.SEL = 1;
     dd4:	4b10      	ldr	r3, [pc, #64]	; (e18 <configure_sleepmode+0x54>)
     dd6:	699a      	ldr	r2, [r3, #24]
     dd8:	210c      	movs	r1, #12
     dda:	438a      	bics	r2, r1
     ddc:	3908      	subs	r1, #8
     dde:	430a      	orrs	r2, r1
     de0:	619a      	str	r2, [r3, #24]
	SUPC->VREG.bit.RUNSTDBY = 1;
     de2:	6999      	ldr	r1, [r3, #24]
     de4:	2240      	movs	r2, #64	; 0x40
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
	SUPC->VREF.bit.ONDEMAND = 1;
     dea:	69d9      	ldr	r1, [r3, #28]
     dec:	2280      	movs	r2, #128	; 0x80
     dee:	430a      	orrs	r2, r1
     df0:	61da      	str	r2, [r3, #28]
	// Enable dynamic powergating for domain 0 and 1
	PM->STDBYCFG.bit.DPGPD0 = 1;
     df2:	2380      	movs	r3, #128	; 0x80
     df4:	05db      	lsls	r3, r3, #23
     df6:	8919      	ldrh	r1, [r3, #8]
     df8:	2210      	movs	r2, #16
     dfa:	430a      	orrs	r2, r1
     dfc:	811a      	strh	r2, [r3, #8]
	PM->STDBYCFG.bit.DPGPD1 = 1;
     dfe:	8919      	ldrh	r1, [r3, #8]
     e00:	2220      	movs	r2, #32
     e02:	430a      	orrs	r2, r1
     e04:	811a      	strh	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e06:	4905      	ldr	r1, [pc, #20]	; (e1c <configure_sleepmode+0x58>)
     e08:	684b      	ldr	r3, [r1, #4]
     e0a:	221e      	movs	r2, #30
     e0c:	4393      	bics	r3, r2
     e0e:	3a1c      	subs	r2, #28
     e10:	4313      	orrs	r3, r2
     e12:	604b      	str	r3, [r1, #4]
	
	system_flash_set_waitstates(1);
}
     e14:	4770      	bx	lr
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	40001400 	.word	0x40001400
     e1c:	41004000 	.word	0x41004000

00000e20 <configure_i2c>:

void configure_i2c(void)
{
     e20:	b510      	push	{r4, lr}
     e22:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     e24:	aa01      	add	r2, sp, #4
     e26:	2364      	movs	r3, #100	; 0x64
     e28:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     e2a:	4b1d      	ldr	r3, [pc, #116]	; (ea0 <configure_i2c+0x80>)
     e2c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     e2e:	2300      	movs	r3, #0
     e30:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     e32:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     e34:	2180      	movs	r1, #128	; 0x80
     e36:	0389      	lsls	r1, r1, #14
     e38:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
     e3a:	2101      	movs	r1, #1
     e3c:	4249      	negs	r1, r1
     e3e:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
     e40:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     e42:	3125      	adds	r1, #37	; 0x25
     e44:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     e46:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     e48:	3108      	adds	r1, #8
     e4a:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     e4c:	3101      	adds	r1, #1
     e4e:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     e50:	3101      	adds	r1, #1
     e52:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     e54:	33d7      	adds	r3, #215	; 0xd7
     e56:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
	config_i2c_master.run_in_standby = true;
     e58:	3bd6      	subs	r3, #214	; 0xd6
     e5a:	7613      	strb	r3, [r2, #24]
	config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_100KHZ;
	config_i2c_master.pinmux_pad0 =  PINMUX_PA22C_SERCOM3_PAD0;
     e5c:	4b11      	ldr	r3, [pc, #68]	; (ea4 <configure_i2c+0x84>)
     e5e:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 =  PINMUX_PA23C_SERCOM3_PAD1;
     e60:	4b11      	ldr	r3, [pc, #68]	; (ea8 <configure_i2c+0x88>)
     e62:	6213      	str	r3, [r2, #32]
	
	/* Initialize and enable device with config */
	i2c_master_init(&i2c_master_instance, SERCOM3, &config_i2c_master);
     e64:	4c11      	ldr	r4, [pc, #68]	; (eac <configure_i2c+0x8c>)
     e66:	1c20      	adds	r0, r4, #0
     e68:	4911      	ldr	r1, [pc, #68]	; (eb0 <configure_i2c+0x90>)
     e6a:	4b12      	ldr	r3, [pc, #72]	; (eb4 <configure_i2c+0x94>)
     e6c:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e6e:	6822      	ldr	r2, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     e70:	2107      	movs	r1, #7
     e72:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     e74:	4219      	tst	r1, r3
     e76:	d1fc      	bne.n	e72 <configure_i2c+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     e78:	6811      	ldr	r1, [r2, #0]
     e7a:	2302      	movs	r3, #2
     e7c:	430b      	orrs	r3, r1
     e7e:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e80:	4b0a      	ldr	r3, [pc, #40]	; (eac <configure_i2c+0x8c>)
     e82:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     e84:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e86:	2010      	movs	r0, #16
     e88:	e005      	b.n	e96 <configure_i2c+0x76>
		timeout_counter++;
     e8a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e8c:	42a3      	cmp	r3, r4
     e8e:	d302      	bcc.n	e96 <configure_i2c+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     e90:	2310      	movs	r3, #16
     e92:	8353      	strh	r3, [r2, #26]
     e94:	e002      	b.n	e9c <configure_i2c+0x7c>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e96:	8b51      	ldrh	r1, [r2, #26]
     e98:	4201      	tst	r1, r0
     e9a:	d0f6      	beq.n	e8a <configure_i2c+0x6a>
	i2c_master_enable(&i2c_master_instance);
	
	
}
     e9c:	b00e      	add	sp, #56	; 0x38
     e9e:	bd10      	pop	{r4, pc}
     ea0:	00000d48 	.word	0x00000d48
     ea4:	00160002 	.word	0x00160002
     ea8:	00170002 	.word	0x00170002
     eac:	20000118 	.word	0x20000118
     eb0:	42000c00 	.word	0x42000c00
     eb4:	000004c5 	.word	0x000004c5

00000eb8 <configure_mag_sw_int>:


void configure_mag_sw_int(void (*callback)(void))
{
     eb8:	b530      	push	{r4, r5, lr}
     eba:	b083      	sub	sp, #12
     ebc:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ebe:	a901      	add	r1, sp, #4
     ec0:	2500      	movs	r5, #0
     ec2:	704d      	strb	r5, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     ec4:	70cd      	strb	r5, [r1, #3]

	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = PINMUX_PA17A_EIC_EXTINT1;
     ec6:	700d      	strb	r5, [r1, #0]
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ec8:	708d      	strb	r5, [r1, #2]
	
	system_pinmux_pin_set_config(PIN_PA17, &config_pinmux);
     eca:	2011      	movs	r0, #17
     ecc:	4b1f      	ldr	r3, [pc, #124]	; (f4c <configure_mag_sw_int+0x94>)
     ece:	4798      	blx	r3
	uint32_t pin_index = (gpio_pin % 32);

	if (mode == SYSTEM_PINMUX_PIN_SAMPLE_ONDEMAND) {
		port->CTRL.reg |= (1 << pin_index);
	} else {
		port->CTRL.reg &= ~(1 << pin_index);
     ed0:	4a1f      	ldr	r2, [pc, #124]	; (f50 <configure_mag_sw_int+0x98>)
     ed2:	6a51      	ldr	r1, [r2, #36]	; 0x24
     ed4:	4b1f      	ldr	r3, [pc, #124]	; (f54 <configure_mag_sw_int+0x9c>)
     ed6:	400b      	ands	r3, r1
     ed8:	6253      	str	r3, [r2, #36]	; 0x24
	system_pinmux_pin_set_input_sample_mode(PIN_PA17, SYSTEM_PINMUX_PIN_SAMPLE_CONTINUOUS);
	
	// Disable the EIC so we can write regs
	REG_EIC_CTRLA = 0;
     eda:	4b1f      	ldr	r3, [pc, #124]	; (f58 <configure_mag_sw_int+0xa0>)
     edc:	701d      	strb	r5, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x01);
     ede:	491f      	ldr	r1, [pc, #124]	; (f5c <configure_mag_sw_int+0xa4>)
     ee0:	2201      	movs	r2, #1
     ee2:	680b      	ldr	r3, [r1, #0]
     ee4:	421a      	tst	r2, r3
     ee6:	d1fc      	bne.n	ee2 <configure_mag_sw_int+0x2a>
	
	// Set up clock source for ulp32k
	//REG_EIC_CTRLA |= 0x10;
	
	// Enable interrupts on EXTINT[1]
	REG_EIC_INTENSET |= 0x02;
     ee8:	4b1d      	ldr	r3, [pc, #116]	; (f60 <configure_mag_sw_int+0xa8>)
     eea:	681a      	ldr	r2, [r3, #0]
     eec:	2102      	movs	r1, #2
     eee:	430a      	orrs	r2, r1
     ef0:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_INTENSET & 0x02)) return;
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	4219      	tst	r1, r3
     ef6:	d027      	beq.n	f48 <configure_mag_sw_int+0x90>
	
	// Turn filtering off and set detection for falling edge for EXTINT[1]
	REG_EIC_CONFIG0 &= ~0x80;
     ef8:	4b1a      	ldr	r3, [pc, #104]	; (f64 <configure_mag_sw_int+0xac>)
     efa:	681a      	ldr	r2, [r3, #0]
     efc:	317e      	adds	r1, #126	; 0x7e
     efe:	438a      	bics	r2, r1
     f00:	601a      	str	r2, [r3, #0]
	REG_EIC_CONFIG0 |= 0x20;
     f02:	681a      	ldr	r2, [r3, #0]
     f04:	3960      	subs	r1, #96	; 0x60
     f06:	430a      	orrs	r2, r1
     f08:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_CONFIG0 & 0x20) && (REG_EIC_CONFIG0 & 0x80)) return;
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	4219      	tst	r1, r3
     f0e:	d103      	bne.n	f18 <configure_mag_sw_int+0x60>
     f10:	4b14      	ldr	r3, [pc, #80]	; (f64 <configure_mag_sw_int+0xac>)
     f12:	681b      	ldr	r3, [r3, #0]
     f14:	061b      	lsls	r3, r3, #24
     f16:	d417      	bmi.n	f48 <configure_mag_sw_int+0x90>
	
	// Enable asynchronous interrupts for EXTINT[1]
	REG_EIC_ASYNCH |= 0x00000002;
     f18:	4b13      	ldr	r3, [pc, #76]	; (f68 <configure_mag_sw_int+0xb0>)
     f1a:	681a      	ldr	r2, [r3, #0]
     f1c:	2102      	movs	r1, #2
     f1e:	430a      	orrs	r2, r1
     f20:	601a      	str	r2, [r3, #0]
	if(!(REG_EIC_ASYNCH & 0x02)) return;
     f22:	681b      	ldr	r3, [r3, #0]
     f24:	4219      	tst	r1, r3
     f26:	d00f      	beq.n	f48 <configure_mag_sw_int+0x90>
	
	// Enable the EIC
	REG_EIC_CTRLA = 0x02;
     f28:	2202      	movs	r2, #2
     f2a:	4b0b      	ldr	r3, [pc, #44]	; (f58 <configure_mag_sw_int+0xa0>)
     f2c:	701a      	strb	r2, [r3, #0]
	// Wait for the sync to complete
	while(REG_EIC_SYNCBUSY & 0x02);
     f2e:	490b      	ldr	r1, [pc, #44]	; (f5c <configure_mag_sw_int+0xa4>)
     f30:	680b      	ldr	r3, [r1, #0]
     f32:	421a      	tst	r2, r3
     f34:	d1fc      	bne.n	f30 <configure_mag_sw_int+0x78>
	if(!(REG_EIC_CTRLA & 0x02)) return;
     f36:	4b08      	ldr	r3, [pc, #32]	; (f58 <configure_mag_sw_int+0xa0>)
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	079b      	lsls	r3, r3, #30
     f3c:	d504      	bpl.n	f48 <configure_mag_sw_int+0x90>
	
	if(!(extint_register_callback(callback, 1, EXTINT_CALLBACK_TYPE_DETECT) == STATUS_OK)) return;
     f3e:	1c20      	adds	r0, r4, #0
     f40:	2101      	movs	r1, #1
     f42:	2200      	movs	r2, #0
     f44:	4b09      	ldr	r3, [pc, #36]	; (f6c <configure_mag_sw_int+0xb4>)
     f46:	4798      	blx	r3

     f48:	b003      	add	sp, #12
     f4a:	bd30      	pop	{r4, r5, pc}
     f4c:	00001f15 	.word	0x00001f15
     f50:	40002800 	.word	0x40002800
     f54:	fffdffff 	.word	0xfffdffff
     f58:	40002400 	.word	0x40002400
     f5c:	40002404 	.word	0x40002404
     f60:	40002410 	.word	0x40002410
     f64:	4000241c 	.word	0x4000241c
     f68:	40002418 	.word	0x40002418
     f6c:	00000381 	.word	0x00000381

00000f70 <configure_SP1ML>:

#include "HAL.h"
#include <asf.h>

void configure_SP1ML(void)
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f74:	ac01      	add	r4, sp, #4
     f76:	2380      	movs	r3, #128	; 0x80
     f78:	7023      	strb	r3, [r4, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     f7a:	2300      	movs	r3, #0
     f7c:	70e3      	strb	r3, [r4, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     f7e:	3301      	adds	r3, #1
     f80:	7063      	strb	r3, [r4, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
     f82:	2702      	movs	r7, #2
     f84:	70a7      	strb	r7, [r4, #2]
// 	
	// Enable
 	system_pinmux_pin_set_config(SP1ML_EN_PIN, &config_pinmux);
     f86:	201b      	movs	r0, #27
     f88:	1c21      	adds	r1, r4, #0
     f8a:	4e33      	ldr	r6, [pc, #204]	; (1058 <configure_SP1ML+0xe8>)
     f8c:	47b0      	blx	r6
     f8e:	4d33      	ldr	r5, [pc, #204]	; (105c <configure_SP1ML+0xec>)
     f90:	2380      	movs	r3, #128	; 0x80
     f92:	051b      	lsls	r3, r3, #20
     f94:	616b      	str	r3, [r5, #20]
 	port_pin_set_output_level(SP1ML_EN_PIN, false);
	
	// Mode 0
	system_pinmux_pin_set_config(SP1ML_MODE_PIN, &config_pinmux);
     f96:	2001      	movs	r0, #1
     f98:	1c21      	adds	r1, r4, #0
     f9a:	47b0      	blx	r6
     f9c:	616f      	str	r7, [r5, #20]
	port_pin_set_output_level(SP1ML_MODE_PIN, false);

	// SHDN
	system_pinmux_pin_set_config(SP1ML_SHDN_PIN, &config_pinmux);
     f9e:	2002      	movs	r0, #2
     fa0:	1c21      	adds	r1, r4, #0
     fa2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     fa4:	2304      	movs	r3, #4
     fa6:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(SP1ML_SHDN_PIN, true);
	
	// reset
	system_pinmux_pin_set_config(SP1ML_RESET_PIN, &config_pinmux);
     fa8:	2003      	movs	r0, #3
     faa:	1c21      	adds	r1, r4, #0
     fac:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
     fae:	2308      	movs	r3, #8
     fb0:	616b      	str	r3, [r5, #20]
     fb2:	4b2b      	ldr	r3, [pc, #172]	; (1060 <configure_SP1ML+0xf0>)
     fb4:	3b01      	subs	r3, #1
	port_pin_set_output_level(SP1ML_RESET_PIN, false);
	
	for(int i = 0; i < 65535; i++);
     fb6:	2b00      	cmp	r3, #0
     fb8:	d1fc      	bne.n	fb4 <configure_SP1ML+0x44>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     fba:	2208      	movs	r2, #8
     fbc:	4b27      	ldr	r3, [pc, #156]	; (105c <configure_SP1ML+0xec>)
     fbe:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     fc0:	4b28      	ldr	r3, [pc, #160]	; (1064 <configure_SP1ML+0xf4>)
     fc2:	2280      	movs	r2, #128	; 0x80
     fc4:	05d2      	lsls	r2, r2, #23
     fc6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     fc8:	2200      	movs	r2, #0
     fca:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     fcc:	21ff      	movs	r1, #255	; 0xff
     fce:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     fd0:	2100      	movs	r1, #0
     fd2:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     fd4:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     fd6:	2001      	movs	r0, #1
     fd8:	2424      	movs	r4, #36	; 0x24
     fda:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
     fdc:	3401      	adds	r4, #1
     fde:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
     fe0:	3025      	adds	r0, #37	; 0x25
     fe2:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
     fe4:	3001      	adds	r0, #1
     fe6:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
     fe8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     fea:	3005      	adds	r0, #5
     fec:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     fee:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     ff0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     ff2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     ff4:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     ff6:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     ff8:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
     ffa:	2213      	movs	r2, #19
     ffc:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     ffe:	7759      	strb	r1, [r3, #29]
	
	port_pin_set_output_level(SP1ML_RESET_PIN, true);

	usart_get_config_defaults(&config_usart);
	config_usart.generator_source = GCLK_GENERATOR_2;
    1000:	2102      	movs	r1, #2
    1002:	321a      	adds	r2, #26
    1004:	5499      	strb	r1, [r3, r2]
	config_usart.run_in_standby = false;
	config_usart.baudrate = 115200;
    1006:	22e1      	movs	r2, #225	; 0xe1
    1008:	0252      	lsls	r2, r2, #9
    100a:	621a      	str	r2, [r3, #32]
	config_usart.parity = USART_PARITY_NONE;
	config_usart.stopbits = USART_STOPBITS_1;
	config_usart.data_order = USART_DATAORDER_LSB;
	config_usart.character_size = USART_CHARACTER_SIZE_8BIT;
	// RXPO PAD03 TXPO PAD02
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    100c:	22c4      	movs	r2, #196	; 0xc4
    100e:	0392      	lsls	r2, r2, #14
    1010:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1012:	2201      	movs	r2, #1
    1014:	4252      	negs	r2, r2
    1016:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1018:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA06D_SERCOM0_PAD2;
    101a:	4a13      	ldr	r2, [pc, #76]	; (1068 <configure_SP1ML+0xf8>)
    101c:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA07D_SERCOM0_PAD3;
    101e:	4a13      	ldr	r2, [pc, #76]	; (106c <configure_SP1ML+0xfc>)
    1020:	63da      	str	r2, [r3, #60]	; 0x3c
	//REG_SERCOM0_USART_DBGCTRL |= 0x01;
	while ((status = usart_init(&usart_instance, SERCOM0, &config_usart)) != STATUS_OK);
    1022:	4d13      	ldr	r5, [pc, #76]	; (1070 <configure_SP1ML+0x100>)
    1024:	1c1c      	adds	r4, r3, #0
    1026:	4e13      	ldr	r6, [pc, #76]	; (1074 <configure_SP1ML+0x104>)
    1028:	1c28      	adds	r0, r5, #0
    102a:	2184      	movs	r1, #132	; 0x84
    102c:	05c9      	lsls	r1, r1, #23
    102e:	1c22      	adds	r2, r4, #0
    1030:	47b0      	blx	r6
    1032:	4b11      	ldr	r3, [pc, #68]	; (1078 <configure_SP1ML+0x108>)
    1034:	7018      	strb	r0, [r3, #0]
    1036:	2800      	cmp	r0, #0
    1038:	d1f6      	bne.n	1028 <configure_SP1ML+0xb8>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    103a:	4b0d      	ldr	r3, [pc, #52]	; (1070 <configure_SP1ML+0x100>)
    103c:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    103e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1040:	2b00      	cmp	r3, #0
    1042:	d1fc      	bne.n	103e <configure_SP1ML+0xce>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1044:	6811      	ldr	r1, [r2, #0]
    1046:	3302      	adds	r3, #2
    1048:	430b      	orrs	r3, r1
    104a:	6013      	str	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    104c:	2204      	movs	r2, #4
    104e:	4b03      	ldr	r3, [pc, #12]	; (105c <configure_SP1ML+0xec>)
    1050:	615a      	str	r2, [r3, #20]
	usart_enable(&usart_instance);
	// Set the shutdown pin low so we save power (even though the module is off)
	port_pin_set_output_level(SP1ML_SHDN_PIN, false);
	
}
    1052:	b003      	add	sp, #12
    1054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	00001f15 	.word	0x00001f15
    105c:	40002800 	.word	0x40002800
    1060:	0000ffff 	.word	0x0000ffff
    1064:	200000d8 	.word	0x200000d8
    1068:	00060003 	.word	0x00060003
    106c:	00070003 	.word	0x00070003
    1070:	200000cc 	.word	0x200000cc
    1074:	00001361 	.word	0x00001361
    1078:	20000124 	.word	0x20000124

0000107c <SP1ML_enter_cmd_mode>:
		//for(int i = 0; i < 4000000; i++);
	}
}

void SP1ML_enter_cmd_mode(void)
{
    107c:	b508      	push	{r3, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    107e:	2204      	movs	r2, #4
    1080:	4b04      	ldr	r3, [pc, #16]	; (1094 <SP1ML_enter_cmd_mode+0x18>)
    1082:	619a      	str	r2, [r3, #24]
	// We don't fiddle with the enable or shutdown after mode switch, we assume that is done in the calling functions
	
	// Wake up the radio
	port_pin_set_output_level(SP1ML_SHDN_PIN, true);
	
	status = usart_write_buffer_wait(&usart_instance, "+++", 3);
    1084:	4804      	ldr	r0, [pc, #16]	; (1098 <SP1ML_enter_cmd_mode+0x1c>)
    1086:	4905      	ldr	r1, [pc, #20]	; (109c <SP1ML_enter_cmd_mode+0x20>)
    1088:	3a01      	subs	r2, #1
    108a:	4b05      	ldr	r3, [pc, #20]	; (10a0 <SP1ML_enter_cmd_mode+0x24>)
    108c:	4798      	blx	r3
    108e:	4b05      	ldr	r3, [pc, #20]	; (10a4 <SP1ML_enter_cmd_mode+0x28>)
    1090:	7018      	strb	r0, [r3, #0]
	
	
}
    1092:	bd08      	pop	{r3, pc}
    1094:	40002800 	.word	0x40002800
    1098:	200000cc 	.word	0x200000cc
    109c:	00002c8c 	.word	0x00002c8c
    10a0:	00001709 	.word	0x00001709
    10a4:	20000124 	.word	0x20000124

000010a8 <SP1ML_set_baud>:
	port_pin_set_output_level(SP1ML_SHDN_PIN, false);
	
}

uint8_t SP1ML_set_baud(uint32_t rate)
{
    10a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10aa:	b08f      	sub	sp, #60	; 0x3c
	
	// Check for valid rates
	if(rate < 9600 || rate > 921600) return 0;
    10ac:	4b3d      	ldr	r3, [pc, #244]	; (11a4 <SP1ML_set_baud+0xfc>)
    10ae:	18c1      	adds	r1, r0, r3
    10b0:	2300      	movs	r3, #0
    10b2:	4a3d      	ldr	r2, [pc, #244]	; (11a8 <SP1ML_set_baud+0x100>)
    10b4:	4291      	cmp	r1, r2
    10b6:	d871      	bhi.n	119c <SP1ML_set_baud+0xf4>
    10b8:	9001      	str	r0, [sp, #4]
	uint8_t recv_buff[24];
	uint8_t ucRateStr[13];
	uint8_t ucRadioBaudQuery[7] = {0x41, 0x54, 0x53, 0x30, 0x30, 0x3F, 0x0D};
    10ba:	a802      	add	r0, sp, #8
    10bc:	493b      	ldr	r1, [pc, #236]	; (11ac <SP1ML_set_baud+0x104>)
    10be:	2207      	movs	r2, #7
    10c0:	4b3b      	ldr	r3, [pc, #236]	; (11b0 <SP1ML_set_baud+0x108>)
    10c2:	4798      	blx	r3
    10c4:	2280      	movs	r2, #128	; 0x80
    10c6:	0512      	lsls	r2, r2, #20
    10c8:	4b3a      	ldr	r3, [pc, #232]	; (11b4 <SP1ML_set_baud+0x10c>)
    10ca:	619a      	str	r2, [r3, #24]
    10cc:	4b3a      	ldr	r3, [pc, #232]	; (11b8 <SP1ML_set_baud+0x110>)
    10ce:	3b01      	subs	r3, #1
	
	// Turn the radio on
	port_pin_set_output_level(SP1ML_EN_PIN, true);
	
	for(int i = 0; i < 65535; i++);
    10d0:	2b00      	cmp	r3, #0
    10d2:	d1fc      	bne.n	10ce <SP1ML_set_baud+0x26>
    10d4:	ad08      	add	r5, sp, #32
    10d6:	ae0e      	add	r6, sp, #56	; 0x38
    10d8:	1c2b      	adds	r3, r5, #0
	for(int i = 0; i < 24; i++)
	{
		recv_buff[i] = 0;
    10da:	2200      	movs	r2, #0
    10dc:	701a      	strb	r2, [r3, #0]
    10de:	3301      	adds	r3, #1
	
	// Turn the radio on
	port_pin_set_output_level(SP1ML_EN_PIN, true);
	
	for(int i = 0; i < 65535; i++);
	for(int i = 0; i < 24; i++)
    10e0:	42b3      	cmp	r3, r6
    10e2:	d1fb      	bne.n	10dc <SP1ML_set_baud+0x34>
	{
		recv_buff[i] = 0;
	}
	
	// 	Put the SP1ML into command mode -- handles waking up
	SP1ML_enter_cmd_mode();
    10e4:	4b35      	ldr	r3, [pc, #212]	; (11bc <SP1ML_set_baud+0x114>)
    10e6:	4798      	blx	r3
	
	status = usart_write_buffer_wait(&usart_instance, "AT/V\r", 5);
    10e8:	4f35      	ldr	r7, [pc, #212]	; (11c0 <SP1ML_set_baud+0x118>)
    10ea:	1c38      	adds	r0, r7, #0
    10ec:	4935      	ldr	r1, [pc, #212]	; (11c4 <SP1ML_set_baud+0x11c>)
    10ee:	2205      	movs	r2, #5
    10f0:	4b35      	ldr	r3, [pc, #212]	; (11c8 <SP1ML_set_baud+0x120>)
    10f2:	4798      	blx	r3
    10f4:	4c35      	ldr	r4, [pc, #212]	; (11cc <SP1ML_set_baud+0x124>)
    10f6:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    10f8:	1c38      	adds	r0, r7, #0
    10fa:	a908      	add	r1, sp, #32
    10fc:	2218      	movs	r2, #24
    10fe:	4b34      	ldr	r3, [pc, #208]	; (11d0 <SP1ML_set_baud+0x128>)
    1100:	4798      	blx	r3
    1102:	7020      	strb	r0, [r4, #0]
	
	sprintf(ucRateStr, "ATS00=%+06d\r", rate);
    1104:	a804      	add	r0, sp, #16
    1106:	4933      	ldr	r1, [pc, #204]	; (11d4 <SP1ML_set_baud+0x12c>)
    1108:	9a01      	ldr	r2, [sp, #4]
    110a:	4b33      	ldr	r3, [pc, #204]	; (11d8 <SP1ML_set_baud+0x130>)
    110c:	4798      	blx	r3
    110e:	4b2a      	ldr	r3, [pc, #168]	; (11b8 <SP1ML_set_baud+0x110>)
    1110:	3b01      	subs	r3, #1
	
	for(int i = 0; i < 65535; i++);
    1112:	2b00      	cmp	r3, #0
    1114:	d1fc      	bne.n	1110 <SP1ML_set_baud+0x68>
	
	status = usart_write_buffer_wait(&usart_instance, ucRateStr, 13);
    1116:	482a      	ldr	r0, [pc, #168]	; (11c0 <SP1ML_set_baud+0x118>)
    1118:	a904      	add	r1, sp, #16
    111a:	220d      	movs	r2, #13
    111c:	4b2a      	ldr	r3, [pc, #168]	; (11c8 <SP1ML_set_baud+0x120>)
    111e:	4798      	blx	r3
    1120:	4b2a      	ldr	r3, [pc, #168]	; (11cc <SP1ML_set_baud+0x124>)
    1122:	7018      	strb	r0, [r3, #0]
    1124:	4b24      	ldr	r3, [pc, #144]	; (11b8 <SP1ML_set_baud+0x110>)
    1126:	3b01      	subs	r3, #1
	
	for(int i = 0; i < 65535; i++);
    1128:	2b00      	cmp	r3, #0
    112a:	d1fc      	bne.n	1126 <SP1ML_set_baud+0x7e>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    112c:	4b24      	ldr	r3, [pc, #144]	; (11c0 <SP1ML_set_baud+0x118>)
    112e:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1130:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1132:	2b00      	cmp	r3, #0
    1134:	d1fc      	bne.n	1130 <SP1ML_set_baud+0x88>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1136:	6813      	ldr	r3, [r2, #0]
    1138:	2102      	movs	r1, #2
    113a:	438b      	bics	r3, r1
    113c:	6013      	str	r3, [r2, #0]
    113e:	4b1e      	ldr	r3, [pc, #120]	; (11b8 <SP1ML_set_baud+0x110>)
    1140:	3b01      	subs	r3, #1
	usart_disable(&usart_instance);
	for(int i = 0; i < 65535; i++);
    1142:	2b00      	cmp	r3, #0
    1144:	d1fc      	bne.n	1140 <SP1ML_set_baud+0x98>
	config_usart.baudrate = rate;
    1146:	4b25      	ldr	r3, [pc, #148]	; (11dc <SP1ML_set_baud+0x134>)
    1148:	9a01      	ldr	r2, [sp, #4]
    114a:	621a      	str	r2, [r3, #32]
	while ((status = usart_init(&usart_instance, SERCOM0, &config_usart)) != STATUS_OK);
    114c:	4f1c      	ldr	r7, [pc, #112]	; (11c0 <SP1ML_set_baud+0x118>)
    114e:	4c24      	ldr	r4, [pc, #144]	; (11e0 <SP1ML_set_baud+0x138>)
    1150:	1c38      	adds	r0, r7, #0
    1152:	2184      	movs	r1, #132	; 0x84
    1154:	05c9      	lsls	r1, r1, #23
    1156:	4a21      	ldr	r2, [pc, #132]	; (11dc <SP1ML_set_baud+0x134>)
    1158:	47a0      	blx	r4
    115a:	4b1c      	ldr	r3, [pc, #112]	; (11cc <SP1ML_set_baud+0x124>)
    115c:	7018      	strb	r0, [r3, #0]
    115e:	2800      	cmp	r0, #0
    1160:	d1f6      	bne.n	1150 <SP1ML_set_baud+0xa8>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1162:	4b17      	ldr	r3, [pc, #92]	; (11c0 <SP1ML_set_baud+0x118>)
    1164:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1166:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1168:	2b00      	cmp	r3, #0
    116a:	d1fc      	bne.n	1166 <SP1ML_set_baud+0xbe>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    116c:	6811      	ldr	r1, [r2, #0]
    116e:	3302      	adds	r3, #2
    1170:	430b      	orrs	r3, r1
    1172:	6013      	str	r3, [r2, #0]
	usart_enable(&usart_instance);
	for(int i = 0; i < sizeof(recv_buff)/sizeof(recv_buff[0]); i++){
		recv_buff[i] = 0;
    1174:	2300      	movs	r3, #0
    1176:	702b      	strb	r3, [r5, #0]
    1178:	3501      	adds	r5, #1
	usart_disable(&usart_instance);
	for(int i = 0; i < 65535; i++);
	config_usart.baudrate = rate;
	while ((status = usart_init(&usart_instance, SERCOM0, &config_usart)) != STATUS_OK);
	usart_enable(&usart_instance);
	for(int i = 0; i < sizeof(recv_buff)/sizeof(recv_buff[0]); i++){
    117a:	42b5      	cmp	r5, r6
    117c:	d1fb      	bne.n	1176 <SP1ML_set_baud+0xce>
		recv_buff[i] = 0;
	}
	
	status = usart_write_buffer_wait(&usart_instance, ucRadioBaudQuery, 7);
    117e:	4d10      	ldr	r5, [pc, #64]	; (11c0 <SP1ML_set_baud+0x118>)
    1180:	1c28      	adds	r0, r5, #0
    1182:	a902      	add	r1, sp, #8
    1184:	2207      	movs	r2, #7
    1186:	4b10      	ldr	r3, [pc, #64]	; (11c8 <SP1ML_set_baud+0x120>)
    1188:	4798      	blx	r3
    118a:	4c10      	ldr	r4, [pc, #64]	; (11cc <SP1ML_set_baud+0x124>)
    118c:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    118e:	1c28      	adds	r0, r5, #0
    1190:	a908      	add	r1, sp, #32
    1192:	2218      	movs	r2, #24
    1194:	4b0e      	ldr	r3, [pc, #56]	; (11d0 <SP1ML_set_baud+0x128>)
    1196:	4798      	blx	r3
    1198:	7020      	strb	r0, [r4, #0]
	
	// Don't shut down or disable, because we will lose the new setting.
	
	return 1;
    119a:	2301      	movs	r3, #1
}
    119c:	1c18      	adds	r0, r3, #0
    119e:	b00f      	add	sp, #60	; 0x3c
    11a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	ffffda80 	.word	0xffffda80
    11a8:	000dea80 	.word	0x000dea80
    11ac:	00002c74 	.word	0x00002c74
    11b0:	00002445 	.word	0x00002445
    11b4:	40002800 	.word	0x40002800
    11b8:	0000ffff 	.word	0x0000ffff
    11bc:	0000107d 	.word	0x0000107d
    11c0:	200000cc 	.word	0x200000cc
    11c4:	00002c90 	.word	0x00002c90
    11c8:	00001709 	.word	0x00001709
    11cc:	20000124 	.word	0x20000124
    11d0:	000017bd 	.word	0x000017bd
    11d4:	00002c98 	.word	0x00002c98
    11d8:	00002459 	.word	0x00002459
    11dc:	200000d8 	.word	0x200000d8
    11e0:	00001361 	.word	0x00001361

000011e4 <SP1ML_set_output_power>:

uint8_t SP1ML_set_output_power(int8_t power)
{
    11e4:	b530      	push	{r4, r5, lr}
    11e6:	b08d      	sub	sp, #52	; 0x34
    11e8:	1c04      	adds	r4, r0, #0
	uint8_t recv_buff[24];
	uint8_t ucPwrStr[10];
	uint8_t ucTransmitPowerQuery[7] = {0x41, 0x54, 0x53, 0x30, 0x34, 0x3F, 0x0D};
    11ea:	a801      	add	r0, sp, #4
    11ec:	491f      	ldr	r1, [pc, #124]	; (126c <SP1ML_set_output_power+0x88>)
    11ee:	3108      	adds	r1, #8
    11f0:	2207      	movs	r2, #7
    11f2:	4b1f      	ldr	r3, [pc, #124]	; (1270 <SP1ML_set_output_power+0x8c>)
    11f4:	4798      	blx	r3
    11f6:	2280      	movs	r2, #128	; 0x80
    11f8:	0512      	lsls	r2, r2, #20
    11fa:	4b1e      	ldr	r3, [pc, #120]	; (1274 <SP1ML_set_output_power+0x90>)
    11fc:	619a      	str	r2, [r3, #24]
		
	// Make sure its turned on
	port_pin_set_output_level(SP1ML_EN_PIN, true);
	
	// Also handles waking up and correct mode.
	SP1ML_set_baud(9600);
    11fe:	2096      	movs	r0, #150	; 0x96
    1200:	0180      	lsls	r0, r0, #6
    1202:	4b1d      	ldr	r3, [pc, #116]	; (1278 <SP1ML_set_output_power+0x94>)
    1204:	4798      	blx	r3
    1206:	4b1d      	ldr	r3, [pc, #116]	; (127c <SP1ML_set_output_power+0x98>)
    1208:	3b01      	subs	r3, #1
	for(int i = 0; i < 65535; i++);
    120a:	2b00      	cmp	r3, #0
    120c:	d1fc      	bne.n	1208 <SP1ML_set_output_power+0x24>
    120e:	ab06      	add	r3, sp, #24
    1210:	a90c      	add	r1, sp, #48	; 0x30
	
	for(int i = 0; i < 24; i++){
		recv_buff[i] = 0;
    1212:	2200      	movs	r2, #0
    1214:	701a      	strb	r2, [r3, #0]
    1216:	3301      	adds	r3, #1
	
	// Also handles waking up and correct mode.
	SP1ML_set_baud(9600);
	for(int i = 0; i < 65535; i++);
	
	for(int i = 0; i < 24; i++){
    1218:	428b      	cmp	r3, r1
    121a:	d1fb      	bne.n	1214 <SP1ML_set_output_power+0x30>
		recv_buff[i] = 0;
	}
	
	sprintf(ucPwrStr, "ATS04=%+03d\r", power);
    121c:	a803      	add	r0, sp, #12
    121e:	4918      	ldr	r1, [pc, #96]	; (1280 <SP1ML_set_output_power+0x9c>)
    1220:	1c22      	adds	r2, r4, #0
    1222:	4b18      	ldr	r3, [pc, #96]	; (1284 <SP1ML_set_output_power+0xa0>)
    1224:	4798      	blx	r3
	
	status = usart_write_buffer_wait(&usart_instance, ucPwrStr, 10);
    1226:	4d18      	ldr	r5, [pc, #96]	; (1288 <SP1ML_set_output_power+0xa4>)
    1228:	1c28      	adds	r0, r5, #0
    122a:	a903      	add	r1, sp, #12
    122c:	220a      	movs	r2, #10
    122e:	4b17      	ldr	r3, [pc, #92]	; (128c <SP1ML_set_output_power+0xa8>)
    1230:	4798      	blx	r3
    1232:	4c17      	ldr	r4, [pc, #92]	; (1290 <SP1ML_set_output_power+0xac>)
    1234:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    1236:	1c28      	adds	r0, r5, #0
    1238:	a906      	add	r1, sp, #24
    123a:	2218      	movs	r2, #24
    123c:	4b15      	ldr	r3, [pc, #84]	; (1294 <SP1ML_set_output_power+0xb0>)
    123e:	4798      	blx	r3
    1240:	7020      	strb	r0, [r4, #0]
    1242:	4b0e      	ldr	r3, [pc, #56]	; (127c <SP1ML_set_output_power+0x98>)
    1244:	3b01      	subs	r3, #1
	
	for(int i = 0; i < 65535; i++);
    1246:	2b00      	cmp	r3, #0
    1248:	d1fc      	bne.n	1244 <SP1ML_set_output_power+0x60>
	
	status = usart_write_buffer_wait(&usart_instance, ucTransmitPowerQuery, 7);
    124a:	4d0f      	ldr	r5, [pc, #60]	; (1288 <SP1ML_set_output_power+0xa4>)
    124c:	1c28      	adds	r0, r5, #0
    124e:	a901      	add	r1, sp, #4
    1250:	2207      	movs	r2, #7
    1252:	4b0e      	ldr	r3, [pc, #56]	; (128c <SP1ML_set_output_power+0xa8>)
    1254:	4798      	blx	r3
    1256:	4c0e      	ldr	r4, [pc, #56]	; (1290 <SP1ML_set_output_power+0xac>)
    1258:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    125a:	1c28      	adds	r0, r5, #0
    125c:	a906      	add	r1, sp, #24
    125e:	2218      	movs	r2, #24
    1260:	4b0c      	ldr	r3, [pc, #48]	; (1294 <SP1ML_set_output_power+0xb0>)
    1262:	4798      	blx	r3
    1264:	7020      	strb	r0, [r4, #0]
	
	// Don't shut down or disable, because we will lose the new setting.
	
	return 1;
}
    1266:	2001      	movs	r0, #1
    1268:	b00d      	add	sp, #52	; 0x34
    126a:	bd30      	pop	{r4, r5, pc}
    126c:	00002c74 	.word	0x00002c74
    1270:	00002445 	.word	0x00002445
    1274:	40002800 	.word	0x40002800
    1278:	000010a9 	.word	0x000010a9
    127c:	0000ffff 	.word	0x0000ffff
    1280:	00002ca8 	.word	0x00002ca8
    1284:	00002459 	.word	0x00002459
    1288:	200000cc 	.word	0x200000cc
    128c:	00001709 	.word	0x00001709
    1290:	20000124 	.word	0x20000124
    1294:	000017bd 	.word	0x000017bd

00001298 <SP1ML_enter_op_mode>:
	
	
}

void SP1ML_enter_op_mode(void)
{
    1298:	b508      	push	{r3, lr}
    129a:	2204      	movs	r2, #4
    129c:	4b04      	ldr	r3, [pc, #16]	; (12b0 <SP1ML_enter_op_mode+0x18>)
    129e:	619a      	str	r2, [r3, #24]
	// We don't fiddle with the enable or shutdown after mode switch, we assume that is done in the calling functions
	
	// Wake up the radio
	port_pin_set_output_level(SP1ML_SHDN_PIN, true);
	
	status = usart_write_buffer_wait(&usart_instance, "ATO\r", 4);
    12a0:	4804      	ldr	r0, [pc, #16]	; (12b4 <SP1ML_enter_op_mode+0x1c>)
    12a2:	4905      	ldr	r1, [pc, #20]	; (12b8 <SP1ML_enter_op_mode+0x20>)
    12a4:	4b05      	ldr	r3, [pc, #20]	; (12bc <SP1ML_enter_op_mode+0x24>)
    12a6:	4798      	blx	r3
    12a8:	4b05      	ldr	r3, [pc, #20]	; (12c0 <SP1ML_enter_op_mode+0x28>)
    12aa:	7018      	strb	r0, [r3, #0]
	
	
    12ac:	bd08      	pop	{r3, pc}
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	40002800 	.word	0x40002800
    12b4:	200000cc 	.word	0x200000cc
    12b8:	00002cb8 	.word	0x00002cb8
    12bc:	00001709 	.word	0x00001709
    12c0:	20000124 	.word	0x20000124

000012c4 <SP1ML_transmit_data>:
	
	return 1;
}

void SP1ML_transmit_data(uint8_t * data, uint16_t length)
{
    12c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12c6:	b08b      	sub	sp, #44	; 0x2c
    12c8:	9001      	str	r0, [sp, #4]
    12ca:	1c0e      	adds	r6, r1, #0
	uint8_t ucModCMD[8] = {0x41, 0x54, 0x53, 0x30, 0x33, 0x3D, 0x34, 0x0D};
    12cc:	a808      	add	r0, sp, #32
    12ce:	491a      	ldr	r1, [pc, #104]	; (1338 <SP1ML_transmit_data+0x74>)
    12d0:	3110      	adds	r1, #16
    12d2:	2208      	movs	r2, #8
    12d4:	4b19      	ldr	r3, [pc, #100]	; (133c <SP1ML_transmit_data+0x78>)
    12d6:	4798      	blx	r3
	uint8_t ucDebugData[2] = {0x01};
	uint8_t recv_buff[24];
	
	SP1ML_set_output_power(7);
    12d8:	2007      	movs	r0, #7
    12da:	4b19      	ldr	r3, [pc, #100]	; (1340 <SP1ML_transmit_data+0x7c>)
    12dc:	4798      	blx	r3
    12de:	4b19      	ldr	r3, [pc, #100]	; (1344 <SP1ML_transmit_data+0x80>)
    12e0:	3b01      	subs	r3, #1
	for(int i = 0; i < 65535; i++);
    12e2:	2b00      	cmp	r3, #0
    12e4:	d1fc      	bne.n	12e0 <SP1ML_transmit_data+0x1c>
    12e6:	ab02      	add	r3, sp, #8
    12e8:	a908      	add	r1, sp, #32
	
	for(int i = 0; i < 24; i++){
		recv_buff[i] = 0;
    12ea:	2200      	movs	r2, #0
    12ec:	701a      	strb	r2, [r3, #0]
    12ee:	3301      	adds	r3, #1
	uint8_t recv_buff[24];
	
	SP1ML_set_output_power(7);
	for(int i = 0; i < 65535; i++);
	
	for(int i = 0; i < 24; i++){
    12f0:	428b      	cmp	r3, r1
    12f2:	d1fb      	bne.n	12ec <SP1ML_transmit_data+0x28>
		recv_buff[i] = 0;
	}
	
	// Enter OOK MOD mode
	status = usart_write_buffer_wait(&usart_instance, ucModCMD, 8);
    12f4:	4f14      	ldr	r7, [pc, #80]	; (1348 <SP1ML_transmit_data+0x84>)
    12f6:	1c38      	adds	r0, r7, #0
    12f8:	a908      	add	r1, sp, #32
    12fa:	2208      	movs	r2, #8
    12fc:	4b13      	ldr	r3, [pc, #76]	; (134c <SP1ML_transmit_data+0x88>)
    12fe:	4798      	blx	r3
    1300:	4c13      	ldr	r4, [pc, #76]	; (1350 <SP1ML_transmit_data+0x8c>)
    1302:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    1304:	1c38      	adds	r0, r7, #0
    1306:	a902      	add	r1, sp, #8
    1308:	2218      	movs	r2, #24
    130a:	4b12      	ldr	r3, [pc, #72]	; (1354 <SP1ML_transmit_data+0x90>)
    130c:	4798      	blx	r3
    130e:	7020      	strb	r0, [r4, #0]
	
	SP1ML_enter_op_mode();
    1310:	4b11      	ldr	r3, [pc, #68]	; (1358 <SP1ML_transmit_data+0x94>)
    1312:	4798      	blx	r3
    1314:	24fa      	movs	r4, #250	; 0xfa
    1316:	00a4      	lsls	r4, r4, #2
	
	for(int i = 0; i < 1000; i++){
		usart_write_buffer_wait(&usart_instance, data, length);
    1318:	4f0b      	ldr	r7, [pc, #44]	; (1348 <SP1ML_transmit_data+0x84>)
    131a:	4d0c      	ldr	r5, [pc, #48]	; (134c <SP1ML_transmit_data+0x88>)
    131c:	1c38      	adds	r0, r7, #0
    131e:	9901      	ldr	r1, [sp, #4]
    1320:	1c32      	adds	r2, r6, #0
    1322:	47a8      	blx	r5
    1324:	3c01      	subs	r4, #1
	status = usart_write_buffer_wait(&usart_instance, ucModCMD, 8);
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
	
	SP1ML_enter_op_mode();
	
	for(int i = 0; i < 1000; i++){
    1326:	2c00      	cmp	r4, #0
    1328:	d1f8      	bne.n	131c <SP1ML_transmit_data+0x58>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    132a:	2280      	movs	r2, #128	; 0x80
    132c:	0512      	lsls	r2, r2, #20
    132e:	4b0b      	ldr	r3, [pc, #44]	; (135c <SP1ML_transmit_data+0x98>)
    1330:	615a      	str	r2, [r3, #20]

	
	// Turn the radio off
	port_pin_set_output_level(SP1ML_EN_PIN, false);
	
}
    1332:	b00b      	add	sp, #44	; 0x2c
    1334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	00002c74 	.word	0x00002c74
    133c:	00002445 	.word	0x00002445
    1340:	000011e5 	.word	0x000011e5
    1344:	0000ffff 	.word	0x0000ffff
    1348:	200000cc 	.word	0x200000cc
    134c:	00001709 	.word	0x00001709
    1350:	20000124 	.word	0x20000124
    1354:	000017bd 	.word	0x000017bd
    1358:	00001299 	.word	0x00001299
    135c:	40002800 	.word	0x40002800

00001360 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1360:	b5f0      	push	{r4, r5, r6, r7, lr}
    1362:	465f      	mov	r7, fp
    1364:	4656      	mov	r6, sl
    1366:	464d      	mov	r5, r9
    1368:	4644      	mov	r4, r8
    136a:	b4f0      	push	{r4, r5, r6, r7}
    136c:	b091      	sub	sp, #68	; 0x44
    136e:	1c06      	adds	r6, r0, #0
    1370:	1c0c      	adds	r4, r1, #0
    1372:	1c15      	adds	r5, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1374:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1376:	1c08      	adds	r0, r1, #0
    1378:	4bb3      	ldr	r3, [pc, #716]	; (1648 <usart_init+0x2e8>)
    137a:	4798      	blx	r3
    137c:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
    137e:	2a05      	cmp	r2, #5
    1380:	d003      	beq.n	138a <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1382:	1c07      	adds	r7, r0, #0
    1384:	3712      	adds	r7, #18
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1386:	1c03      	adds	r3, r0, #0
    1388:	e001      	b.n	138e <usart_init+0x2e>
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    138a:	2718      	movs	r7, #24
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    138c:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    138e:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1390:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1392:	07c9      	lsls	r1, r1, #31
    1394:	d500      	bpl.n	1398 <usart_init+0x38>
    1396:	e150      	b.n	163a <usart_init+0x2da>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1398:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    139a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    139c:	0789      	lsls	r1, r1, #30
    139e:	d500      	bpl.n	13a2 <usart_init+0x42>
    13a0:	e14b      	b.n	163a <usart_init+0x2da>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21)
	if (sercom_index == 5) {
    13a2:	2a05      	cmp	r2, #5
    13a4:	d106      	bne.n	13b4 <usart_init+0x54>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    13a6:	49a9      	ldr	r1, [pc, #676]	; (164c <usart_init+0x2ec>)
    13a8:	6a0a      	ldr	r2, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    13aa:	381b      	subs	r0, #27
    13ac:	4098      	lsls	r0, r3
    13ae:	4310      	orrs	r0, r2
    13b0:	6208      	str	r0, [r1, #32]
    13b2:	e005      	b.n	13c0 <usart_init+0x60>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    13b4:	49a5      	ldr	r1, [pc, #660]	; (164c <usart_init+0x2ec>)
    13b6:	69ca      	ldr	r2, [r1, #28]
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    13b8:	2001      	movs	r0, #1
    13ba:	4098      	lsls	r0, r3
    13bc:	4310      	orrs	r0, r2
    13be:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    13c0:	a90f      	add	r1, sp, #60	; 0x3c
    13c2:	232d      	movs	r3, #45	; 0x2d
    13c4:	4698      	mov	r8, r3
    13c6:	5ceb      	ldrb	r3, [r5, r3]
    13c8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13ca:	b2ff      	uxtb	r7, r7
    13cc:	1c38      	adds	r0, r7, #0
    13ce:	4ba0      	ldr	r3, [pc, #640]	; (1650 <usart_init+0x2f0>)
    13d0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    13d2:	1c38      	adds	r0, r7, #0
    13d4:	4b9f      	ldr	r3, [pc, #636]	; (1654 <usart_init+0x2f4>)
    13d6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    13d8:	4643      	mov	r3, r8
    13da:	5ce8      	ldrb	r0, [r5, r3]
    13dc:	2100      	movs	r1, #0
    13de:	4b9e      	ldr	r3, [pc, #632]	; (1658 <usart_init+0x2f8>)
    13e0:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    13e2:	7aeb      	ldrb	r3, [r5, #11]
    13e4:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    13e6:	2324      	movs	r3, #36	; 0x24
    13e8:	5ceb      	ldrb	r3, [r5, r3]
    13ea:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
    13ec:	2325      	movs	r3, #37	; 0x25
    13ee:	5ceb      	ldrb	r3, [r5, r3]
    13f0:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    13f2:	7eeb      	ldrb	r3, [r5, #27]
    13f4:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    13f6:	7f2b      	ldrb	r3, [r5, #28]
    13f8:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13fa:	6833      	ldr	r3, [r6, #0]
    13fc:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13fe:	1c18      	adds	r0, r3, #0
    1400:	4b91      	ldr	r3, [pc, #580]	; (1648 <usart_init+0x2e8>)
    1402:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1404:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1406:	2200      	movs	r2, #0
    1408:	230e      	movs	r3, #14
    140a:	a906      	add	r1, sp, #24
    140c:	468c      	mov	ip, r1
    140e:	4463      	add	r3, ip
    1410:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1412:	8a2b      	ldrh	r3, [r5, #16]
    1414:	4699      	mov	r9, r3
    1416:	2380      	movs	r3, #128	; 0x80
    1418:	01db      	lsls	r3, r3, #7
    141a:	4599      	cmp	r9, r3
    141c:	d019      	beq.n	1452 <usart_init+0xf2>
    141e:	d804      	bhi.n	142a <usart_init+0xca>
    1420:	2380      	movs	r3, #128	; 0x80
    1422:	019b      	lsls	r3, r3, #6
    1424:	4599      	cmp	r9, r3
    1426:	d00a      	beq.n	143e <usart_init+0xde>
    1428:	e0e8      	b.n	15fc <usart_init+0x29c>
    142a:	23c0      	movs	r3, #192	; 0xc0
    142c:	01db      	lsls	r3, r3, #7
    142e:	4599      	cmp	r9, r3
    1430:	d00a      	beq.n	1448 <usart_init+0xe8>
    1432:	2380      	movs	r3, #128	; 0x80
    1434:	021b      	lsls	r3, r3, #8
    1436:	4599      	cmp	r9, r3
    1438:	d100      	bne.n	143c <usart_init+0xdc>
    143a:	e0e4      	b.n	1606 <usart_init+0x2a6>
    143c:	e0de      	b.n	15fc <usart_init+0x29c>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    143e:	2310      	movs	r3, #16
    1440:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1442:	3b0f      	subs	r3, #15
    1444:	9307      	str	r3, [sp, #28]
    1446:	e0e2      	b.n	160e <usart_init+0x2ae>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1448:	2308      	movs	r3, #8
    144a:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    144c:	3b07      	subs	r3, #7
    144e:	9307      	str	r3, [sp, #28]
    1450:	e0dd      	b.n	160e <usart_init+0x2ae>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1452:	682b      	ldr	r3, [r5, #0]
    1454:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1456:	68eb      	ldr	r3, [r5, #12]
    1458:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    145a:	696b      	ldr	r3, [r5, #20]
    145c:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    145e:	7e2b      	ldrb	r3, [r5, #24]
    1460:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1462:	2326      	movs	r3, #38	; 0x26
    1464:	5ceb      	ldrb	r3, [r5, r3]
    1466:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1468:	686a      	ldr	r2, [r5, #4]
    146a:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    146c:	2a00      	cmp	r2, #0
    146e:	d016      	beq.n	149e <usart_init+0x13e>
    1470:	2380      	movs	r3, #128	; 0x80
    1472:	055b      	lsls	r3, r3, #21
    1474:	429a      	cmp	r2, r3
    1476:	d139      	bne.n	14ec <usart_init+0x18c>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1478:	2327      	movs	r3, #39	; 0x27
    147a:	5ceb      	ldrb	r3, [r5, r3]
    147c:	2b00      	cmp	r3, #0
    147e:	d139      	bne.n	14f4 <usart_init+0x194>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1480:	6a2b      	ldr	r3, [r5, #32]
    1482:	4698      	mov	r8, r3
    1484:	b2c0      	uxtb	r0, r0
    1486:	4b75      	ldr	r3, [pc, #468]	; (165c <usart_init+0x2fc>)
    1488:	4798      	blx	r3
    148a:	1c01      	adds	r1, r0, #0
    148c:	4640      	mov	r0, r8
    148e:	220e      	movs	r2, #14
    1490:	ab06      	add	r3, sp, #24
    1492:	469c      	mov	ip, r3
    1494:	4462      	add	r2, ip
    1496:	4b72      	ldr	r3, [pc, #456]	; (1660 <usart_init+0x300>)
    1498:	4798      	blx	r3
    149a:	1c03      	adds	r3, r0, #0
    149c:	e027      	b.n	14ee <usart_init+0x18e>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    149e:	2308      	movs	r3, #8
    14a0:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14a2:	2300      	movs	r3, #0
    14a4:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    14a6:	2327      	movs	r3, #39	; 0x27
    14a8:	5ceb      	ldrb	r3, [r5, r3]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d00c      	beq.n	14c8 <usart_init+0x168>
				status_code =
    14ae:	4643      	mov	r3, r8
    14b0:	9300      	str	r3, [sp, #0]
    14b2:	6a28      	ldr	r0, [r5, #32]
    14b4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    14b6:	220e      	movs	r2, #14
    14b8:	ab06      	add	r3, sp, #24
    14ba:	469c      	mov	ip, r3
    14bc:	4462      	add	r2, ip
    14be:	9b07      	ldr	r3, [sp, #28]
    14c0:	4f68      	ldr	r7, [pc, #416]	; (1664 <usart_init+0x304>)
    14c2:	47b8      	blx	r7
    14c4:	1c03      	adds	r3, r0, #0
    14c6:	e012      	b.n	14ee <usart_init+0x18e>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    14c8:	6a2b      	ldr	r3, [r5, #32]
    14ca:	1c1f      	adds	r7, r3, #0
    14cc:	b2c0      	uxtb	r0, r0
    14ce:	4b63      	ldr	r3, [pc, #396]	; (165c <usart_init+0x2fc>)
    14d0:	4798      	blx	r3
    14d2:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    14d4:	4643      	mov	r3, r8
    14d6:	9300      	str	r3, [sp, #0]
    14d8:	1c38      	adds	r0, r7, #0
    14da:	220e      	movs	r2, #14
    14dc:	ab06      	add	r3, sp, #24
    14de:	469c      	mov	ip, r3
    14e0:	4462      	add	r2, ip
    14e2:	9b07      	ldr	r3, [sp, #28]
    14e4:	4f5f      	ldr	r7, [pc, #380]	; (1664 <usart_init+0x304>)
    14e6:	47b8      	blx	r7
    14e8:	1c03      	adds	r3, r0, #0
    14ea:	e000      	b.n	14ee <usart_init+0x18e>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    14ec:	2300      	movs	r3, #0
    14ee:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    14f0:	d000      	beq.n	14f4 <usart_init+0x194>
    14f2:	e0a2      	b.n	163a <usart_init+0x2da>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    14f4:	7e6b      	ldrb	r3, [r5, #25]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d002      	beq.n	1500 <usart_init+0x1a0>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    14fa:	7eab      	ldrb	r3, [r5, #26]
    14fc:	4652      	mov	r2, sl
    14fe:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1500:	6832      	ldr	r2, [r6, #0]
    1502:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1504:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1506:	2b00      	cmp	r3, #0
    1508:	d1fc      	bne.n	1504 <usart_init+0x1a4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    150a:	330e      	adds	r3, #14
    150c:	aa06      	add	r2, sp, #24
    150e:	4694      	mov	ip, r2
    1510:	4463      	add	r3, ip
    1512:	881b      	ldrh	r3, [r3, #0]
    1514:	4652      	mov	r2, sl
    1516:	8193      	strh	r3, [r2, #12]
    1518:	9b02      	ldr	r3, [sp, #8]
    151a:	465a      	mov	r2, fp
    151c:	4313      	orrs	r3, r2
    151e:	9a03      	ldr	r2, [sp, #12]
    1520:	4313      	orrs	r3, r2
    1522:	433b      	orrs	r3, r7
    1524:	464a      	mov	r2, r9
    1526:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1528:	9a04      	ldr	r2, [sp, #16]
    152a:	0212      	lsls	r2, r2, #8
    152c:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    152e:	9a05      	ldr	r2, [sp, #20]
    1530:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    1532:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1534:	2327      	movs	r3, #39	; 0x27
    1536:	5ceb      	ldrb	r3, [r5, r3]
    1538:	2b00      	cmp	r3, #0
    153a:	d101      	bne.n	1540 <usart_init+0x1e0>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    153c:	3304      	adds	r3, #4
    153e:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1540:	7f2b      	ldrb	r3, [r5, #28]
    1542:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1544:	7e6a      	ldrb	r2, [r5, #25]
    1546:	0293      	lsls	r3, r2, #10
    1548:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    154a:	7f6a      	ldrb	r2, [r5, #29]
    154c:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    154e:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1550:	2224      	movs	r2, #36	; 0x24
    1552:	5caa      	ldrb	r2, [r5, r2]
    1554:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1556:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1558:	2225      	movs	r2, #37	; 0x25
    155a:	5caa      	ldrb	r2, [r5, r2]
    155c:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    155e:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1560:	7ae9      	ldrb	r1, [r5, #11]
    1562:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1564:	892b      	ldrh	r3, [r5, #8]
    1566:	2bff      	cmp	r3, #255	; 0xff
    1568:	d004      	beq.n	1574 <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    156a:	2280      	movs	r2, #128	; 0x80
    156c:	0452      	lsls	r2, r2, #17
    156e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1570:	4319      	orrs	r1, r3
    1572:	e005      	b.n	1580 <usart_init+0x220>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1574:	7eeb      	ldrb	r3, [r5, #27]
    1576:	2b00      	cmp	r3, #0
    1578:	d002      	beq.n	1580 <usart_init+0x220>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    157a:	2380      	movs	r3, #128	; 0x80
    157c:	04db      	lsls	r3, r3, #19
    157e:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1580:	232c      	movs	r3, #44	; 0x2c
    1582:	5ceb      	ldrb	r3, [r5, r3]
    1584:	2b00      	cmp	r3, #0
    1586:	d103      	bne.n	1590 <usart_init+0x230>
    1588:	4b37      	ldr	r3, [pc, #220]	; (1668 <usart_init+0x308>)
    158a:	789b      	ldrb	r3, [r3, #2]
    158c:	079b      	lsls	r3, r3, #30
    158e:	d501      	bpl.n	1594 <usart_init+0x234>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1590:	2380      	movs	r3, #128	; 0x80
    1592:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1594:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1596:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1598:	2b00      	cmp	r3, #0
    159a:	d1fc      	bne.n	1596 <usart_init+0x236>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    159c:	4653      	mov	r3, sl
    159e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    15a0:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15a2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    15a4:	2b00      	cmp	r3, #0
    15a6:	d1fc      	bne.n	15a2 <usart_init+0x242>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    15a8:	4653      	mov	r3, sl
    15aa:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    15ac:	ab0e      	add	r3, sp, #56	; 0x38
    15ae:	2280      	movs	r2, #128	; 0x80
    15b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    15b2:	2200      	movs	r2, #0
    15b4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    15b6:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    15b8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    15ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    15bc:	930a      	str	r3, [sp, #40]	; 0x28
    15be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    15c0:	930b      	str	r3, [sp, #44]	; 0x2c
    15c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    15c4:	930c      	str	r3, [sp, #48]	; 0x30
    15c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    15c8:	9302      	str	r3, [sp, #8]
    15ca:	930d      	str	r3, [sp, #52]	; 0x34
    15cc:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15ce:	ad0e      	add	r5, sp, #56	; 0x38
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15d0:	4e26      	ldr	r6, [pc, #152]	; (166c <usart_init+0x30c>)
    15d2:	b2f9      	uxtb	r1, r7
    15d4:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15d6:	aa0a      	add	r2, sp, #40	; 0x28
    15d8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    15da:	2800      	cmp	r0, #0
    15dc:	d102      	bne.n	15e4 <usart_init+0x284>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    15de:	1c20      	adds	r0, r4, #0
    15e0:	4b23      	ldr	r3, [pc, #140]	; (1670 <usart_init+0x310>)
    15e2:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    15e4:	1c43      	adds	r3, r0, #1
    15e6:	d004      	beq.n	15f2 <usart_init+0x292>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15e8:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15ea:	0c00      	lsrs	r0, r0, #16
    15ec:	b2c0      	uxtb	r0, r0
    15ee:	1c29      	adds	r1, r5, #0
    15f0:	47b0      	blx	r6
    15f2:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    15f4:	2f04      	cmp	r7, #4
    15f6:	d1ec      	bne.n	15d2 <usart_init+0x272>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    15f8:	2000      	movs	r0, #0
    15fa:	e01e      	b.n	163a <usart_init+0x2da>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    15fc:	2310      	movs	r3, #16
    15fe:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1600:	2300      	movs	r3, #0
    1602:	9307      	str	r3, [sp, #28]
    1604:	e003      	b.n	160e <usart_init+0x2ae>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1606:	2303      	movs	r3, #3
    1608:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    160a:	2300      	movs	r3, #0
    160c:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    160e:	682b      	ldr	r3, [r5, #0]
    1610:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    1612:	68eb      	ldr	r3, [r5, #12]
    1614:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1616:	696b      	ldr	r3, [r5, #20]
    1618:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    161a:	7e2b      	ldrb	r3, [r5, #24]
    161c:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    161e:	2326      	movs	r3, #38	; 0x26
    1620:	5ceb      	ldrb	r3, [r5, r3]
    1622:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1624:	686a      	ldr	r2, [r5, #4]
    1626:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1628:	2a00      	cmp	r2, #0
    162a:	d100      	bne.n	162e <usart_init+0x2ce>
    162c:	e73b      	b.n	14a6 <usart_init+0x146>
    162e:	2380      	movs	r3, #128	; 0x80
    1630:	055b      	lsls	r3, r3, #21
    1632:	429a      	cmp	r2, r3
    1634:	d100      	bne.n	1638 <usart_init+0x2d8>
    1636:	e71f      	b.n	1478 <usart_init+0x118>
    1638:	e75c      	b.n	14f4 <usart_init+0x194>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    163a:	b011      	add	sp, #68	; 0x44
    163c:	bc3c      	pop	{r2, r3, r4, r5}
    163e:	4690      	mov	r8, r2
    1640:	4699      	mov	r9, r3
    1642:	46a2      	mov	sl, r4
    1644:	46ab      	mov	fp, r5
    1646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1648:	00000d89 	.word	0x00000d89
    164c:	40000400 	.word	0x40000400
    1650:	00001e19 	.word	0x00001e19
    1654:	00001db1 	.word	0x00001db1
    1658:	00000bd1 	.word	0x00000bd1
    165c:	00001e3d 	.word	0x00001e3d
    1660:	000009e1 	.word	0x000009e1
    1664:	00000a09 	.word	0x00000a09
    1668:	41002000 	.word	0x41002000
    166c:	00001f15 	.word	0x00001f15
    1670:	00000c1d 	.word	0x00000c1d

00001674 <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1674:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1676:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1678:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    167a:	2a00      	cmp	r2, #0
    167c:	d00c      	beq.n	1698 <usart_write_wait+0x24>
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    167e:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
    1680:	3817      	subs	r0, #23
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    1682:	07d2      	lsls	r2, r2, #31
    1684:	d508      	bpl.n	1698 <usart_write_wait+0x24>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1686:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1688:	2a00      	cmp	r2, #0
    168a:	d1fc      	bne.n	1686 <usart_write_wait+0x12>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    168c:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    168e:	2102      	movs	r1, #2
    1690:	7e1a      	ldrb	r2, [r3, #24]
    1692:	420a      	tst	r2, r1
    1694:	d0fc      	beq.n	1690 <usart_write_wait+0x1c>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1696:	2000      	movs	r0, #0
}
    1698:	4770      	bx	lr
    169a:	46c0      	nop			; (mov r8, r8)

0000169c <usart_read_wait>:

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    169c:	6803      	ldr	r3, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    169e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    16a0:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    16a2:	2a00      	cmp	r2, #0
    16a4:	d02f      	beq.n	1706 <usart_read_wait+0x6a>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    16a6:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
    16a8:	3817      	subs	r0, #23
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    16aa:	0752      	lsls	r2, r2, #29
    16ac:	d52b      	bpl.n	1706 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16ae:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    16b0:	2a00      	cmp	r2, #0
    16b2:	d1fc      	bne.n	16ae <usart_read_wait+0x12>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16b4:	8b5a      	ldrh	r2, [r3, #26]
    16b6:	b2d2      	uxtb	r2, r2

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    16b8:	0690      	lsls	r0, r2, #26
    16ba:	d021      	beq.n	1700 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    16bc:	0790      	lsls	r0, r2, #30
    16be:	d503      	bpl.n	16c8 <usart_read_wait+0x2c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    16c0:	2202      	movs	r2, #2
    16c2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    16c4:	201a      	movs	r0, #26
    16c6:	e01e      	b.n	1706 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16c8:	0750      	lsls	r0, r2, #29
    16ca:	d503      	bpl.n	16d4 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    16cc:	2204      	movs	r2, #4
    16ce:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    16d0:	201e      	movs	r0, #30
    16d2:	e018      	b.n	1706 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    16d4:	07d0      	lsls	r0, r2, #31
    16d6:	d503      	bpl.n	16e0 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    16d8:	2201      	movs	r2, #1
    16da:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    16dc:	2013      	movs	r0, #19
    16de:	e012      	b.n	1706 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    16e0:	06d0      	lsls	r0, r2, #27
    16e2:	d505      	bpl.n	16f0 <usart_read_wait+0x54>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    16e4:	8b59      	ldrh	r1, [r3, #26]
    16e6:	2210      	movs	r2, #16
    16e8:	430a      	orrs	r2, r1
    16ea:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    16ec:	2042      	movs	r0, #66	; 0x42
    16ee:	e00a      	b.n	1706 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    16f0:	0692      	lsls	r2, r2, #26
    16f2:	d505      	bpl.n	1700 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    16f4:	8b59      	ldrh	r1, [r3, #26]
    16f6:	2220      	movs	r2, #32
    16f8:	430a      	orrs	r2, r1
    16fa:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    16fc:	2041      	movs	r0, #65	; 0x41
    16fe:	e002      	b.n	1706 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1702:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1704:	2000      	movs	r0, #0
}
    1706:	4770      	bx	lr

00001708 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    170a:	4657      	mov	r7, sl
    170c:	464e      	mov	r6, r9
    170e:	b4c0      	push	{r6, r7}
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1710:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    1712:	2a00      	cmp	r2, #0
    1714:	d049      	beq.n	17aa <usart_write_buffer_wait+0xa2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1716:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1718:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    171a:	2c00      	cmp	r4, #0
    171c:	d045      	beq.n	17aa <usart_write_buffer_wait+0xa2>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    171e:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1720:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1722:	2b00      	cmp	r3, #0
    1724:	d1fc      	bne.n	1720 <usart_write_buffer_wait+0x18>
    1726:	468a      	mov	sl, r1
    1728:	4681      	mov	r9, r0
    172a:	1c17      	adds	r7, r2, #0
    172c:	2600      	movs	r6, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    172e:	2501      	movs	r5, #1
    1730:	e01f      	b.n	1772 <usart_write_buffer_wait+0x6a>
    1732:	7e22      	ldrb	r2, [r4, #24]
    1734:	422a      	tst	r2, r5
    1736:	d104      	bne.n	1742 <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
    1738:	2b01      	cmp	r3, #1
    173a:	d028      	beq.n	178e <usart_write_buffer_wait+0x86>
    173c:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    173e:	2b00      	cmp	r3, #0
    1740:	d1f7      	bne.n	1732 <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1742:	1c72      	adds	r2, r6, #1
    1744:	b292      	uxth	r2, r2
    1746:	4653      	mov	r3, sl
    1748:	5d9b      	ldrb	r3, [r3, r6]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    174a:	4649      	mov	r1, r9
    174c:	7949      	ldrb	r1, [r1, #5]
    174e:	2901      	cmp	r1, #1
    1750:	d002      	beq.n	1758 <usart_write_buffer_wait+0x50>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1752:	b299      	uxth	r1, r3
    1754:	1c16      	adds	r6, r2, #0
    1756:	e005      	b.n	1764 <usart_write_buffer_wait+0x5c>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    1758:	1cb1      	adds	r1, r6, #2
    175a:	b28e      	uxth	r6, r1
    175c:	4651      	mov	r1, sl
    175e:	5c89      	ldrb	r1, [r1, r2]
    1760:	0209      	lsls	r1, r1, #8
    1762:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    1764:	4648      	mov	r0, r9
    1766:	4b13      	ldr	r3, [pc, #76]	; (17b4 <usart_write_buffer_wait+0xac>)
    1768:	4798      	blx	r3
    176a:	1e7a      	subs	r2, r7, #1
    176c:	b297      	uxth	r7, r2
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    176e:	2f00      	cmp	r7, #0
    1770:	d015      	beq.n	179e <usart_write_buffer_wait+0x96>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1772:	7e23      	ldrb	r3, [r4, #24]
    1774:	422b      	tst	r3, r5
    1776:	d1e4      	bne.n	1742 <usart_write_buffer_wait+0x3a>
    1778:	4b0f      	ldr	r3, [pc, #60]	; (17b8 <usart_write_buffer_wait+0xb0>)
    177a:	e7da      	b.n	1732 <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    177c:	7e22      	ldrb	r2, [r4, #24]
    177e:	420a      	tst	r2, r1
    1780:	d107      	bne.n	1792 <usart_write_buffer_wait+0x8a>
			break;
		} else if (i == USART_TIMEOUT) {
    1782:	2b01      	cmp	r3, #1
    1784:	d007      	beq.n	1796 <usart_write_buffer_wait+0x8e>
    1786:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1788:	2b00      	cmp	r3, #0
    178a:	d1f7      	bne.n	177c <usart_write_buffer_wait+0x74>
    178c:	e00d      	b.n	17aa <usart_write_buffer_wait+0xa2>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    178e:	2312      	movs	r3, #18
    1790:	e00b      	b.n	17aa <usart_write_buffer_wait+0xa2>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    1792:	2300      	movs	r3, #0
    1794:	e009      	b.n	17aa <usart_write_buffer_wait+0xa2>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    1796:	2312      	movs	r3, #18
    1798:	e007      	b.n	17aa <usart_write_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
    179a:	2300      	movs	r3, #0
    179c:	e005      	b.n	17aa <usart_write_buffer_wait+0xa2>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    179e:	7e23      	ldrb	r3, [r4, #24]
    17a0:	079b      	lsls	r3, r3, #30
    17a2:	d4fa      	bmi.n	179a <usart_write_buffer_wait+0x92>
    17a4:	4b04      	ldr	r3, [pc, #16]	; (17b8 <usart_write_buffer_wait+0xb0>)
    17a6:	2102      	movs	r1, #2
    17a8:	e7e8      	b.n	177c <usart_write_buffer_wait+0x74>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    17aa:	1c18      	adds	r0, r3, #0
    17ac:	bc0c      	pop	{r2, r3}
    17ae:	4691      	mov	r9, r2
    17b0:	469a      	mov	sl, r3
    17b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17b4:	00001675 	.word	0x00001675
    17b8:	0000ffff 	.word	0x0000ffff

000017bc <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17be:	4657      	mov	r7, sl
    17c0:	464e      	mov	r6, r9
    17c2:	b4c0      	push	{r6, r7}
    17c4:	b083      	sub	sp, #12
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    17c6:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    17c8:	2a00      	cmp	r2, #0
    17ca:	d03c      	beq.n	1846 <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17cc:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    17ce:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17d0:	2c00      	cmp	r4, #0
    17d2:	d038      	beq.n	1846 <usart_read_buffer_wait+0x8a>
    17d4:	468a      	mov	sl, r1
    17d6:	4681      	mov	r9, r0
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17d8:	6805      	ldr	r5, [r0, #0]
    17da:	1c17      	adds	r7, r2, #0
    17dc:	2600      	movs	r6, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    17de:	2404      	movs	r4, #4
    17e0:	e02c      	b.n	183c <usart_read_buffer_wait+0x80>
    17e2:	7e2a      	ldrb	r2, [r5, #24]
    17e4:	4222      	tst	r2, r4
    17e6:	d104      	bne.n	17f2 <usart_read_buffer_wait+0x36>
				break;
			} else if (i == USART_TIMEOUT) {
    17e8:	2b01      	cmp	r3, #1
    17ea:	d023      	beq.n	1834 <usart_read_buffer_wait+0x78>
    17ec:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    17ee:	2b00      	cmp	r3, #0
    17f0:	d1f7      	bne.n	17e2 <usart_read_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    17f2:	466b      	mov	r3, sp
    17f4:	1d99      	adds	r1, r3, #6
    17f6:	2300      	movs	r3, #0
    17f8:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
    17fa:	4648      	mov	r0, r9
    17fc:	4b15      	ldr	r3, [pc, #84]	; (1854 <usart_read_buffer_wait+0x98>)
    17fe:	4798      	blx	r3

		if (retval != STATUS_OK) {
    1800:	2800      	cmp	r0, #0
    1802:	d119      	bne.n	1838 <usart_read_buffer_wait+0x7c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1804:	1c73      	adds	r3, r6, #1
    1806:	b299      	uxth	r1, r3
    1808:	466b      	mov	r3, sp
    180a:	3306      	adds	r3, #6
    180c:	881b      	ldrh	r3, [r3, #0]
    180e:	4652      	mov	r2, sl
    1810:	5593      	strb	r3, [r2, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1812:	464a      	mov	r2, r9
    1814:	7952      	ldrb	r2, [r2, #5]
    1816:	2a01      	cmp	r2, #1
    1818:	d105      	bne.n	1826 <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
    181a:	1cb2      	adds	r2, r6, #2
    181c:	b296      	uxth	r6, r2
    181e:	0a1b      	lsrs	r3, r3, #8
    1820:	4652      	mov	r2, sl
    1822:	5453      	strb	r3, [r2, r1]
    1824:	e000      	b.n	1828 <usart_read_buffer_wait+0x6c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1826:	1c0e      	adds	r6, r1, #0
    1828:	1e7a      	subs	r2, r7, #1
    182a:	b297      	uxth	r7, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    182c:	2f00      	cmp	r7, #0
    182e:	d105      	bne.n	183c <usart_read_buffer_wait+0x80>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    1830:	2300      	movs	r3, #0
    1832:	e008      	b.n	1846 <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    1834:	2312      	movs	r3, #18
    1836:	e006      	b.n	1846 <usart_read_buffer_wait+0x8a>
		}

		enum status_code retval;
		uint16_t received_data = 0;

		retval = usart_read_wait(module, &received_data);
    1838:	1c03      	adds	r3, r0, #0
    183a:	e004      	b.n	1846 <usart_read_buffer_wait+0x8a>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    183c:	7e2b      	ldrb	r3, [r5, #24]
    183e:	4223      	tst	r3, r4
    1840:	d1d7      	bne.n	17f2 <usart_read_buffer_wait+0x36>
    1842:	4b05      	ldr	r3, [pc, #20]	; (1858 <usart_read_buffer_wait+0x9c>)
    1844:	e7cd      	b.n	17e2 <usart_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1846:	1c18      	adds	r0, r3, #0
    1848:	b003      	add	sp, #12
    184a:	bc0c      	pop	{r2, r3}
    184c:	4691      	mov	r9, r2
    184e:	469a      	mov	sl, r3
    1850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	0000169d 	.word	0x0000169d
    1858:	0000ffff 	.word	0x0000ffff

0000185c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    185c:	4770      	bx	lr
    185e:	46c0      	nop			; (mov r8, r8)

00001860 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1860:	4b0c      	ldr	r3, [pc, #48]	; (1894 <cpu_irq_enter_critical+0x34>)
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	2b00      	cmp	r3, #0
    1866:	d110      	bne.n	188a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1868:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    186c:	2b00      	cmp	r3, #0
    186e:	d109      	bne.n	1884 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1870:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1872:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1876:	2200      	movs	r2, #0
    1878:	4b07      	ldr	r3, [pc, #28]	; (1898 <cpu_irq_enter_critical+0x38>)
    187a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    187c:	3201      	adds	r2, #1
    187e:	4b07      	ldr	r3, [pc, #28]	; (189c <cpu_irq_enter_critical+0x3c>)
    1880:	701a      	strb	r2, [r3, #0]
    1882:	e002      	b.n	188a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1884:	2200      	movs	r2, #0
    1886:	4b05      	ldr	r3, [pc, #20]	; (189c <cpu_irq_enter_critical+0x3c>)
    1888:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    188a:	4a02      	ldr	r2, [pc, #8]	; (1894 <cpu_irq_enter_critical+0x34>)
    188c:	6813      	ldr	r3, [r2, #0]
    188e:	3301      	adds	r3, #1
    1890:	6013      	str	r3, [r2, #0]
}
    1892:	4770      	bx	lr
    1894:	200000a0 	.word	0x200000a0
    1898:	20000014 	.word	0x20000014
    189c:	200000a4 	.word	0x200000a4

000018a0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    18a0:	4b08      	ldr	r3, [pc, #32]	; (18c4 <cpu_irq_leave_critical+0x24>)
    18a2:	681a      	ldr	r2, [r3, #0]
    18a4:	3a01      	subs	r2, #1
    18a6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    18a8:	681b      	ldr	r3, [r3, #0]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d109      	bne.n	18c2 <cpu_irq_leave_critical+0x22>
    18ae:	4b06      	ldr	r3, [pc, #24]	; (18c8 <cpu_irq_leave_critical+0x28>)
    18b0:	781b      	ldrb	r3, [r3, #0]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d005      	beq.n	18c2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    18b6:	2201      	movs	r2, #1
    18b8:	4b04      	ldr	r3, [pc, #16]	; (18cc <cpu_irq_leave_critical+0x2c>)
    18ba:	701a      	strb	r2, [r3, #0]
    18bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    18c0:	b662      	cpsie	i
	}
}
    18c2:	4770      	bx	lr
    18c4:	200000a0 	.word	0x200000a0
    18c8:	200000a4 	.word	0x200000a4
    18cc:	20000014 	.word	0x20000014

000018d0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    18d0:	b508      	push	{r3, lr}
	switch (clock_source) {
    18d2:	2808      	cmp	r0, #8
    18d4:	d803      	bhi.n	18de <system_clock_source_get_hz+0xe>
    18d6:	0080      	lsls	r0, r0, #2
    18d8:	4b1c      	ldr	r3, [pc, #112]	; (194c <system_clock_source_get_hz+0x7c>)
    18da:	581b      	ldr	r3, [r3, r0]
    18dc:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    18de:	2000      	movs	r0, #0
    18e0:	e032      	b.n	1948 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    18e2:	4b1b      	ldr	r3, [pc, #108]	; (1950 <system_clock_source_get_hz+0x80>)
    18e4:	6918      	ldr	r0, [r3, #16]
    18e6:	e02f      	b.n	1948 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    18e8:	4b1a      	ldr	r3, [pc, #104]	; (1954 <system_clock_source_get_hz+0x84>)
    18ea:	7d18      	ldrb	r0, [r3, #20]
    18ec:	0700      	lsls	r0, r0, #28
    18ee:	0f80      	lsrs	r0, r0, #30
    18f0:	3001      	adds	r0, #1
    18f2:	4b19      	ldr	r3, [pc, #100]	; (1958 <system_clock_source_get_hz+0x88>)
    18f4:	4358      	muls	r0, r3
    18f6:	e027      	b.n	1948 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    18f8:	4b15      	ldr	r3, [pc, #84]	; (1950 <system_clock_source_get_hz+0x80>)
    18fa:	6958      	ldr	r0, [r3, #20]
    18fc:	e024      	b.n	1948 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    18fe:	4b14      	ldr	r3, [pc, #80]	; (1950 <system_clock_source_get_hz+0x80>)
    1900:	681b      	ldr	r3, [r3, #0]
    1902:	2002      	movs	r0, #2
    1904:	4018      	ands	r0, r3
    1906:	d01f      	beq.n	1948 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1908:	4912      	ldr	r1, [pc, #72]	; (1954 <system_clock_source_get_hz+0x84>)
    190a:	2280      	movs	r2, #128	; 0x80
    190c:	0052      	lsls	r2, r2, #1
    190e:	68cb      	ldr	r3, [r1, #12]
    1910:	4213      	tst	r3, r2
    1912:	d0fc      	beq.n	190e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    1914:	4b0e      	ldr	r3, [pc, #56]	; (1950 <system_clock_source_get_hz+0x80>)
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	075b      	lsls	r3, r3, #29
    191a:	d514      	bpl.n	1946 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    191c:	2000      	movs	r0, #0
    191e:	4b0f      	ldr	r3, [pc, #60]	; (195c <system_clock_source_get_hz+0x8c>)
    1920:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1922:	4b0b      	ldr	r3, [pc, #44]	; (1950 <system_clock_source_get_hz+0x80>)
    1924:	689b      	ldr	r3, [r3, #8]
    1926:	041b      	lsls	r3, r3, #16
    1928:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    192a:	4358      	muls	r0, r3
    192c:	e00c      	b.n	1948 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    192e:	2328      	movs	r3, #40	; 0x28
    1930:	4a08      	ldr	r2, [pc, #32]	; (1954 <system_clock_source_get_hz+0x84>)
    1932:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1934:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1936:	079b      	lsls	r3, r3, #30
    1938:	d506      	bpl.n	1948 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    193a:	4b05      	ldr	r3, [pc, #20]	; (1950 <system_clock_source_get_hz+0x80>)
    193c:	68d8      	ldr	r0, [r3, #12]
    193e:	e003      	b.n	1948 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1940:	2080      	movs	r0, #128	; 0x80
    1942:	0200      	lsls	r0, r0, #8
    1944:	e000      	b.n	1948 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1946:	4806      	ldr	r0, [pc, #24]	; (1960 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    1948:	bd08      	pop	{r3, pc}
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	00002cc0 	.word	0x00002cc0
    1950:	200000a8 	.word	0x200000a8
    1954:	40000c00 	.word	0x40000c00
    1958:	003d0900 	.word	0x003d0900
    195c:	00001e3d 	.word	0x00001e3d
    1960:	02dc6c00 	.word	0x02dc6c00

00001964 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1964:	b5f0      	push	{r4, r5, r6, r7, lr}
    1966:	465f      	mov	r7, fp
    1968:	4656      	mov	r6, sl
    196a:	464d      	mov	r5, r9
    196c:	4644      	mov	r4, r8
    196e:	b4f0      	push	{r4, r5, r6, r7}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1970:	4e25      	ldr	r6, [pc, #148]	; (1a08 <system_clock_source_xosc32k_set_config+0xa4>)
    1972:	6973      	ldr	r3, [r6, #20]
    1974:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1976:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1978:	7803      	ldrb	r3, [r0, #0]
    197a:	425a      	negs	r2, r3
    197c:	415a      	adcs	r2, r3
    197e:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    1980:	7883      	ldrb	r3, [r0, #2]
    1982:	469a      	mov	sl, r3
	temp.bit.EN32K = config->enable_32khz_output;
    1984:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    1986:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1988:	7a02      	ldrb	r2, [r0, #8]
    198a:	4693      	mov	fp, r2
	temp.bit.WRTLOCK  = config->write_once;
    198c:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    198e:	6842      	ldr	r2, [r0, #4]
    1990:	481e      	ldr	r0, [pc, #120]	; (1a0c <system_clock_source_xosc32k_set_config+0xa8>)
    1992:	6142      	str	r2, [r0, #20]

	OSC32KCTRL->XOSC32K = temp;
    1994:	2001      	movs	r0, #1
    1996:	4642      	mov	r2, r8
    1998:	0092      	lsls	r2, r2, #2
    199a:	4690      	mov	r8, r2
    199c:	2204      	movs	r2, #4
    199e:	4691      	mov	r9, r2
    19a0:	4662      	mov	r2, ip
    19a2:	4649      	mov	r1, r9
    19a4:	438a      	bics	r2, r1
    19a6:	4694      	mov	ip, r2
    19a8:	4642      	mov	r2, r8
    19aa:	4661      	mov	r1, ip
    19ac:	430a      	orrs	r2, r1
    19ae:	4694      	mov	ip, r2
    19b0:	4003      	ands	r3, r0
    19b2:	00db      	lsls	r3, r3, #3
    19b4:	2208      	movs	r2, #8
    19b6:	4690      	mov	r8, r2
    19b8:	4662      	mov	r2, ip
    19ba:	4641      	mov	r1, r8
    19bc:	438a      	bics	r2, r1
    19be:	4313      	orrs	r3, r2
    19c0:	4651      	mov	r1, sl
    19c2:	4001      	ands	r1, r0
    19c4:	0109      	lsls	r1, r1, #4
    19c6:	2210      	movs	r2, #16
    19c8:	4393      	bics	r3, r2
    19ca:	430b      	orrs	r3, r1
    19cc:	465a      	mov	r2, fp
    19ce:	4002      	ands	r2, r0
    19d0:	0192      	lsls	r2, r2, #6
    19d2:	2140      	movs	r1, #64	; 0x40
    19d4:	438b      	bics	r3, r1
    19d6:	4313      	orrs	r3, r2
    19d8:	4007      	ands	r7, r0
    19da:	01ff      	lsls	r7, r7, #7
    19dc:	2280      	movs	r2, #128	; 0x80
    19de:	4393      	bics	r3, r2
    19e0:	433b      	orrs	r3, r7
    19e2:	3a79      	subs	r2, #121	; 0x79
    19e4:	4015      	ands	r5, r2
    19e6:	022d      	lsls	r5, r5, #8
    19e8:	4f09      	ldr	r7, [pc, #36]	; (1a10 <system_clock_source_xosc32k_set_config+0xac>)
    19ea:	403b      	ands	r3, r7
    19ec:	432b      	orrs	r3, r5
    19ee:	4004      	ands	r4, r0
    19f0:	0320      	lsls	r0, r4, #12
    19f2:	4c08      	ldr	r4, [pc, #32]	; (1a14 <system_clock_source_xosc32k_set_config+0xb0>)
    19f4:	401c      	ands	r4, r3
    19f6:	4304      	orrs	r4, r0
    19f8:	6174      	str	r4, [r6, #20]
}
    19fa:	bc3c      	pop	{r2, r3, r4, r5}
    19fc:	4690      	mov	r8, r2
    19fe:	4699      	mov	r9, r3
    1a00:	46a2      	mov	sl, r4
    1a02:	46ab      	mov	fp, r5
    1a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	40001000 	.word	0x40001000
    1a0c:	200000a8 	.word	0x200000a8
    1a10:	fffff8ff 	.word	0xfffff8ff
    1a14:	ffffefff 	.word	0xffffefff

00001a18 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1a18:	2808      	cmp	r0, #8
    1a1a:	d803      	bhi.n	1a24 <system_clock_source_enable+0xc>
    1a1c:	0080      	lsls	r0, r0, #2
    1a1e:	4b29      	ldr	r3, [pc, #164]	; (1ac4 <system_clock_source_enable+0xac>)
    1a20:	581b      	ldr	r3, [r3, r0]
    1a22:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a24:	2017      	movs	r0, #23
    1a26:	e04b      	b.n	1ac0 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    1a28:	4a27      	ldr	r2, [pc, #156]	; (1ac8 <system_clock_source_enable+0xb0>)
    1a2a:	7d11      	ldrb	r1, [r2, #20]
    1a2c:	2302      	movs	r3, #2
    1a2e:	430b      	orrs	r3, r1
    1a30:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    1a32:	2000      	movs	r0, #0
    1a34:	e044      	b.n	1ac0 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    1a36:	4a25      	ldr	r2, [pc, #148]	; (1acc <system_clock_source_enable+0xb4>)
    1a38:	6991      	ldr	r1, [r2, #24]
    1a3a:	2302      	movs	r3, #2
    1a3c:	430b      	orrs	r3, r1
    1a3e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a40:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    1a42:	e03d      	b.n	1ac0 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    1a44:	4a20      	ldr	r2, [pc, #128]	; (1ac8 <system_clock_source_enable+0xb0>)
    1a46:	8a11      	ldrh	r1, [r2, #16]
    1a48:	2302      	movs	r3, #2
    1a4a:	430b      	orrs	r3, r1
    1a4c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a4e:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    1a50:	e036      	b.n	1ac0 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    1a52:	4a1e      	ldr	r2, [pc, #120]	; (1acc <system_clock_source_enable+0xb4>)
    1a54:	6951      	ldr	r1, [r2, #20]
    1a56:	2302      	movs	r3, #2
    1a58:	430b      	orrs	r3, r1
    1a5a:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a5c:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    1a5e:	e02f      	b.n	1ac0 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    1a60:	491b      	ldr	r1, [pc, #108]	; (1ad0 <system_clock_source_enable+0xb8>)
    1a62:	680b      	ldr	r3, [r1, #0]
    1a64:	2202      	movs	r2, #2
    1a66:	4313      	orrs	r3, r2
    1a68:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    1a6a:	4b17      	ldr	r3, [pc, #92]	; (1ac8 <system_clock_source_enable+0xb0>)
    1a6c:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1a6e:	1c19      	adds	r1, r3, #0
    1a70:	32fe      	adds	r2, #254	; 0xfe
    1a72:	68cb      	ldr	r3, [r1, #12]
    1a74:	4213      	tst	r3, r2
    1a76:	d0fc      	beq.n	1a72 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1a78:	4a15      	ldr	r2, [pc, #84]	; (1ad0 <system_clock_source_enable+0xb8>)
    1a7a:	6891      	ldr	r1, [r2, #8]
    1a7c:	4b12      	ldr	r3, [pc, #72]	; (1ac8 <system_clock_source_enable+0xb0>)
    1a7e:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1a80:	6852      	ldr	r2, [r2, #4]
    1a82:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    1a84:	2200      	movs	r2, #0
    1a86:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1a88:	1c19      	adds	r1, r3, #0
    1a8a:	3201      	adds	r2, #1
    1a8c:	32ff      	adds	r2, #255	; 0xff
    1a8e:	68cb      	ldr	r3, [r1, #12]
    1a90:	4213      	tst	r3, r2
    1a92:	d0fc      	beq.n	1a8e <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1a94:	4b0e      	ldr	r3, [pc, #56]	; (1ad0 <system_clock_source_enable+0xb8>)
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	b29b      	uxth	r3, r3
    1a9a:	4a0b      	ldr	r2, [pc, #44]	; (1ac8 <system_clock_source_enable+0xb0>)
    1a9c:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a9e:	2000      	movs	r0, #0
    1aa0:	e00e      	b.n	1ac0 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    1aa2:	4909      	ldr	r1, [pc, #36]	; (1ac8 <system_clock_source_enable+0xb0>)
    1aa4:	2228      	movs	r2, #40	; 0x28
    1aa6:	5c88      	ldrb	r0, [r1, r2]
    1aa8:	2302      	movs	r3, #2
    1aaa:	4303      	orrs	r3, r0
    1aac:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    1aae:	1c08      	adds	r0, r1, #0
    1ab0:	2138      	movs	r1, #56	; 0x38
    1ab2:	3a26      	subs	r2, #38	; 0x26
    1ab4:	5c43      	ldrb	r3, [r0, r1]
    1ab6:	4213      	tst	r3, r2
    1ab8:	d1fc      	bne.n	1ab4 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1aba:	2000      	movs	r0, #0
    1abc:	e000      	b.n	1ac0 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1abe:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1ac0:	4770      	bx	lr
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	00002ce4 	.word	0x00002ce4
    1ac8:	40000c00 	.word	0x40000c00
    1acc:	40001000 	.word	0x40001000
    1ad0:	200000a8 	.word	0x200000a8

00001ad4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ad6:	464f      	mov	r7, r9
    1ad8:	4646      	mov	r6, r8
    1ada:	b4c0      	push	{r6, r7}
    1adc:	b087      	sub	sp, #28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1ade:	2280      	movs	r2, #128	; 0x80
    1ae0:	0052      	lsls	r2, r2, #1
    1ae2:	4b48      	ldr	r3, [pc, #288]	; (1c04 <system_clock_init+0x130>)
    1ae4:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1ae6:	3afd      	subs	r2, #253	; 0xfd
    1ae8:	4b47      	ldr	r3, [pc, #284]	; (1c08 <system_clock_init+0x134>)
    1aea:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1aec:	4a47      	ldr	r2, [pc, #284]	; (1c0c <system_clock_init+0x138>)
    1aee:	6853      	ldr	r3, [r2, #4]
    1af0:	211e      	movs	r1, #30
    1af2:	438b      	bics	r3, r1
    1af4:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1af6:	2380      	movs	r3, #128	; 0x80
    1af8:	05db      	lsls	r3, r3, #23
    1afa:	789b      	ldrb	r3, [r3, #2]
    1afc:	2b02      	cmp	r3, #2
    1afe:	d009      	beq.n	1b14 <system_clock_init+0x40>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1b00:	2380      	movs	r3, #128	; 0x80
    1b02:	05db      	lsls	r3, r3, #23
    1b04:	2201      	movs	r2, #1
    1b06:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1b08:	3201      	adds	r2, #1
    1b0a:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1b0c:	1c1a      	adds	r2, r3, #0
    1b0e:	7993      	ldrb	r3, [r2, #6]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d0fc      	beq.n	1b0e <system_clock_init+0x3a>
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    1b14:	a803      	add	r0, sp, #12
    1b16:	2380      	movs	r3, #128	; 0x80
    1b18:	021b      	lsls	r3, r3, #8
    1b1a:	6043      	str	r3, [r0, #4]
	config->enable_1khz_output  = false;
	config->enable_32khz_output = true;
    1b1c:	2301      	movs	r3, #1
    1b1e:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    1b20:	2200      	movs	r2, #0
    1b22:	7282      	strb	r2, [r0, #10]
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    1b24:	7003      	strb	r3, [r0, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1b26:	2104      	movs	r1, #4
    1b28:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    1b2a:	7083      	strb	r3, [r0, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1b2c:	7242      	strb	r2, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    1b2e:	7203      	strb	r3, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1b30:	4b37      	ldr	r3, [pc, #220]	; (1c10 <system_clock_init+0x13c>)
    1b32:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1b34:	2005      	movs	r0, #5
    1b36:	4b37      	ldr	r3, [pc, #220]	; (1c14 <system_clock_init+0x140>)
    1b38:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    1b3a:	4937      	ldr	r1, [pc, #220]	; (1c18 <system_clock_init+0x144>)
    1b3c:	2201      	movs	r2, #1
    1b3e:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1b40:	421a      	tst	r2, r3
    1b42:	d0fc      	beq.n	1b3e <system_clock_init+0x6a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    1b44:	4a34      	ldr	r2, [pc, #208]	; (1c18 <system_clock_init+0x144>)
    1b46:	6951      	ldr	r1, [r2, #20]
    1b48:	2380      	movs	r3, #128	; 0x80
    1b4a:	430b      	orrs	r3, r1
    1b4c:	6153      	str	r3, [r2, #20]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1b4e:	4b2d      	ldr	r3, [pc, #180]	; (1c04 <system_clock_init+0x130>)
    1b50:	7d1a      	ldrb	r2, [r3, #20]
    1b52:	2180      	movs	r1, #128	; 0x80
    1b54:	4249      	negs	r1, r1
    1b56:	430a      	orrs	r2, r1
    1b58:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    1b5a:	7d19      	ldrb	r1, [r3, #20]
    1b5c:	2240      	movs	r2, #64	; 0x40
    1b5e:	430a      	orrs	r2, r1
    1b60:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b62:	4b2e      	ldr	r3, [pc, #184]	; (1c1c <system_clock_init+0x148>)
    1b64:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b66:	2601      	movs	r6, #1
    1b68:	9601      	str	r6, [sp, #4]
	config->high_when_disabled = false;
    1b6a:	2400      	movs	r4, #0
    1b6c:	466b      	mov	r3, sp
    1b6e:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1b70:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1b72:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1b74:	2305      	movs	r3, #5
    1b76:	466a      	mov	r2, sp
    1b78:	7013      	strb	r3, [r2, #0]
    1b7a:	2001      	movs	r0, #1
    1b7c:	4669      	mov	r1, sp
    1b7e:	4b28      	ldr	r3, [pc, #160]	; (1c20 <system_clock_init+0x14c>)
    1b80:	4698      	mov	r8, r3
    1b82:	4798      	blx	r3
    1b84:	2001      	movs	r0, #1
    1b86:	4f27      	ldr	r7, [pc, #156]	; (1c24 <system_clock_init+0x150>)
    1b88:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b8a:	9601      	str	r6, [sp, #4]
	config->high_when_disabled = false;
    1b8c:	466b      	mov	r3, sp
    1b8e:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    1b90:	2306      	movs	r3, #6
    1b92:	4699      	mov	r9, r3
    1b94:	466b      	mov	r3, sp
    1b96:	464a      	mov	r2, r9
    1b98:	701a      	strb	r2, [r3, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1b9a:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1b9c:	725c      	strb	r4, [r3, #9]
    1b9e:	2002      	movs	r0, #2
    1ba0:	4669      	mov	r1, sp
    1ba2:	47c0      	blx	r8
    1ba4:	2002      	movs	r0, #2
    1ba6:	47b8      	blx	r7
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_CPUDIV_CPUDIV_Msk) == divider);
	MCLK->CPUDIV.reg = (uint32_t)divider;
    1ba8:	4d1f      	ldr	r5, [pc, #124]	; (1c28 <system_clock_init+0x154>)
    1baa:	712c      	strb	r4, [r5, #4]
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_LPDIV_LPDIV_Msk) == divider);
	MCLK->LPDIV.reg = (uint32_t)divider;
    1bac:	716c      	strb	r4, [r5, #5]
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_BUPDIV_BUPDIV_Msk) == divider);
	MCLK->BUPDIV.reg = (uint32_t)divider;
    1bae:	71ae      	strb	r6, [r5, #6]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1bb0:	9601      	str	r6, [sp, #4]
	config->high_when_disabled = false;
    1bb2:	466b      	mov	r3, sp
    1bb4:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    1bb6:	464a      	mov	r2, r9
    1bb8:	701a      	strb	r2, [r3, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1bba:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1bbc:	725c      	strb	r4, [r3, #9]
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1bbe:	2000      	movs	r0, #0
    1bc0:	4669      	mov	r1, sp
    1bc2:	47c0      	blx	r8
    1bc4:	2000      	movs	r0, #0
    1bc6:	47b8      	blx	r7
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> (MCLK->CPUDIV.reg - 1));
    1bc8:	2000      	movs	r0, #0
    1bca:	4b18      	ldr	r3, [pc, #96]	; (1c2c <system_clock_init+0x158>)
    1bcc:	4798      	blx	r3
    1bce:	792b      	ldrb	r3, [r5, #4]
    1bd0:	3b01      	subs	r3, #1
    1bd2:	40d8      	lsrs	r0, r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    1bd4:	4b16      	ldr	r3, [pc, #88]	; (1c30 <system_clock_init+0x15c>)
    1bd6:	4298      	cmp	r0, r3
    1bd8:	d80e      	bhi.n	1bf8 <system_clock_init+0x124>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1bda:	2380      	movs	r3, #128	; 0x80
    1bdc:	05db      	lsls	r3, r3, #23
    1bde:	789b      	ldrb	r3, [r3, #2]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d009      	beq.n	1bf8 <system_clock_init+0x124>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1be4:	2380      	movs	r3, #128	; 0x80
    1be6:	05db      	lsls	r3, r3, #23
    1be8:	2201      	movs	r2, #1
    1bea:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1bec:	2200      	movs	r2, #0
    1bee:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1bf0:	1c1a      	adds	r2, r3, #0
    1bf2:	7993      	ldrb	r3, [r2, #6]
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d0fc      	beq.n	1bf2 <system_clock_init+0x11e>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    1bf8:	b007      	add	sp, #28
    1bfa:	bc0c      	pop	{r2, r3}
    1bfc:	4690      	mov	r8, r2
    1bfe:	4699      	mov	r9, r3
    1c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	40000c00 	.word	0x40000c00
    1c08:	40001400 	.word	0x40001400
    1c0c:	41004000 	.word	0x41004000
    1c10:	00001965 	.word	0x00001965
    1c14:	00001a19 	.word	0x00001a19
    1c18:	40001000 	.word	0x40001000
    1c1c:	00001c35 	.word	0x00001c35
    1c20:	00001c59 	.word	0x00001c59
    1c24:	00001d05 	.word	0x00001d05
    1c28:	40000400 	.word	0x40000400
    1c2c:	00001d45 	.word	0x00001d45
    1c30:	00b71b00 	.word	0x00b71b00

00001c34 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1c34:	4a06      	ldr	r2, [pc, #24]	; (1c50 <system_gclk_init+0x1c>)
    1c36:	6951      	ldr	r1, [r2, #20]
    1c38:	2340      	movs	r3, #64	; 0x40
    1c3a:	430b      	orrs	r3, r1
    1c3c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    1c3e:	2201      	movs	r2, #1
    1c40:	4b04      	ldr	r3, [pc, #16]	; (1c54 <system_gclk_init+0x20>)
    1c42:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1c44:	1c19      	adds	r1, r3, #0
    1c46:	780b      	ldrb	r3, [r1, #0]
    1c48:	4213      	tst	r3, r2
    1c4a:	d1fc      	bne.n	1c46 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1c4c:	4770      	bx	lr
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	40000400 	.word	0x40000400
    1c54:	40001800 	.word	0x40001800

00001c58 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c58:	b570      	push	{r4, r5, r6, lr}
    1c5a:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c5c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c5e:	784b      	ldrb	r3, [r1, #1]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d002      	beq.n	1c6a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c64:	2380      	movs	r3, #128	; 0x80
    1c66:	00db      	lsls	r3, r3, #3
    1c68:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c6a:	7a4b      	ldrb	r3, [r1, #9]
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d002      	beq.n	1c76 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1c70:	2380      	movs	r3, #128	; 0x80
    1c72:	011b      	lsls	r3, r3, #4
    1c74:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1c76:	684a      	ldr	r2, [r1, #4]
    1c78:	2a01      	cmp	r2, #1
    1c7a:	d917      	bls.n	1cac <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1c7c:	1e53      	subs	r3, r2, #1
    1c7e:	421a      	tst	r2, r3
    1c80:	d10f      	bne.n	1ca2 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c82:	2a02      	cmp	r2, #2
    1c84:	d906      	bls.n	1c94 <system_gclk_gen_set_config+0x3c>
    1c86:	2302      	movs	r3, #2
    1c88:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    1c8a:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1c8c:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c8e:	429a      	cmp	r2, r3
    1c90:	d8fb      	bhi.n	1c8a <system_gclk_gen_set_config+0x32>
    1c92:	e000      	b.n	1c96 <system_gclk_gen_set_config+0x3e>
    1c94:	2000      	movs	r0, #0
    1c96:	2380      	movs	r3, #128	; 0x80
    1c98:	015b      	lsls	r3, r3, #5
    1c9a:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1c9c:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c9e:	4305      	orrs	r5, r0
    1ca0:	e004      	b.n	1cac <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1ca2:	0412      	lsls	r2, r2, #16
    1ca4:	2380      	movs	r3, #128	; 0x80
    1ca6:	009b      	lsls	r3, r3, #2
    1ca8:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1caa:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1cac:	7a0b      	ldrb	r3, [r1, #8]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d002      	beq.n	1cb8 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1cb2:	2380      	movs	r3, #128	; 0x80
    1cb4:	019b      	lsls	r3, r3, #6
    1cb6:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1cb8:	2604      	movs	r6, #4
    1cba:	40a6      	lsls	r6, r4
    1cbc:	490d      	ldr	r1, [pc, #52]	; (1cf4 <system_gclk_gen_set_config+0x9c>)
    1cbe:	4a0e      	ldr	r2, [pc, #56]	; (1cf8 <system_gclk_gen_set_config+0xa0>)
    1cc0:	684b      	ldr	r3, [r1, #4]
    1cc2:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1cc4:	421e      	tst	r6, r3
    1cc6:	d1fb      	bne.n	1cc0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1cc8:	4b0c      	ldr	r3, [pc, #48]	; (1cfc <system_gclk_gen_set_config+0xa4>)
    1cca:	4798      	blx	r3
    1ccc:	00a4      	lsls	r4, r4, #2
    1cce:	4b09      	ldr	r3, [pc, #36]	; (1cf4 <system_gclk_gen_set_config+0x9c>)
    1cd0:	469c      	mov	ip, r3
    1cd2:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1cd4:	6a20      	ldr	r0, [r4, #32]
    1cd6:	2380      	movs	r3, #128	; 0x80
    1cd8:	005b      	lsls	r3, r3, #1
    1cda:	4018      	ands	r0, r3
    1cdc:	4328      	orrs	r0, r5
    1cde:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1ce0:	4661      	mov	r1, ip
    1ce2:	4a05      	ldr	r2, [pc, #20]	; (1cf8 <system_gclk_gen_set_config+0xa0>)
    1ce4:	684b      	ldr	r3, [r1, #4]
    1ce6:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1ce8:	421e      	tst	r6, r3
    1cea:	d1fb      	bne.n	1ce4 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1cec:	4b04      	ldr	r3, [pc, #16]	; (1d00 <system_gclk_gen_set_config+0xa8>)
    1cee:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1cf0:	bd70      	pop	{r4, r5, r6, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	40001800 	.word	0x40001800
    1cf8:	000007fc 	.word	0x000007fc
    1cfc:	00001861 	.word	0x00001861
    1d00:	000018a1 	.word	0x000018a1

00001d04 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d04:	b510      	push	{r4, lr}
    1d06:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1d08:	2204      	movs	r2, #4
    1d0a:	4082      	lsls	r2, r0
    1d0c:	4809      	ldr	r0, [pc, #36]	; (1d34 <system_gclk_gen_enable+0x30>)
    1d0e:	490a      	ldr	r1, [pc, #40]	; (1d38 <system_gclk_gen_enable+0x34>)
    1d10:	6843      	ldr	r3, [r0, #4]
    1d12:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1d14:	421a      	tst	r2, r3
    1d16:	d1fb      	bne.n	1d10 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d18:	4b08      	ldr	r3, [pc, #32]	; (1d3c <system_gclk_gen_enable+0x38>)
    1d1a:	4798      	blx	r3
    1d1c:	00a4      	lsls	r4, r4, #2
    1d1e:	4b05      	ldr	r3, [pc, #20]	; (1d34 <system_gclk_gen_enable+0x30>)
    1d20:	469c      	mov	ip, r3
    1d22:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1d24:	6a23      	ldr	r3, [r4, #32]
    1d26:	2280      	movs	r2, #128	; 0x80
    1d28:	0052      	lsls	r2, r2, #1
    1d2a:	4313      	orrs	r3, r2
    1d2c:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d2e:	4b04      	ldr	r3, [pc, #16]	; (1d40 <system_gclk_gen_enable+0x3c>)
    1d30:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d32:	bd10      	pop	{r4, pc}
    1d34:	40001800 	.word	0x40001800
    1d38:	000007fc 	.word	0x000007fc
    1d3c:	00001861 	.word	0x00001861
    1d40:	000018a1 	.word	0x000018a1

00001d44 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d46:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1d48:	2204      	movs	r2, #4
    1d4a:	4082      	lsls	r2, r0
    1d4c:	4812      	ldr	r0, [pc, #72]	; (1d98 <system_gclk_gen_get_hz+0x54>)
    1d4e:	4913      	ldr	r1, [pc, #76]	; (1d9c <system_gclk_gen_get_hz+0x58>)
    1d50:	6843      	ldr	r3, [r0, #4]
    1d52:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1d54:	421a      	tst	r2, r3
    1d56:	d1fb      	bne.n	1d50 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d58:	4b11      	ldr	r3, [pc, #68]	; (1da0 <system_gclk_gen_get_hz+0x5c>)
    1d5a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1d5c:	4f0e      	ldr	r7, [pc, #56]	; (1d98 <system_gclk_gen_get_hz+0x54>)
    1d5e:	3408      	adds	r4, #8
    1d60:	00a4      	lsls	r4, r4, #2
    1d62:	59e3      	ldr	r3, [r4, r7]
    1d64:	200f      	movs	r0, #15
    1d66:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d68:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <system_gclk_gen_get_hz+0x60>)
    1d6a:	4798      	blx	r3
    1d6c:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1d6e:	59e5      	ldr	r5, [r4, r7]
    1d70:	04ed      	lsls	r5, r5, #19
    1d72:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1d74:	59e4      	ldr	r4, [r4, r7]
    1d76:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d78:	4b0b      	ldr	r3, [pc, #44]	; (1da8 <system_gclk_gen_get_hz+0x64>)
    1d7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1d7c:	2d00      	cmp	r5, #0
    1d7e:	d107      	bne.n	1d90 <system_gclk_gen_get_hz+0x4c>
    1d80:	2c01      	cmp	r4, #1
    1d82:	d907      	bls.n	1d94 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1d84:	1c30      	adds	r0, r6, #0
    1d86:	1c21      	adds	r1, r4, #0
    1d88:	4b08      	ldr	r3, [pc, #32]	; (1dac <system_gclk_gen_get_hz+0x68>)
    1d8a:	4798      	blx	r3
    1d8c:	1c06      	adds	r6, r0, #0
    1d8e:	e001      	b.n	1d94 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1d90:	3401      	adds	r4, #1
    1d92:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1d94:	1c30      	adds	r0, r6, #0
    1d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d98:	40001800 	.word	0x40001800
    1d9c:	000007fc 	.word	0x000007fc
    1da0:	00001861 	.word	0x00001861
    1da4:	000018d1 	.word	0x000018d1
    1da8:	000018a1 	.word	0x000018a1
    1dac:	000020a1 	.word	0x000020a1

00001db0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1db0:	b510      	push	{r4, lr}
    1db2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1db4:	4b08      	ldr	r3, [pc, #32]	; (1dd8 <system_gclk_chan_enable+0x28>)
    1db6:	4798      	blx	r3
    1db8:	00a4      	lsls	r4, r4, #2
    1dba:	4b08      	ldr	r3, [pc, #32]	; (1ddc <system_gclk_chan_enable+0x2c>)
    1dbc:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1dbe:	2280      	movs	r2, #128	; 0x80
    1dc0:	5881      	ldr	r1, [r0, r2]
    1dc2:	2340      	movs	r3, #64	; 0x40
    1dc4:	430b      	orrs	r3, r1
    1dc6:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1dc8:	2180      	movs	r1, #128	; 0x80
    1dca:	3a40      	subs	r2, #64	; 0x40
    1dcc:	5843      	ldr	r3, [r0, r1]
    1dce:	421a      	tst	r2, r3
    1dd0:	d0fc      	beq.n	1dcc <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1dd2:	4b03      	ldr	r3, [pc, #12]	; (1de0 <system_gclk_chan_enable+0x30>)
    1dd4:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1dd6:	bd10      	pop	{r4, pc}
    1dd8:	00001861 	.word	0x00001861
    1ddc:	40001800 	.word	0x40001800
    1de0:	000018a1 	.word	0x000018a1

00001de4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1de4:	b510      	push	{r4, lr}
    1de6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1de8:	4b08      	ldr	r3, [pc, #32]	; (1e0c <system_gclk_chan_disable+0x28>)
    1dea:	4798      	blx	r3
    1dec:	00a4      	lsls	r4, r4, #2
    1dee:	4b08      	ldr	r3, [pc, #32]	; (1e10 <system_gclk_chan_disable+0x2c>)
    1df0:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1df2:	2280      	movs	r2, #128	; 0x80
    1df4:	5883      	ldr	r3, [r0, r2]
    1df6:	2140      	movs	r1, #64	; 0x40
    1df8:	438b      	bics	r3, r1
    1dfa:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1dfc:	3140      	adds	r1, #64	; 0x40
    1dfe:	3a40      	subs	r2, #64	; 0x40
    1e00:	5843      	ldr	r3, [r0, r1]
    1e02:	421a      	tst	r2, r3
    1e04:	d1fc      	bne.n	1e00 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e06:	4b03      	ldr	r3, [pc, #12]	; (1e14 <system_gclk_chan_disable+0x30>)
    1e08:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1e0a:	bd10      	pop	{r4, pc}
    1e0c:	00001861 	.word	0x00001861
    1e10:	40001800 	.word	0x40001800
    1e14:	000018a1 	.word	0x000018a1

00001e18 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1e18:	b538      	push	{r3, r4, r5, lr}
    1e1a:	1c04      	adds	r4, r0, #0
    1e1c:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1e1e:	4b05      	ldr	r3, [pc, #20]	; (1e34 <system_gclk_chan_set_config+0x1c>)
    1e20:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1e22:	782b      	ldrb	r3, [r5, #0]
    1e24:	220f      	movs	r2, #15
    1e26:	4013      	ands	r3, r2
    1e28:	3420      	adds	r4, #32
    1e2a:	00a4      	lsls	r4, r4, #2
    1e2c:	4a02      	ldr	r2, [pc, #8]	; (1e38 <system_gclk_chan_set_config+0x20>)
    1e2e:	50a3      	str	r3, [r4, r2]


}
    1e30:	bd38      	pop	{r3, r4, r5, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	00001de5 	.word	0x00001de5
    1e38:	40001800 	.word	0x40001800

00001e3c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1e3c:	b510      	push	{r4, lr}
    1e3e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1e40:	4b06      	ldr	r3, [pc, #24]	; (1e5c <system_gclk_chan_get_hz+0x20>)
    1e42:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1e44:	3420      	adds	r4, #32
    1e46:	00a4      	lsls	r4, r4, #2
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <system_gclk_chan_get_hz+0x24>)
    1e4a:	58e3      	ldr	r3, [r4, r3]
    1e4c:	240f      	movs	r4, #15
    1e4e:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e50:	4b04      	ldr	r3, [pc, #16]	; (1e64 <system_gclk_chan_get_hz+0x28>)
    1e52:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1e54:	1c20      	adds	r0, r4, #0
    1e56:	4b04      	ldr	r3, [pc, #16]	; (1e68 <system_gclk_chan_get_hz+0x2c>)
    1e58:	4798      	blx	r3
}
    1e5a:	bd10      	pop	{r4, pc}
    1e5c:	00001861 	.word	0x00001861
    1e60:	40001800 	.word	0x40001800
    1e64:	000018a1 	.word	0x000018a1
    1e68:	00001d45 	.word	0x00001d45

00001e6c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1e6c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1e6e:	78d3      	ldrb	r3, [r2, #3]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d11e      	bne.n	1eb2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1e74:	7814      	ldrb	r4, [r2, #0]
    1e76:	2c80      	cmp	r4, #128	; 0x80
    1e78:	d004      	beq.n	1e84 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1e7a:	0624      	lsls	r4, r4, #24
    1e7c:	2380      	movs	r3, #128	; 0x80
    1e7e:	025b      	lsls	r3, r3, #9
    1e80:	431c      	orrs	r4, r3
    1e82:	e000      	b.n	1e86 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1e84:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1e86:	7853      	ldrb	r3, [r2, #1]
    1e88:	2502      	movs	r5, #2
    1e8a:	43ab      	bics	r3, r5
    1e8c:	d10a      	bne.n	1ea4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1e8e:	7893      	ldrb	r3, [r2, #2]
    1e90:	2b00      	cmp	r3, #0
    1e92:	d103      	bne.n	1e9c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1e94:	2380      	movs	r3, #128	; 0x80
    1e96:	029b      	lsls	r3, r3, #10
    1e98:	431c      	orrs	r4, r3
    1e9a:	e002      	b.n	1ea2 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1e9c:	23c0      	movs	r3, #192	; 0xc0
    1e9e:	02db      	lsls	r3, r3, #11
    1ea0:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ea2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ea4:	7853      	ldrb	r3, [r2, #1]
    1ea6:	3b01      	subs	r3, #1
    1ea8:	2b01      	cmp	r3, #1
    1eaa:	d812      	bhi.n	1ed2 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1eac:	4b18      	ldr	r3, [pc, #96]	; (1f10 <_system_pinmux_config+0xa4>)
    1eae:	401c      	ands	r4, r3
    1eb0:	e00f      	b.n	1ed2 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1eb2:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1eb4:	040b      	lsls	r3, r1, #16
    1eb6:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1eb8:	24a0      	movs	r4, #160	; 0xa0
    1eba:	05e4      	lsls	r4, r4, #23
    1ebc:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ebe:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ec0:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ec2:	24d0      	movs	r4, #208	; 0xd0
    1ec4:	0624      	lsls	r4, r4, #24
    1ec6:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ec8:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1eca:	78d3      	ldrb	r3, [r2, #3]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d018      	beq.n	1f02 <_system_pinmux_config+0x96>
    1ed0:	e01c      	b.n	1f0c <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ed2:	040b      	lsls	r3, r1, #16
    1ed4:	0c1b      	lsrs	r3, r3, #16
    1ed6:	25a0      	movs	r5, #160	; 0xa0
    1ed8:	05ed      	lsls	r5, r5, #23
    1eda:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1edc:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ede:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ee0:	0c0b      	lsrs	r3, r1, #16
    1ee2:	25d0      	movs	r5, #208	; 0xd0
    1ee4:	062d      	lsls	r5, r5, #24
    1ee6:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ee8:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1eea:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1eec:	78d3      	ldrb	r3, [r2, #3]
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d10c      	bne.n	1f0c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ef2:	0363      	lsls	r3, r4, #13
    1ef4:	d505      	bpl.n	1f02 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ef6:	7893      	ldrb	r3, [r2, #2]
    1ef8:	2b01      	cmp	r3, #1
    1efa:	d101      	bne.n	1f00 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1efc:	6181      	str	r1, [r0, #24]
    1efe:	e000      	b.n	1f02 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1f00:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f02:	7853      	ldrb	r3, [r2, #1]
    1f04:	3b01      	subs	r3, #1
    1f06:	2b01      	cmp	r3, #1
    1f08:	d800      	bhi.n	1f0c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1f0a:	6081      	str	r1, [r0, #8]
		}
	}
}
    1f0c:	bd30      	pop	{r4, r5, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	fffbffff 	.word	0xfffbffff

00001f14 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1f14:	b508      	push	{r3, lr}
    1f16:	1c03      	adds	r3, r0, #0
    1f18:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f1a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1f1c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f1e:	2900      	cmp	r1, #0
    1f20:	d104      	bne.n	1f2c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1f22:	0958      	lsrs	r0, r3, #5
    1f24:	01c0      	lsls	r0, r0, #7
    1f26:	4905      	ldr	r1, [pc, #20]	; (1f3c <system_pinmux_pin_set_config+0x28>)
    1f28:	468c      	mov	ip, r1
    1f2a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f2c:	211f      	movs	r1, #31
    1f2e:	400b      	ands	r3, r1
    1f30:	391e      	subs	r1, #30
    1f32:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1f34:	4b02      	ldr	r3, [pc, #8]	; (1f40 <system_pinmux_pin_set_config+0x2c>)
    1f36:	4798      	blx	r3
}
    1f38:	bd08      	pop	{r3, pc}
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	40002800 	.word	0x40002800
    1f40:	00001e6d 	.word	0x00001e6d

00001f44 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1f44:	4770      	bx	lr
    1f46:	46c0      	nop			; (mov r8, r8)

00001f48 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f48:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f4a:	4b05      	ldr	r3, [pc, #20]	; (1f60 <system_init+0x18>)
    1f4c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1f4e:	4b05      	ldr	r3, [pc, #20]	; (1f64 <system_init+0x1c>)
    1f50:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f52:	4b05      	ldr	r3, [pc, #20]	; (1f68 <system_init+0x20>)
    1f54:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1f56:	4b05      	ldr	r3, [pc, #20]	; (1f6c <system_init+0x24>)
    1f58:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1f5a:	4b05      	ldr	r3, [pc, #20]	; (1f70 <system_init+0x28>)
    1f5c:	4798      	blx	r3
}
    1f5e:	bd08      	pop	{r3, pc}
    1f60:	00001ad5 	.word	0x00001ad5
    1f64:	0000185d 	.word	0x0000185d
    1f68:	00000361 	.word	0x00000361
    1f6c:	00000435 	.word	0x00000435
    1f70:	00001f45 	.word	0x00001f45

00001f74 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1f74:	e7fe      	b.n	1f74 <Dummy_Handler>
    1f76:	46c0      	nop			; (mov r8, r8)

00001f78 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1f78:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1f7a:	4b1d      	ldr	r3, [pc, #116]	; (1ff0 <Reset_Handler+0x78>)
    1f7c:	4a1d      	ldr	r2, [pc, #116]	; (1ff4 <Reset_Handler+0x7c>)
    1f7e:	429a      	cmp	r2, r3
    1f80:	d003      	beq.n	1f8a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1f82:	4b1d      	ldr	r3, [pc, #116]	; (1ff8 <Reset_Handler+0x80>)
    1f84:	4a1a      	ldr	r2, [pc, #104]	; (1ff0 <Reset_Handler+0x78>)
    1f86:	429a      	cmp	r2, r3
    1f88:	d304      	bcc.n	1f94 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1f8a:	4b1c      	ldr	r3, [pc, #112]	; (1ffc <Reset_Handler+0x84>)
    1f8c:	4a1c      	ldr	r2, [pc, #112]	; (2000 <STACK_SIZE>)
    1f8e:	429a      	cmp	r2, r3
    1f90:	d310      	bcc.n	1fb4 <Reset_Handler+0x3c>
    1f92:	e01e      	b.n	1fd2 <Reset_Handler+0x5a>
    1f94:	4a1b      	ldr	r2, [pc, #108]	; (2004 <STACK_SIZE+0x4>)
    1f96:	4b18      	ldr	r3, [pc, #96]	; (1ff8 <Reset_Handler+0x80>)
    1f98:	3303      	adds	r3, #3
    1f9a:	1a9b      	subs	r3, r3, r2
    1f9c:	089b      	lsrs	r3, r3, #2
    1f9e:	3301      	adds	r3, #1
    1fa0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1fa2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1fa4:	4812      	ldr	r0, [pc, #72]	; (1ff0 <Reset_Handler+0x78>)
    1fa6:	4913      	ldr	r1, [pc, #76]	; (1ff4 <Reset_Handler+0x7c>)
    1fa8:	588c      	ldr	r4, [r1, r2]
    1faa:	5084      	str	r4, [r0, r2]
    1fac:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1fae:	429a      	cmp	r2, r3
    1fb0:	d1fa      	bne.n	1fa8 <Reset_Handler+0x30>
    1fb2:	e7ea      	b.n	1f8a <Reset_Handler+0x12>
    1fb4:	4a14      	ldr	r2, [pc, #80]	; (2008 <STACK_SIZE+0x8>)
    1fb6:	4b11      	ldr	r3, [pc, #68]	; (1ffc <Reset_Handler+0x84>)
    1fb8:	3303      	adds	r3, #3
    1fba:	1a9b      	subs	r3, r3, r2
    1fbc:	089b      	lsrs	r3, r3, #2
    1fbe:	3301      	adds	r3, #1
    1fc0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1fc2:	2200      	movs	r2, #0
                *pDest++ = 0;
    1fc4:	480e      	ldr	r0, [pc, #56]	; (2000 <STACK_SIZE>)
    1fc6:	2100      	movs	r1, #0
    1fc8:	1814      	adds	r4, r2, r0
    1fca:	6021      	str	r1, [r4, #0]
    1fcc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1fce:	429a      	cmp	r2, r3
    1fd0:	d1fa      	bne.n	1fc8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1fd2:	4a0e      	ldr	r2, [pc, #56]	; (200c <STACK_SIZE+0xc>)
    1fd4:	21ff      	movs	r1, #255	; 0xff
    1fd6:	4b0e      	ldr	r3, [pc, #56]	; (2010 <STACK_SIZE+0x10>)
    1fd8:	438b      	bics	r3, r1
    1fda:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1fdc:	4a0d      	ldr	r2, [pc, #52]	; (2014 <STACK_SIZE+0x14>)
    1fde:	6851      	ldr	r1, [r2, #4]
    1fe0:	2380      	movs	r3, #128	; 0x80
    1fe2:	430b      	orrs	r3, r1
    1fe4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1fe6:	4b0c      	ldr	r3, [pc, #48]	; (2018 <STACK_SIZE+0x18>)
    1fe8:	4798      	blx	r3

        /* Branch to main function */
        main();
    1fea:	4b0c      	ldr	r3, [pc, #48]	; (201c <STACK_SIZE+0x1c>)
    1fec:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1fee:	e7fe      	b.n	1fee <Reset_Handler+0x76>
    1ff0:	20000000 	.word	0x20000000
    1ff4:	00002dc0 	.word	0x00002dc0
    1ff8:	2000007c 	.word	0x2000007c
    1ffc:	2000016c 	.word	0x2000016c
    2000:	2000007c 	.word	0x2000007c
    2004:	20000004 	.word	0x20000004
    2008:	20000080 	.word	0x20000080
    200c:	e000ed00 	.word	0xe000ed00
    2010:	00000000 	.word	0x00000000
    2014:	41004000 	.word	0x41004000
    2018:	000023f9 	.word	0x000023f9
    201c:	00002051 	.word	0x00002051

00002020 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2020:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2022:	4a06      	ldr	r2, [pc, #24]	; (203c <_sbrk+0x1c>)
    2024:	6812      	ldr	r2, [r2, #0]
    2026:	2a00      	cmp	r2, #0
    2028:	d102      	bne.n	2030 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    202a:	4905      	ldr	r1, [pc, #20]	; (2040 <_sbrk+0x20>)
    202c:	4a03      	ldr	r2, [pc, #12]	; (203c <_sbrk+0x1c>)
    202e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    2030:	4a02      	ldr	r2, [pc, #8]	; (203c <_sbrk+0x1c>)
    2032:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2034:	18c3      	adds	r3, r0, r3
    2036:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2038:	4770      	bx	lr
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	200000c0 	.word	0x200000c0
    2040:	20002170 	.word	0x20002170

00002044 <extint_callback>:
		system_sleep();
	}
}

void extint_callback(void)
{
    2044:	b508      	push	{r3, lr}
	ADT7420_read_temp();
    2046:	4b01      	ldr	r3, [pc, #4]	; (204c <extint_callback+0x8>)
    2048:	4798      	blx	r3
}
    204a:	bd08      	pop	{r3, pc}
    204c:	000001ad 	.word	0x000001ad

00002050 <main>:
#include "HAL.h"

void extint_callback(void);

int main (void)
{
    2050:	b508      	push	{r3, lr}
	system_init();
    2052:	4b0b      	ldr	r3, [pc, #44]	; (2080 <main+0x30>)
    2054:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    2056:	2201      	movs	r2, #1
    2058:	4b0a      	ldr	r3, [pc, #40]	; (2084 <main+0x34>)
    205a:	701a      	strb	r2, [r3, #0]
    205c:	f3bf 8f5f 	dmb	sy
    2060:	b662      	cpsie	i
	system_interrupt_enable_global();
   	configure_i2c();
    2062:	4b09      	ldr	r3, [pc, #36]	; (2088 <main+0x38>)
    2064:	4798      	blx	r3
   	configure_ADT7420();
    2066:	4b09      	ldr	r3, [pc, #36]	; (208c <main+0x3c>)
    2068:	4798      	blx	r3
	configure_SP1ML();
    206a:	4b09      	ldr	r3, [pc, #36]	; (2090 <main+0x40>)
    206c:	4798      	blx	r3
  	configure_mag_sw_int(extint_callback);
    206e:	4809      	ldr	r0, [pc, #36]	; (2094 <main+0x44>)
    2070:	4b09      	ldr	r3, [pc, #36]	; (2098 <main+0x48>)
    2072:	4798      	blx	r3
 	configure_sleepmode();
    2074:	4b09      	ldr	r3, [pc, #36]	; (209c <main+0x4c>)
    2076:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2078:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    207c:	bf30      	wfi
    207e:	e7fb      	b.n	2078 <main+0x28>
    2080:	00001f49 	.word	0x00001f49
    2084:	20000014 	.word	0x20000014
    2088:	00000e21 	.word	0x00000e21
    208c:	00000115 	.word	0x00000115
    2090:	00000f71 	.word	0x00000f71
    2094:	00002045 	.word	0x00002045
    2098:	00000eb9 	.word	0x00000eb9
    209c:	00000dc5 	.word	0x00000dc5

000020a0 <__aeabi_uidiv>:
    20a0:	2200      	movs	r2, #0
    20a2:	0843      	lsrs	r3, r0, #1
    20a4:	428b      	cmp	r3, r1
    20a6:	d374      	bcc.n	2192 <__aeabi_uidiv+0xf2>
    20a8:	0903      	lsrs	r3, r0, #4
    20aa:	428b      	cmp	r3, r1
    20ac:	d35f      	bcc.n	216e <__aeabi_uidiv+0xce>
    20ae:	0a03      	lsrs	r3, r0, #8
    20b0:	428b      	cmp	r3, r1
    20b2:	d344      	bcc.n	213e <__aeabi_uidiv+0x9e>
    20b4:	0b03      	lsrs	r3, r0, #12
    20b6:	428b      	cmp	r3, r1
    20b8:	d328      	bcc.n	210c <__aeabi_uidiv+0x6c>
    20ba:	0c03      	lsrs	r3, r0, #16
    20bc:	428b      	cmp	r3, r1
    20be:	d30d      	bcc.n	20dc <__aeabi_uidiv+0x3c>
    20c0:	22ff      	movs	r2, #255	; 0xff
    20c2:	0209      	lsls	r1, r1, #8
    20c4:	ba12      	rev	r2, r2
    20c6:	0c03      	lsrs	r3, r0, #16
    20c8:	428b      	cmp	r3, r1
    20ca:	d302      	bcc.n	20d2 <__aeabi_uidiv+0x32>
    20cc:	1212      	asrs	r2, r2, #8
    20ce:	0209      	lsls	r1, r1, #8
    20d0:	d065      	beq.n	219e <__aeabi_uidiv+0xfe>
    20d2:	0b03      	lsrs	r3, r0, #12
    20d4:	428b      	cmp	r3, r1
    20d6:	d319      	bcc.n	210c <__aeabi_uidiv+0x6c>
    20d8:	e000      	b.n	20dc <__aeabi_uidiv+0x3c>
    20da:	0a09      	lsrs	r1, r1, #8
    20dc:	0bc3      	lsrs	r3, r0, #15
    20de:	428b      	cmp	r3, r1
    20e0:	d301      	bcc.n	20e6 <__aeabi_uidiv+0x46>
    20e2:	03cb      	lsls	r3, r1, #15
    20e4:	1ac0      	subs	r0, r0, r3
    20e6:	4152      	adcs	r2, r2
    20e8:	0b83      	lsrs	r3, r0, #14
    20ea:	428b      	cmp	r3, r1
    20ec:	d301      	bcc.n	20f2 <__aeabi_uidiv+0x52>
    20ee:	038b      	lsls	r3, r1, #14
    20f0:	1ac0      	subs	r0, r0, r3
    20f2:	4152      	adcs	r2, r2
    20f4:	0b43      	lsrs	r3, r0, #13
    20f6:	428b      	cmp	r3, r1
    20f8:	d301      	bcc.n	20fe <__aeabi_uidiv+0x5e>
    20fa:	034b      	lsls	r3, r1, #13
    20fc:	1ac0      	subs	r0, r0, r3
    20fe:	4152      	adcs	r2, r2
    2100:	0b03      	lsrs	r3, r0, #12
    2102:	428b      	cmp	r3, r1
    2104:	d301      	bcc.n	210a <__aeabi_uidiv+0x6a>
    2106:	030b      	lsls	r3, r1, #12
    2108:	1ac0      	subs	r0, r0, r3
    210a:	4152      	adcs	r2, r2
    210c:	0ac3      	lsrs	r3, r0, #11
    210e:	428b      	cmp	r3, r1
    2110:	d301      	bcc.n	2116 <__aeabi_uidiv+0x76>
    2112:	02cb      	lsls	r3, r1, #11
    2114:	1ac0      	subs	r0, r0, r3
    2116:	4152      	adcs	r2, r2
    2118:	0a83      	lsrs	r3, r0, #10
    211a:	428b      	cmp	r3, r1
    211c:	d301      	bcc.n	2122 <__aeabi_uidiv+0x82>
    211e:	028b      	lsls	r3, r1, #10
    2120:	1ac0      	subs	r0, r0, r3
    2122:	4152      	adcs	r2, r2
    2124:	0a43      	lsrs	r3, r0, #9
    2126:	428b      	cmp	r3, r1
    2128:	d301      	bcc.n	212e <__aeabi_uidiv+0x8e>
    212a:	024b      	lsls	r3, r1, #9
    212c:	1ac0      	subs	r0, r0, r3
    212e:	4152      	adcs	r2, r2
    2130:	0a03      	lsrs	r3, r0, #8
    2132:	428b      	cmp	r3, r1
    2134:	d301      	bcc.n	213a <__aeabi_uidiv+0x9a>
    2136:	020b      	lsls	r3, r1, #8
    2138:	1ac0      	subs	r0, r0, r3
    213a:	4152      	adcs	r2, r2
    213c:	d2cd      	bcs.n	20da <__aeabi_uidiv+0x3a>
    213e:	09c3      	lsrs	r3, r0, #7
    2140:	428b      	cmp	r3, r1
    2142:	d301      	bcc.n	2148 <__aeabi_uidiv+0xa8>
    2144:	01cb      	lsls	r3, r1, #7
    2146:	1ac0      	subs	r0, r0, r3
    2148:	4152      	adcs	r2, r2
    214a:	0983      	lsrs	r3, r0, #6
    214c:	428b      	cmp	r3, r1
    214e:	d301      	bcc.n	2154 <__aeabi_uidiv+0xb4>
    2150:	018b      	lsls	r3, r1, #6
    2152:	1ac0      	subs	r0, r0, r3
    2154:	4152      	adcs	r2, r2
    2156:	0943      	lsrs	r3, r0, #5
    2158:	428b      	cmp	r3, r1
    215a:	d301      	bcc.n	2160 <__aeabi_uidiv+0xc0>
    215c:	014b      	lsls	r3, r1, #5
    215e:	1ac0      	subs	r0, r0, r3
    2160:	4152      	adcs	r2, r2
    2162:	0903      	lsrs	r3, r0, #4
    2164:	428b      	cmp	r3, r1
    2166:	d301      	bcc.n	216c <__aeabi_uidiv+0xcc>
    2168:	010b      	lsls	r3, r1, #4
    216a:	1ac0      	subs	r0, r0, r3
    216c:	4152      	adcs	r2, r2
    216e:	08c3      	lsrs	r3, r0, #3
    2170:	428b      	cmp	r3, r1
    2172:	d301      	bcc.n	2178 <__aeabi_uidiv+0xd8>
    2174:	00cb      	lsls	r3, r1, #3
    2176:	1ac0      	subs	r0, r0, r3
    2178:	4152      	adcs	r2, r2
    217a:	0883      	lsrs	r3, r0, #2
    217c:	428b      	cmp	r3, r1
    217e:	d301      	bcc.n	2184 <__aeabi_uidiv+0xe4>
    2180:	008b      	lsls	r3, r1, #2
    2182:	1ac0      	subs	r0, r0, r3
    2184:	4152      	adcs	r2, r2
    2186:	0843      	lsrs	r3, r0, #1
    2188:	428b      	cmp	r3, r1
    218a:	d301      	bcc.n	2190 <__aeabi_uidiv+0xf0>
    218c:	004b      	lsls	r3, r1, #1
    218e:	1ac0      	subs	r0, r0, r3
    2190:	4152      	adcs	r2, r2
    2192:	1a41      	subs	r1, r0, r1
    2194:	d200      	bcs.n	2198 <__aeabi_uidiv+0xf8>
    2196:	4601      	mov	r1, r0
    2198:	4152      	adcs	r2, r2
    219a:	4610      	mov	r0, r2
    219c:	4770      	bx	lr
    219e:	e7ff      	b.n	21a0 <__aeabi_uidiv+0x100>
    21a0:	b501      	push	{r0, lr}
    21a2:	2000      	movs	r0, #0
    21a4:	f000 f8fc 	bl	23a0 <__aeabi_idiv0>
    21a8:	bd02      	pop	{r1, pc}
    21aa:	46c0      	nop			; (mov r8, r8)

000021ac <__aeabi_uidivmod>:
    21ac:	2900      	cmp	r1, #0
    21ae:	d0f7      	beq.n	21a0 <__aeabi_uidiv+0x100>
    21b0:	b503      	push	{r0, r1, lr}
    21b2:	f7ff ff75 	bl	20a0 <__aeabi_uidiv>
    21b6:	bc0e      	pop	{r1, r2, r3}
    21b8:	4342      	muls	r2, r0
    21ba:	1a89      	subs	r1, r1, r2
    21bc:	4718      	bx	r3
    21be:	46c0      	nop			; (mov r8, r8)

000021c0 <__aeabi_idiv>:
    21c0:	4603      	mov	r3, r0
    21c2:	430b      	orrs	r3, r1
    21c4:	d47f      	bmi.n	22c6 <__aeabi_idiv+0x106>
    21c6:	2200      	movs	r2, #0
    21c8:	0843      	lsrs	r3, r0, #1
    21ca:	428b      	cmp	r3, r1
    21cc:	d374      	bcc.n	22b8 <__aeabi_idiv+0xf8>
    21ce:	0903      	lsrs	r3, r0, #4
    21d0:	428b      	cmp	r3, r1
    21d2:	d35f      	bcc.n	2294 <__aeabi_idiv+0xd4>
    21d4:	0a03      	lsrs	r3, r0, #8
    21d6:	428b      	cmp	r3, r1
    21d8:	d344      	bcc.n	2264 <__aeabi_idiv+0xa4>
    21da:	0b03      	lsrs	r3, r0, #12
    21dc:	428b      	cmp	r3, r1
    21de:	d328      	bcc.n	2232 <__aeabi_idiv+0x72>
    21e0:	0c03      	lsrs	r3, r0, #16
    21e2:	428b      	cmp	r3, r1
    21e4:	d30d      	bcc.n	2202 <__aeabi_idiv+0x42>
    21e6:	22ff      	movs	r2, #255	; 0xff
    21e8:	0209      	lsls	r1, r1, #8
    21ea:	ba12      	rev	r2, r2
    21ec:	0c03      	lsrs	r3, r0, #16
    21ee:	428b      	cmp	r3, r1
    21f0:	d302      	bcc.n	21f8 <__aeabi_idiv+0x38>
    21f2:	1212      	asrs	r2, r2, #8
    21f4:	0209      	lsls	r1, r1, #8
    21f6:	d065      	beq.n	22c4 <__aeabi_idiv+0x104>
    21f8:	0b03      	lsrs	r3, r0, #12
    21fa:	428b      	cmp	r3, r1
    21fc:	d319      	bcc.n	2232 <__aeabi_idiv+0x72>
    21fe:	e000      	b.n	2202 <__aeabi_idiv+0x42>
    2200:	0a09      	lsrs	r1, r1, #8
    2202:	0bc3      	lsrs	r3, r0, #15
    2204:	428b      	cmp	r3, r1
    2206:	d301      	bcc.n	220c <__aeabi_idiv+0x4c>
    2208:	03cb      	lsls	r3, r1, #15
    220a:	1ac0      	subs	r0, r0, r3
    220c:	4152      	adcs	r2, r2
    220e:	0b83      	lsrs	r3, r0, #14
    2210:	428b      	cmp	r3, r1
    2212:	d301      	bcc.n	2218 <__aeabi_idiv+0x58>
    2214:	038b      	lsls	r3, r1, #14
    2216:	1ac0      	subs	r0, r0, r3
    2218:	4152      	adcs	r2, r2
    221a:	0b43      	lsrs	r3, r0, #13
    221c:	428b      	cmp	r3, r1
    221e:	d301      	bcc.n	2224 <__aeabi_idiv+0x64>
    2220:	034b      	lsls	r3, r1, #13
    2222:	1ac0      	subs	r0, r0, r3
    2224:	4152      	adcs	r2, r2
    2226:	0b03      	lsrs	r3, r0, #12
    2228:	428b      	cmp	r3, r1
    222a:	d301      	bcc.n	2230 <__aeabi_idiv+0x70>
    222c:	030b      	lsls	r3, r1, #12
    222e:	1ac0      	subs	r0, r0, r3
    2230:	4152      	adcs	r2, r2
    2232:	0ac3      	lsrs	r3, r0, #11
    2234:	428b      	cmp	r3, r1
    2236:	d301      	bcc.n	223c <__aeabi_idiv+0x7c>
    2238:	02cb      	lsls	r3, r1, #11
    223a:	1ac0      	subs	r0, r0, r3
    223c:	4152      	adcs	r2, r2
    223e:	0a83      	lsrs	r3, r0, #10
    2240:	428b      	cmp	r3, r1
    2242:	d301      	bcc.n	2248 <__aeabi_idiv+0x88>
    2244:	028b      	lsls	r3, r1, #10
    2246:	1ac0      	subs	r0, r0, r3
    2248:	4152      	adcs	r2, r2
    224a:	0a43      	lsrs	r3, r0, #9
    224c:	428b      	cmp	r3, r1
    224e:	d301      	bcc.n	2254 <__aeabi_idiv+0x94>
    2250:	024b      	lsls	r3, r1, #9
    2252:	1ac0      	subs	r0, r0, r3
    2254:	4152      	adcs	r2, r2
    2256:	0a03      	lsrs	r3, r0, #8
    2258:	428b      	cmp	r3, r1
    225a:	d301      	bcc.n	2260 <__aeabi_idiv+0xa0>
    225c:	020b      	lsls	r3, r1, #8
    225e:	1ac0      	subs	r0, r0, r3
    2260:	4152      	adcs	r2, r2
    2262:	d2cd      	bcs.n	2200 <__aeabi_idiv+0x40>
    2264:	09c3      	lsrs	r3, r0, #7
    2266:	428b      	cmp	r3, r1
    2268:	d301      	bcc.n	226e <__aeabi_idiv+0xae>
    226a:	01cb      	lsls	r3, r1, #7
    226c:	1ac0      	subs	r0, r0, r3
    226e:	4152      	adcs	r2, r2
    2270:	0983      	lsrs	r3, r0, #6
    2272:	428b      	cmp	r3, r1
    2274:	d301      	bcc.n	227a <__aeabi_idiv+0xba>
    2276:	018b      	lsls	r3, r1, #6
    2278:	1ac0      	subs	r0, r0, r3
    227a:	4152      	adcs	r2, r2
    227c:	0943      	lsrs	r3, r0, #5
    227e:	428b      	cmp	r3, r1
    2280:	d301      	bcc.n	2286 <__aeabi_idiv+0xc6>
    2282:	014b      	lsls	r3, r1, #5
    2284:	1ac0      	subs	r0, r0, r3
    2286:	4152      	adcs	r2, r2
    2288:	0903      	lsrs	r3, r0, #4
    228a:	428b      	cmp	r3, r1
    228c:	d301      	bcc.n	2292 <__aeabi_idiv+0xd2>
    228e:	010b      	lsls	r3, r1, #4
    2290:	1ac0      	subs	r0, r0, r3
    2292:	4152      	adcs	r2, r2
    2294:	08c3      	lsrs	r3, r0, #3
    2296:	428b      	cmp	r3, r1
    2298:	d301      	bcc.n	229e <__aeabi_idiv+0xde>
    229a:	00cb      	lsls	r3, r1, #3
    229c:	1ac0      	subs	r0, r0, r3
    229e:	4152      	adcs	r2, r2
    22a0:	0883      	lsrs	r3, r0, #2
    22a2:	428b      	cmp	r3, r1
    22a4:	d301      	bcc.n	22aa <__aeabi_idiv+0xea>
    22a6:	008b      	lsls	r3, r1, #2
    22a8:	1ac0      	subs	r0, r0, r3
    22aa:	4152      	adcs	r2, r2
    22ac:	0843      	lsrs	r3, r0, #1
    22ae:	428b      	cmp	r3, r1
    22b0:	d301      	bcc.n	22b6 <__aeabi_idiv+0xf6>
    22b2:	004b      	lsls	r3, r1, #1
    22b4:	1ac0      	subs	r0, r0, r3
    22b6:	4152      	adcs	r2, r2
    22b8:	1a41      	subs	r1, r0, r1
    22ba:	d200      	bcs.n	22be <__aeabi_idiv+0xfe>
    22bc:	4601      	mov	r1, r0
    22be:	4152      	adcs	r2, r2
    22c0:	4610      	mov	r0, r2
    22c2:	4770      	bx	lr
    22c4:	e05d      	b.n	2382 <__aeabi_idiv+0x1c2>
    22c6:	0fca      	lsrs	r2, r1, #31
    22c8:	d000      	beq.n	22cc <__aeabi_idiv+0x10c>
    22ca:	4249      	negs	r1, r1
    22cc:	1003      	asrs	r3, r0, #32
    22ce:	d300      	bcc.n	22d2 <__aeabi_idiv+0x112>
    22d0:	4240      	negs	r0, r0
    22d2:	4053      	eors	r3, r2
    22d4:	2200      	movs	r2, #0
    22d6:	469c      	mov	ip, r3
    22d8:	0903      	lsrs	r3, r0, #4
    22da:	428b      	cmp	r3, r1
    22dc:	d32d      	bcc.n	233a <__aeabi_idiv+0x17a>
    22de:	0a03      	lsrs	r3, r0, #8
    22e0:	428b      	cmp	r3, r1
    22e2:	d312      	bcc.n	230a <__aeabi_idiv+0x14a>
    22e4:	22fc      	movs	r2, #252	; 0xfc
    22e6:	0189      	lsls	r1, r1, #6
    22e8:	ba12      	rev	r2, r2
    22ea:	0a03      	lsrs	r3, r0, #8
    22ec:	428b      	cmp	r3, r1
    22ee:	d30c      	bcc.n	230a <__aeabi_idiv+0x14a>
    22f0:	0189      	lsls	r1, r1, #6
    22f2:	1192      	asrs	r2, r2, #6
    22f4:	428b      	cmp	r3, r1
    22f6:	d308      	bcc.n	230a <__aeabi_idiv+0x14a>
    22f8:	0189      	lsls	r1, r1, #6
    22fa:	1192      	asrs	r2, r2, #6
    22fc:	428b      	cmp	r3, r1
    22fe:	d304      	bcc.n	230a <__aeabi_idiv+0x14a>
    2300:	0189      	lsls	r1, r1, #6
    2302:	d03a      	beq.n	237a <__aeabi_idiv+0x1ba>
    2304:	1192      	asrs	r2, r2, #6
    2306:	e000      	b.n	230a <__aeabi_idiv+0x14a>
    2308:	0989      	lsrs	r1, r1, #6
    230a:	09c3      	lsrs	r3, r0, #7
    230c:	428b      	cmp	r3, r1
    230e:	d301      	bcc.n	2314 <__aeabi_idiv+0x154>
    2310:	01cb      	lsls	r3, r1, #7
    2312:	1ac0      	subs	r0, r0, r3
    2314:	4152      	adcs	r2, r2
    2316:	0983      	lsrs	r3, r0, #6
    2318:	428b      	cmp	r3, r1
    231a:	d301      	bcc.n	2320 <__aeabi_idiv+0x160>
    231c:	018b      	lsls	r3, r1, #6
    231e:	1ac0      	subs	r0, r0, r3
    2320:	4152      	adcs	r2, r2
    2322:	0943      	lsrs	r3, r0, #5
    2324:	428b      	cmp	r3, r1
    2326:	d301      	bcc.n	232c <__aeabi_idiv+0x16c>
    2328:	014b      	lsls	r3, r1, #5
    232a:	1ac0      	subs	r0, r0, r3
    232c:	4152      	adcs	r2, r2
    232e:	0903      	lsrs	r3, r0, #4
    2330:	428b      	cmp	r3, r1
    2332:	d301      	bcc.n	2338 <__aeabi_idiv+0x178>
    2334:	010b      	lsls	r3, r1, #4
    2336:	1ac0      	subs	r0, r0, r3
    2338:	4152      	adcs	r2, r2
    233a:	08c3      	lsrs	r3, r0, #3
    233c:	428b      	cmp	r3, r1
    233e:	d301      	bcc.n	2344 <__aeabi_idiv+0x184>
    2340:	00cb      	lsls	r3, r1, #3
    2342:	1ac0      	subs	r0, r0, r3
    2344:	4152      	adcs	r2, r2
    2346:	0883      	lsrs	r3, r0, #2
    2348:	428b      	cmp	r3, r1
    234a:	d301      	bcc.n	2350 <__aeabi_idiv+0x190>
    234c:	008b      	lsls	r3, r1, #2
    234e:	1ac0      	subs	r0, r0, r3
    2350:	4152      	adcs	r2, r2
    2352:	d2d9      	bcs.n	2308 <__aeabi_idiv+0x148>
    2354:	0843      	lsrs	r3, r0, #1
    2356:	428b      	cmp	r3, r1
    2358:	d301      	bcc.n	235e <__aeabi_idiv+0x19e>
    235a:	004b      	lsls	r3, r1, #1
    235c:	1ac0      	subs	r0, r0, r3
    235e:	4152      	adcs	r2, r2
    2360:	1a41      	subs	r1, r0, r1
    2362:	d200      	bcs.n	2366 <__aeabi_idiv+0x1a6>
    2364:	4601      	mov	r1, r0
    2366:	4663      	mov	r3, ip
    2368:	4152      	adcs	r2, r2
    236a:	105b      	asrs	r3, r3, #1
    236c:	4610      	mov	r0, r2
    236e:	d301      	bcc.n	2374 <__aeabi_idiv+0x1b4>
    2370:	4240      	negs	r0, r0
    2372:	2b00      	cmp	r3, #0
    2374:	d500      	bpl.n	2378 <__aeabi_idiv+0x1b8>
    2376:	4249      	negs	r1, r1
    2378:	4770      	bx	lr
    237a:	4663      	mov	r3, ip
    237c:	105b      	asrs	r3, r3, #1
    237e:	d300      	bcc.n	2382 <__aeabi_idiv+0x1c2>
    2380:	4240      	negs	r0, r0
    2382:	b501      	push	{r0, lr}
    2384:	2000      	movs	r0, #0
    2386:	f000 f80b 	bl	23a0 <__aeabi_idiv0>
    238a:	bd02      	pop	{r1, pc}

0000238c <__aeabi_idivmod>:
    238c:	2900      	cmp	r1, #0
    238e:	d0f8      	beq.n	2382 <__aeabi_idiv+0x1c2>
    2390:	b503      	push	{r0, r1, lr}
    2392:	f7ff ff15 	bl	21c0 <__aeabi_idiv>
    2396:	bc0e      	pop	{r1, r2, r3}
    2398:	4342      	muls	r2, r0
    239a:	1a89      	subs	r1, r1, r2
    239c:	4718      	bx	r3
    239e:	46c0      	nop			; (mov r8, r8)

000023a0 <__aeabi_idiv0>:
    23a0:	4770      	bx	lr
    23a2:	46c0      	nop			; (mov r8, r8)

000023a4 <__aeabi_lmul>:
    23a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23a6:	464f      	mov	r7, r9
    23a8:	4646      	mov	r6, r8
    23aa:	0405      	lsls	r5, r0, #16
    23ac:	0c2d      	lsrs	r5, r5, #16
    23ae:	1c2c      	adds	r4, r5, #0
    23b0:	b4c0      	push	{r6, r7}
    23b2:	0417      	lsls	r7, r2, #16
    23b4:	0c16      	lsrs	r6, r2, #16
    23b6:	0c3f      	lsrs	r7, r7, #16
    23b8:	4699      	mov	r9, r3
    23ba:	0c03      	lsrs	r3, r0, #16
    23bc:	437c      	muls	r4, r7
    23be:	4375      	muls	r5, r6
    23c0:	435f      	muls	r7, r3
    23c2:	4373      	muls	r3, r6
    23c4:	197d      	adds	r5, r7, r5
    23c6:	0c26      	lsrs	r6, r4, #16
    23c8:	19ad      	adds	r5, r5, r6
    23ca:	469c      	mov	ip, r3
    23cc:	42af      	cmp	r7, r5
    23ce:	d903      	bls.n	23d8 <__aeabi_lmul+0x34>
    23d0:	2380      	movs	r3, #128	; 0x80
    23d2:	025b      	lsls	r3, r3, #9
    23d4:	4698      	mov	r8, r3
    23d6:	44c4      	add	ip, r8
    23d8:	464b      	mov	r3, r9
    23da:	4351      	muls	r1, r2
    23dc:	4343      	muls	r3, r0
    23de:	0424      	lsls	r4, r4, #16
    23e0:	0c2e      	lsrs	r6, r5, #16
    23e2:	0c24      	lsrs	r4, r4, #16
    23e4:	042d      	lsls	r5, r5, #16
    23e6:	4466      	add	r6, ip
    23e8:	192c      	adds	r4, r5, r4
    23ea:	1859      	adds	r1, r3, r1
    23ec:	1989      	adds	r1, r1, r6
    23ee:	1c20      	adds	r0, r4, #0
    23f0:	bc0c      	pop	{r2, r3}
    23f2:	4690      	mov	r8, r2
    23f4:	4699      	mov	r9, r3
    23f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000023f8 <__libc_init_array>:
    23f8:	4b0e      	ldr	r3, [pc, #56]	; (2434 <__libc_init_array+0x3c>)
    23fa:	b570      	push	{r4, r5, r6, lr}
    23fc:	2500      	movs	r5, #0
    23fe:	1c1e      	adds	r6, r3, #0
    2400:	4c0d      	ldr	r4, [pc, #52]	; (2438 <__libc_init_array+0x40>)
    2402:	1ae4      	subs	r4, r4, r3
    2404:	10a4      	asrs	r4, r4, #2
    2406:	42a5      	cmp	r5, r4
    2408:	d004      	beq.n	2414 <__libc_init_array+0x1c>
    240a:	00ab      	lsls	r3, r5, #2
    240c:	58f3      	ldr	r3, [r6, r3]
    240e:	4798      	blx	r3
    2410:	3501      	adds	r5, #1
    2412:	e7f8      	b.n	2406 <__libc_init_array+0xe>
    2414:	f000 fcc4 	bl	2da0 <_init>
    2418:	4b08      	ldr	r3, [pc, #32]	; (243c <__libc_init_array+0x44>)
    241a:	2500      	movs	r5, #0
    241c:	1c1e      	adds	r6, r3, #0
    241e:	4c08      	ldr	r4, [pc, #32]	; (2440 <__libc_init_array+0x48>)
    2420:	1ae4      	subs	r4, r4, r3
    2422:	10a4      	asrs	r4, r4, #2
    2424:	42a5      	cmp	r5, r4
    2426:	d004      	beq.n	2432 <__libc_init_array+0x3a>
    2428:	00ab      	lsls	r3, r5, #2
    242a:	58f3      	ldr	r3, [r6, r3]
    242c:	4798      	blx	r3
    242e:	3501      	adds	r5, #1
    2430:	e7f8      	b.n	2424 <__libc_init_array+0x2c>
    2432:	bd70      	pop	{r4, r5, r6, pc}
    2434:	00002dac 	.word	0x00002dac
    2438:	00002dac 	.word	0x00002dac
    243c:	00002dac 	.word	0x00002dac
    2440:	00002db0 	.word	0x00002db0

00002444 <memcpy>:
    2444:	2300      	movs	r3, #0
    2446:	b510      	push	{r4, lr}
    2448:	4293      	cmp	r3, r2
    244a:	d003      	beq.n	2454 <memcpy+0x10>
    244c:	5ccc      	ldrb	r4, [r1, r3]
    244e:	54c4      	strb	r4, [r0, r3]
    2450:	3301      	adds	r3, #1
    2452:	e7f9      	b.n	2448 <memcpy+0x4>
    2454:	bd10      	pop	{r4, pc}
	...

00002458 <siprintf>:
    2458:	b40e      	push	{r1, r2, r3}
    245a:	b510      	push	{r4, lr}
    245c:	b09d      	sub	sp, #116	; 0x74
    245e:	a902      	add	r1, sp, #8
    2460:	9002      	str	r0, [sp, #8]
    2462:	6108      	str	r0, [r1, #16]
    2464:	480b      	ldr	r0, [pc, #44]	; (2494 <siprintf+0x3c>)
    2466:	2482      	movs	r4, #130	; 0x82
    2468:	6088      	str	r0, [r1, #8]
    246a:	6148      	str	r0, [r1, #20]
    246c:	2001      	movs	r0, #1
    246e:	4240      	negs	r0, r0
    2470:	ab1f      	add	r3, sp, #124	; 0x7c
    2472:	81c8      	strh	r0, [r1, #14]
    2474:	4808      	ldr	r0, [pc, #32]	; (2498 <siprintf+0x40>)
    2476:	cb04      	ldmia	r3!, {r2}
    2478:	00a4      	lsls	r4, r4, #2
    247a:	6800      	ldr	r0, [r0, #0]
    247c:	9301      	str	r3, [sp, #4]
    247e:	818c      	strh	r4, [r1, #12]
    2480:	f000 f8c4 	bl	260c <_svfiprintf_r>
    2484:	2300      	movs	r3, #0
    2486:	9a02      	ldr	r2, [sp, #8]
    2488:	7013      	strb	r3, [r2, #0]
    248a:	b01d      	add	sp, #116	; 0x74
    248c:	bc10      	pop	{r4}
    248e:	bc08      	pop	{r3}
    2490:	b003      	add	sp, #12
    2492:	4718      	bx	r3
    2494:	7fffffff 	.word	0x7fffffff
    2498:	20000078 	.word	0x20000078

0000249c <_malloc_r>:
    249c:	2303      	movs	r3, #3
    249e:	b570      	push	{r4, r5, r6, lr}
    24a0:	1ccc      	adds	r4, r1, #3
    24a2:	439c      	bics	r4, r3
    24a4:	3408      	adds	r4, #8
    24a6:	1c05      	adds	r5, r0, #0
    24a8:	2c0c      	cmp	r4, #12
    24aa:	d201      	bcs.n	24b0 <_malloc_r+0x14>
    24ac:	240c      	movs	r4, #12
    24ae:	e005      	b.n	24bc <_malloc_r+0x20>
    24b0:	2c00      	cmp	r4, #0
    24b2:	da03      	bge.n	24bc <_malloc_r+0x20>
    24b4:	230c      	movs	r3, #12
    24b6:	2000      	movs	r0, #0
    24b8:	602b      	str	r3, [r5, #0]
    24ba:	e042      	b.n	2542 <_malloc_r+0xa6>
    24bc:	428c      	cmp	r4, r1
    24be:	d3f9      	bcc.n	24b4 <_malloc_r+0x18>
    24c0:	4a20      	ldr	r2, [pc, #128]	; (2544 <_malloc_r+0xa8>)
    24c2:	6813      	ldr	r3, [r2, #0]
    24c4:	1c10      	adds	r0, r2, #0
    24c6:	1c19      	adds	r1, r3, #0
    24c8:	2900      	cmp	r1, #0
    24ca:	d013      	beq.n	24f4 <_malloc_r+0x58>
    24cc:	680a      	ldr	r2, [r1, #0]
    24ce:	1b12      	subs	r2, r2, r4
    24d0:	d40d      	bmi.n	24ee <_malloc_r+0x52>
    24d2:	2a0b      	cmp	r2, #11
    24d4:	d902      	bls.n	24dc <_malloc_r+0x40>
    24d6:	600a      	str	r2, [r1, #0]
    24d8:	188b      	adds	r3, r1, r2
    24da:	e01f      	b.n	251c <_malloc_r+0x80>
    24dc:	428b      	cmp	r3, r1
    24de:	d102      	bne.n	24e6 <_malloc_r+0x4a>
    24e0:	685a      	ldr	r2, [r3, #4]
    24e2:	6002      	str	r2, [r0, #0]
    24e4:	e01b      	b.n	251e <_malloc_r+0x82>
    24e6:	684a      	ldr	r2, [r1, #4]
    24e8:	605a      	str	r2, [r3, #4]
    24ea:	1c0b      	adds	r3, r1, #0
    24ec:	e017      	b.n	251e <_malloc_r+0x82>
    24ee:	1c0b      	adds	r3, r1, #0
    24f0:	6849      	ldr	r1, [r1, #4]
    24f2:	e7e9      	b.n	24c8 <_malloc_r+0x2c>
    24f4:	4e14      	ldr	r6, [pc, #80]	; (2548 <_malloc_r+0xac>)
    24f6:	6833      	ldr	r3, [r6, #0]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d103      	bne.n	2504 <_malloc_r+0x68>
    24fc:	1c28      	adds	r0, r5, #0
    24fe:	f000 fb01 	bl	2b04 <_sbrk_r>
    2502:	6030      	str	r0, [r6, #0]
    2504:	1c28      	adds	r0, r5, #0
    2506:	1c21      	adds	r1, r4, #0
    2508:	f000 fafc 	bl	2b04 <_sbrk_r>
    250c:	1c03      	adds	r3, r0, #0
    250e:	1c42      	adds	r2, r0, #1
    2510:	d0d0      	beq.n	24b4 <_malloc_r+0x18>
    2512:	2203      	movs	r2, #3
    2514:	1cc6      	adds	r6, r0, #3
    2516:	4396      	bics	r6, r2
    2518:	4286      	cmp	r6, r0
    251a:	d10a      	bne.n	2532 <_malloc_r+0x96>
    251c:	601c      	str	r4, [r3, #0]
    251e:	1c18      	adds	r0, r3, #0
    2520:	2107      	movs	r1, #7
    2522:	300b      	adds	r0, #11
    2524:	1d1a      	adds	r2, r3, #4
    2526:	4388      	bics	r0, r1
    2528:	1a82      	subs	r2, r0, r2
    252a:	d00a      	beq.n	2542 <_malloc_r+0xa6>
    252c:	4251      	negs	r1, r2
    252e:	5099      	str	r1, [r3, r2]
    2530:	e007      	b.n	2542 <_malloc_r+0xa6>
    2532:	1a31      	subs	r1, r6, r0
    2534:	1c28      	adds	r0, r5, #0
    2536:	f000 fae5 	bl	2b04 <_sbrk_r>
    253a:	1c43      	adds	r3, r0, #1
    253c:	d0ba      	beq.n	24b4 <_malloc_r+0x18>
    253e:	1c33      	adds	r3, r6, #0
    2540:	e7ec      	b.n	251c <_malloc_r+0x80>
    2542:	bd70      	pop	{r4, r5, r6, pc}
    2544:	200000c8 	.word	0x200000c8
    2548:	200000c4 	.word	0x200000c4

0000254c <__ssputs_r>:
    254c:	b5f0      	push	{r4, r5, r6, r7, lr}
    254e:	688e      	ldr	r6, [r1, #8]
    2550:	b085      	sub	sp, #20
    2552:	1c07      	adds	r7, r0, #0
    2554:	1c0c      	adds	r4, r1, #0
    2556:	9203      	str	r2, [sp, #12]
    2558:	9301      	str	r3, [sp, #4]
    255a:	42b3      	cmp	r3, r6
    255c:	d345      	bcc.n	25ea <__ssputs_r+0x9e>
    255e:	2390      	movs	r3, #144	; 0x90
    2560:	898a      	ldrh	r2, [r1, #12]
    2562:	00db      	lsls	r3, r3, #3
    2564:	421a      	tst	r2, r3
    2566:	d03d      	beq.n	25e4 <__ssputs_r+0x98>
    2568:	2503      	movs	r5, #3
    256a:	6909      	ldr	r1, [r1, #16]
    256c:	6823      	ldr	r3, [r4, #0]
    256e:	9801      	ldr	r0, [sp, #4]
    2570:	1a5b      	subs	r3, r3, r1
    2572:	9302      	str	r3, [sp, #8]
    2574:	6963      	ldr	r3, [r4, #20]
    2576:	435d      	muls	r5, r3
    2578:	0feb      	lsrs	r3, r5, #31
    257a:	195d      	adds	r5, r3, r5
    257c:	9b02      	ldr	r3, [sp, #8]
    257e:	106d      	asrs	r5, r5, #1
    2580:	3301      	adds	r3, #1
    2582:	181b      	adds	r3, r3, r0
    2584:	429d      	cmp	r5, r3
    2586:	d200      	bcs.n	258a <__ssputs_r+0x3e>
    2588:	1c1d      	adds	r5, r3, #0
    258a:	1c38      	adds	r0, r7, #0
    258c:	0553      	lsls	r3, r2, #21
    258e:	d50f      	bpl.n	25b0 <__ssputs_r+0x64>
    2590:	1c29      	adds	r1, r5, #0
    2592:	f7ff ff83 	bl	249c <_malloc_r>
    2596:	1e06      	subs	r6, r0, #0
    2598:	d013      	beq.n	25c2 <__ssputs_r+0x76>
    259a:	9a02      	ldr	r2, [sp, #8]
    259c:	6921      	ldr	r1, [r4, #16]
    259e:	f7ff ff51 	bl	2444 <memcpy>
    25a2:	89a2      	ldrh	r2, [r4, #12]
    25a4:	4b18      	ldr	r3, [pc, #96]	; (2608 <__ssputs_r+0xbc>)
    25a6:	4013      	ands	r3, r2
    25a8:	2280      	movs	r2, #128	; 0x80
    25aa:	4313      	orrs	r3, r2
    25ac:	81a3      	strh	r3, [r4, #12]
    25ae:	e011      	b.n	25d4 <__ssputs_r+0x88>
    25b0:	1c2a      	adds	r2, r5, #0
    25b2:	f000 fb1f 	bl	2bf4 <_realloc_r>
    25b6:	1e06      	subs	r6, r0, #0
    25b8:	d10c      	bne.n	25d4 <__ssputs_r+0x88>
    25ba:	1c38      	adds	r0, r7, #0
    25bc:	6921      	ldr	r1, [r4, #16]
    25be:	f000 fad3 	bl	2b68 <_free_r>
    25c2:	230c      	movs	r3, #12
    25c4:	2240      	movs	r2, #64	; 0x40
    25c6:	2001      	movs	r0, #1
    25c8:	603b      	str	r3, [r7, #0]
    25ca:	89a3      	ldrh	r3, [r4, #12]
    25cc:	4240      	negs	r0, r0
    25ce:	4313      	orrs	r3, r2
    25d0:	81a3      	strh	r3, [r4, #12]
    25d2:	e017      	b.n	2604 <__ssputs_r+0xb8>
    25d4:	9b02      	ldr	r3, [sp, #8]
    25d6:	6126      	str	r6, [r4, #16]
    25d8:	18f6      	adds	r6, r6, r3
    25da:	6026      	str	r6, [r4, #0]
    25dc:	6165      	str	r5, [r4, #20]
    25de:	9e01      	ldr	r6, [sp, #4]
    25e0:	1aed      	subs	r5, r5, r3
    25e2:	60a5      	str	r5, [r4, #8]
    25e4:	9b01      	ldr	r3, [sp, #4]
    25e6:	42b3      	cmp	r3, r6
    25e8:	d200      	bcs.n	25ec <__ssputs_r+0xa0>
    25ea:	9e01      	ldr	r6, [sp, #4]
    25ec:	1c32      	adds	r2, r6, #0
    25ee:	6820      	ldr	r0, [r4, #0]
    25f0:	9903      	ldr	r1, [sp, #12]
    25f2:	f000 faa4 	bl	2b3e <memmove>
    25f6:	2000      	movs	r0, #0
    25f8:	68a3      	ldr	r3, [r4, #8]
    25fa:	1b9b      	subs	r3, r3, r6
    25fc:	60a3      	str	r3, [r4, #8]
    25fe:	6823      	ldr	r3, [r4, #0]
    2600:	199e      	adds	r6, r3, r6
    2602:	6026      	str	r6, [r4, #0]
    2604:	b005      	add	sp, #20
    2606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2608:	fffffb7f 	.word	0xfffffb7f

0000260c <_svfiprintf_r>:
    260c:	b5f0      	push	{r4, r5, r6, r7, lr}
    260e:	b09f      	sub	sp, #124	; 0x7c
    2610:	9002      	str	r0, [sp, #8]
    2612:	9305      	str	r3, [sp, #20]
    2614:	898b      	ldrh	r3, [r1, #12]
    2616:	1c0e      	adds	r6, r1, #0
    2618:	1c17      	adds	r7, r2, #0
    261a:	061b      	lsls	r3, r3, #24
    261c:	d510      	bpl.n	2640 <_svfiprintf_r+0x34>
    261e:	690b      	ldr	r3, [r1, #16]
    2620:	2b00      	cmp	r3, #0
    2622:	d10d      	bne.n	2640 <_svfiprintf_r+0x34>
    2624:	2140      	movs	r1, #64	; 0x40
    2626:	f7ff ff39 	bl	249c <_malloc_r>
    262a:	6030      	str	r0, [r6, #0]
    262c:	6130      	str	r0, [r6, #16]
    262e:	2800      	cmp	r0, #0
    2630:	d104      	bne.n	263c <_svfiprintf_r+0x30>
    2632:	230c      	movs	r3, #12
    2634:	9a02      	ldr	r2, [sp, #8]
    2636:	3801      	subs	r0, #1
    2638:	6013      	str	r3, [r2, #0]
    263a:	e0d0      	b.n	27de <_svfiprintf_r+0x1d2>
    263c:	2340      	movs	r3, #64	; 0x40
    263e:	6173      	str	r3, [r6, #20]
    2640:	2300      	movs	r3, #0
    2642:	ad06      	add	r5, sp, #24
    2644:	616b      	str	r3, [r5, #20]
    2646:	3320      	adds	r3, #32
    2648:	766b      	strb	r3, [r5, #25]
    264a:	3310      	adds	r3, #16
    264c:	76ab      	strb	r3, [r5, #26]
    264e:	1c3c      	adds	r4, r7, #0
    2650:	7823      	ldrb	r3, [r4, #0]
    2652:	2b00      	cmp	r3, #0
    2654:	d103      	bne.n	265e <_svfiprintf_r+0x52>
    2656:	1be3      	subs	r3, r4, r7
    2658:	9304      	str	r3, [sp, #16]
    265a:	d012      	beq.n	2682 <_svfiprintf_r+0x76>
    265c:	e003      	b.n	2666 <_svfiprintf_r+0x5a>
    265e:	2b25      	cmp	r3, #37	; 0x25
    2660:	d0f9      	beq.n	2656 <_svfiprintf_r+0x4a>
    2662:	3401      	adds	r4, #1
    2664:	e7f4      	b.n	2650 <_svfiprintf_r+0x44>
    2666:	9b04      	ldr	r3, [sp, #16]
    2668:	9802      	ldr	r0, [sp, #8]
    266a:	1c31      	adds	r1, r6, #0
    266c:	1c3a      	adds	r2, r7, #0
    266e:	f7ff ff6d 	bl	254c <__ssputs_r>
    2672:	1c43      	adds	r3, r0, #1
    2674:	d100      	bne.n	2678 <_svfiprintf_r+0x6c>
    2676:	e0ac      	b.n	27d2 <_svfiprintf_r+0x1c6>
    2678:	696a      	ldr	r2, [r5, #20]
    267a:	9b04      	ldr	r3, [sp, #16]
    267c:	4694      	mov	ip, r2
    267e:	4463      	add	r3, ip
    2680:	616b      	str	r3, [r5, #20]
    2682:	7823      	ldrb	r3, [r4, #0]
    2684:	2b00      	cmp	r3, #0
    2686:	d100      	bne.n	268a <_svfiprintf_r+0x7e>
    2688:	e0a3      	b.n	27d2 <_svfiprintf_r+0x1c6>
    268a:	2201      	movs	r2, #1
    268c:	2300      	movs	r3, #0
    268e:	4252      	negs	r2, r2
    2690:	606a      	str	r2, [r5, #4]
    2692:	a902      	add	r1, sp, #8
    2694:	3254      	adds	r2, #84	; 0x54
    2696:	1852      	adds	r2, r2, r1
    2698:	3401      	adds	r4, #1
    269a:	602b      	str	r3, [r5, #0]
    269c:	60eb      	str	r3, [r5, #12]
    269e:	60ab      	str	r3, [r5, #8]
    26a0:	7013      	strb	r3, [r2, #0]
    26a2:	65ab      	str	r3, [r5, #88]	; 0x58
    26a4:	4f4f      	ldr	r7, [pc, #316]	; (27e4 <_svfiprintf_r+0x1d8>)
    26a6:	7821      	ldrb	r1, [r4, #0]
    26a8:	1c38      	adds	r0, r7, #0
    26aa:	2205      	movs	r2, #5
    26ac:	f000 fa3c 	bl	2b28 <memchr>
    26b0:	2800      	cmp	r0, #0
    26b2:	d008      	beq.n	26c6 <_svfiprintf_r+0xba>
    26b4:	1bc0      	subs	r0, r0, r7
    26b6:	2701      	movs	r7, #1
    26b8:	4087      	lsls	r7, r0
    26ba:	1c38      	adds	r0, r7, #0
    26bc:	682b      	ldr	r3, [r5, #0]
    26be:	3401      	adds	r4, #1
    26c0:	4318      	orrs	r0, r3
    26c2:	6028      	str	r0, [r5, #0]
    26c4:	e7ee      	b.n	26a4 <_svfiprintf_r+0x98>
    26c6:	682b      	ldr	r3, [r5, #0]
    26c8:	06da      	lsls	r2, r3, #27
    26ca:	d504      	bpl.n	26d6 <_svfiprintf_r+0xca>
    26cc:	2253      	movs	r2, #83	; 0x53
    26ce:	2120      	movs	r1, #32
    26d0:	a802      	add	r0, sp, #8
    26d2:	1812      	adds	r2, r2, r0
    26d4:	7011      	strb	r1, [r2, #0]
    26d6:	071a      	lsls	r2, r3, #28
    26d8:	d504      	bpl.n	26e4 <_svfiprintf_r+0xd8>
    26da:	2253      	movs	r2, #83	; 0x53
    26dc:	212b      	movs	r1, #43	; 0x2b
    26de:	a802      	add	r0, sp, #8
    26e0:	1812      	adds	r2, r2, r0
    26e2:	7011      	strb	r1, [r2, #0]
    26e4:	7822      	ldrb	r2, [r4, #0]
    26e6:	2a2a      	cmp	r2, #42	; 0x2a
    26e8:	d001      	beq.n	26ee <_svfiprintf_r+0xe2>
    26ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    26ec:	e00e      	b.n	270c <_svfiprintf_r+0x100>
    26ee:	9a05      	ldr	r2, [sp, #20]
    26f0:	1d11      	adds	r1, r2, #4
    26f2:	6812      	ldr	r2, [r2, #0]
    26f4:	9105      	str	r1, [sp, #20]
    26f6:	2a00      	cmp	r2, #0
    26f8:	db01      	blt.n	26fe <_svfiprintf_r+0xf2>
    26fa:	9209      	str	r2, [sp, #36]	; 0x24
    26fc:	e004      	b.n	2708 <_svfiprintf_r+0xfc>
    26fe:	4252      	negs	r2, r2
    2700:	60ea      	str	r2, [r5, #12]
    2702:	2202      	movs	r2, #2
    2704:	4313      	orrs	r3, r2
    2706:	602b      	str	r3, [r5, #0]
    2708:	3401      	adds	r4, #1
    270a:	e009      	b.n	2720 <_svfiprintf_r+0x114>
    270c:	7822      	ldrb	r2, [r4, #0]
    270e:	3a30      	subs	r2, #48	; 0x30
    2710:	2a09      	cmp	r2, #9
    2712:	d804      	bhi.n	271e <_svfiprintf_r+0x112>
    2714:	210a      	movs	r1, #10
    2716:	434b      	muls	r3, r1
    2718:	3401      	adds	r4, #1
    271a:	189b      	adds	r3, r3, r2
    271c:	e7f6      	b.n	270c <_svfiprintf_r+0x100>
    271e:	9309      	str	r3, [sp, #36]	; 0x24
    2720:	7823      	ldrb	r3, [r4, #0]
    2722:	2b2e      	cmp	r3, #46	; 0x2e
    2724:	d118      	bne.n	2758 <_svfiprintf_r+0x14c>
    2726:	7863      	ldrb	r3, [r4, #1]
    2728:	2b2a      	cmp	r3, #42	; 0x2a
    272a:	d109      	bne.n	2740 <_svfiprintf_r+0x134>
    272c:	9b05      	ldr	r3, [sp, #20]
    272e:	3402      	adds	r4, #2
    2730:	1d1a      	adds	r2, r3, #4
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	9205      	str	r2, [sp, #20]
    2736:	2b00      	cmp	r3, #0
    2738:	da0d      	bge.n	2756 <_svfiprintf_r+0x14a>
    273a:	2301      	movs	r3, #1
    273c:	425b      	negs	r3, r3
    273e:	e00a      	b.n	2756 <_svfiprintf_r+0x14a>
    2740:	2300      	movs	r3, #0
    2742:	3401      	adds	r4, #1
    2744:	7822      	ldrb	r2, [r4, #0]
    2746:	3a30      	subs	r2, #48	; 0x30
    2748:	2a09      	cmp	r2, #9
    274a:	d804      	bhi.n	2756 <_svfiprintf_r+0x14a>
    274c:	210a      	movs	r1, #10
    274e:	434b      	muls	r3, r1
    2750:	3401      	adds	r4, #1
    2752:	189b      	adds	r3, r3, r2
    2754:	e7f6      	b.n	2744 <_svfiprintf_r+0x138>
    2756:	9307      	str	r3, [sp, #28]
    2758:	4f23      	ldr	r7, [pc, #140]	; (27e8 <_svfiprintf_r+0x1dc>)
    275a:	7821      	ldrb	r1, [r4, #0]
    275c:	1c38      	adds	r0, r7, #0
    275e:	2203      	movs	r2, #3
    2760:	f000 f9e2 	bl	2b28 <memchr>
    2764:	2800      	cmp	r0, #0
    2766:	d007      	beq.n	2778 <_svfiprintf_r+0x16c>
    2768:	1bc0      	subs	r0, r0, r7
    276a:	2740      	movs	r7, #64	; 0x40
    276c:	4087      	lsls	r7, r0
    276e:	1c38      	adds	r0, r7, #0
    2770:	682b      	ldr	r3, [r5, #0]
    2772:	3401      	adds	r4, #1
    2774:	4318      	orrs	r0, r3
    2776:	6028      	str	r0, [r5, #0]
    2778:	7821      	ldrb	r1, [r4, #0]
    277a:	481c      	ldr	r0, [pc, #112]	; (27ec <_svfiprintf_r+0x1e0>)
    277c:	2206      	movs	r2, #6
    277e:	1c67      	adds	r7, r4, #1
    2780:	7629      	strb	r1, [r5, #24]
    2782:	f000 f9d1 	bl	2b28 <memchr>
    2786:	2800      	cmp	r0, #0
    2788:	d012      	beq.n	27b0 <_svfiprintf_r+0x1a4>
    278a:	4b19      	ldr	r3, [pc, #100]	; (27f0 <_svfiprintf_r+0x1e4>)
    278c:	2b00      	cmp	r3, #0
    278e:	d106      	bne.n	279e <_svfiprintf_r+0x192>
    2790:	2207      	movs	r2, #7
    2792:	9b05      	ldr	r3, [sp, #20]
    2794:	3307      	adds	r3, #7
    2796:	4393      	bics	r3, r2
    2798:	3308      	adds	r3, #8
    279a:	9305      	str	r3, [sp, #20]
    279c:	e014      	b.n	27c8 <_svfiprintf_r+0x1bc>
    279e:	ab05      	add	r3, sp, #20
    27a0:	9300      	str	r3, [sp, #0]
    27a2:	9802      	ldr	r0, [sp, #8]
    27a4:	1c29      	adds	r1, r5, #0
    27a6:	1c32      	adds	r2, r6, #0
    27a8:	4b12      	ldr	r3, [pc, #72]	; (27f4 <_svfiprintf_r+0x1e8>)
    27aa:	e000      	b.n	27ae <_svfiprintf_r+0x1a2>
    27ac:	bf00      	nop
    27ae:	e007      	b.n	27c0 <_svfiprintf_r+0x1b4>
    27b0:	ab05      	add	r3, sp, #20
    27b2:	9300      	str	r3, [sp, #0]
    27b4:	9802      	ldr	r0, [sp, #8]
    27b6:	1c29      	adds	r1, r5, #0
    27b8:	1c32      	adds	r2, r6, #0
    27ba:	4b0e      	ldr	r3, [pc, #56]	; (27f4 <_svfiprintf_r+0x1e8>)
    27bc:	f000 f88a 	bl	28d4 <_printf_i>
    27c0:	9003      	str	r0, [sp, #12]
    27c2:	9b03      	ldr	r3, [sp, #12]
    27c4:	3301      	adds	r3, #1
    27c6:	d004      	beq.n	27d2 <_svfiprintf_r+0x1c6>
    27c8:	696b      	ldr	r3, [r5, #20]
    27ca:	9a03      	ldr	r2, [sp, #12]
    27cc:	189b      	adds	r3, r3, r2
    27ce:	616b      	str	r3, [r5, #20]
    27d0:	e73d      	b.n	264e <_svfiprintf_r+0x42>
    27d2:	89b3      	ldrh	r3, [r6, #12]
    27d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    27d6:	065b      	lsls	r3, r3, #25
    27d8:	d501      	bpl.n	27de <_svfiprintf_r+0x1d2>
    27da:	2001      	movs	r0, #1
    27dc:	4240      	negs	r0, r0
    27de:	b01f      	add	sp, #124	; 0x7c
    27e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	00002d6c 	.word	0x00002d6c
    27e8:	00002d72 	.word	0x00002d72
    27ec:	00002d76 	.word	0x00002d76
    27f0:	00000000 	.word	0x00000000
    27f4:	0000254d 	.word	0x0000254d

000027f8 <_printf_common>:
    27f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    27fa:	1c17      	adds	r7, r2, #0
    27fc:	9301      	str	r3, [sp, #4]
    27fe:	690a      	ldr	r2, [r1, #16]
    2800:	688b      	ldr	r3, [r1, #8]
    2802:	9000      	str	r0, [sp, #0]
    2804:	1c0c      	adds	r4, r1, #0
    2806:	4293      	cmp	r3, r2
    2808:	da00      	bge.n	280c <_printf_common+0x14>
    280a:	1c13      	adds	r3, r2, #0
    280c:	1c22      	adds	r2, r4, #0
    280e:	603b      	str	r3, [r7, #0]
    2810:	3243      	adds	r2, #67	; 0x43
    2812:	7812      	ldrb	r2, [r2, #0]
    2814:	2a00      	cmp	r2, #0
    2816:	d001      	beq.n	281c <_printf_common+0x24>
    2818:	3301      	adds	r3, #1
    281a:	603b      	str	r3, [r7, #0]
    281c:	6823      	ldr	r3, [r4, #0]
    281e:	069b      	lsls	r3, r3, #26
    2820:	d502      	bpl.n	2828 <_printf_common+0x30>
    2822:	683b      	ldr	r3, [r7, #0]
    2824:	3302      	adds	r3, #2
    2826:	603b      	str	r3, [r7, #0]
    2828:	2506      	movs	r5, #6
    282a:	6823      	ldr	r3, [r4, #0]
    282c:	401d      	ands	r5, r3
    282e:	d01e      	beq.n	286e <_printf_common+0x76>
    2830:	1c23      	adds	r3, r4, #0
    2832:	3343      	adds	r3, #67	; 0x43
    2834:	781b      	ldrb	r3, [r3, #0]
    2836:	1e5a      	subs	r2, r3, #1
    2838:	4193      	sbcs	r3, r2
    283a:	6822      	ldr	r2, [r4, #0]
    283c:	0692      	lsls	r2, r2, #26
    283e:	d51c      	bpl.n	287a <_printf_common+0x82>
    2840:	2030      	movs	r0, #48	; 0x30
    2842:	18e1      	adds	r1, r4, r3
    2844:	3140      	adds	r1, #64	; 0x40
    2846:	70c8      	strb	r0, [r1, #3]
    2848:	1c21      	adds	r1, r4, #0
    284a:	1c5a      	adds	r2, r3, #1
    284c:	3145      	adds	r1, #69	; 0x45
    284e:	7809      	ldrb	r1, [r1, #0]
    2850:	18a2      	adds	r2, r4, r2
    2852:	3240      	adds	r2, #64	; 0x40
    2854:	3302      	adds	r3, #2
    2856:	70d1      	strb	r1, [r2, #3]
    2858:	e00f      	b.n	287a <_printf_common+0x82>
    285a:	1c22      	adds	r2, r4, #0
    285c:	2301      	movs	r3, #1
    285e:	9800      	ldr	r0, [sp, #0]
    2860:	9901      	ldr	r1, [sp, #4]
    2862:	3219      	adds	r2, #25
    2864:	9e08      	ldr	r6, [sp, #32]
    2866:	47b0      	blx	r6
    2868:	1c43      	adds	r3, r0, #1
    286a:	d00e      	beq.n	288a <_printf_common+0x92>
    286c:	3501      	adds	r5, #1
    286e:	68e3      	ldr	r3, [r4, #12]
    2870:	683a      	ldr	r2, [r7, #0]
    2872:	1a9b      	subs	r3, r3, r2
    2874:	429d      	cmp	r5, r3
    2876:	dbf0      	blt.n	285a <_printf_common+0x62>
    2878:	e7da      	b.n	2830 <_printf_common+0x38>
    287a:	1c22      	adds	r2, r4, #0
    287c:	9800      	ldr	r0, [sp, #0]
    287e:	9901      	ldr	r1, [sp, #4]
    2880:	3243      	adds	r2, #67	; 0x43
    2882:	9d08      	ldr	r5, [sp, #32]
    2884:	47a8      	blx	r5
    2886:	1c43      	adds	r3, r0, #1
    2888:	d102      	bne.n	2890 <_printf_common+0x98>
    288a:	2001      	movs	r0, #1
    288c:	4240      	negs	r0, r0
    288e:	e020      	b.n	28d2 <_printf_common+0xda>
    2890:	2306      	movs	r3, #6
    2892:	6820      	ldr	r0, [r4, #0]
    2894:	68e1      	ldr	r1, [r4, #12]
    2896:	683a      	ldr	r2, [r7, #0]
    2898:	4003      	ands	r3, r0
    289a:	2500      	movs	r5, #0
    289c:	2b04      	cmp	r3, #4
    289e:	d103      	bne.n	28a8 <_printf_common+0xb0>
    28a0:	1a8d      	subs	r5, r1, r2
    28a2:	43eb      	mvns	r3, r5
    28a4:	17db      	asrs	r3, r3, #31
    28a6:	401d      	ands	r5, r3
    28a8:	68a3      	ldr	r3, [r4, #8]
    28aa:	6922      	ldr	r2, [r4, #16]
    28ac:	4293      	cmp	r3, r2
    28ae:	dd01      	ble.n	28b4 <_printf_common+0xbc>
    28b0:	1a9b      	subs	r3, r3, r2
    28b2:	18ed      	adds	r5, r5, r3
    28b4:	2700      	movs	r7, #0
    28b6:	42af      	cmp	r7, r5
    28b8:	da0a      	bge.n	28d0 <_printf_common+0xd8>
    28ba:	1c22      	adds	r2, r4, #0
    28bc:	2301      	movs	r3, #1
    28be:	9800      	ldr	r0, [sp, #0]
    28c0:	9901      	ldr	r1, [sp, #4]
    28c2:	321a      	adds	r2, #26
    28c4:	9e08      	ldr	r6, [sp, #32]
    28c6:	47b0      	blx	r6
    28c8:	1c43      	adds	r3, r0, #1
    28ca:	d0de      	beq.n	288a <_printf_common+0x92>
    28cc:	3701      	adds	r7, #1
    28ce:	e7f2      	b.n	28b6 <_printf_common+0xbe>
    28d0:	2000      	movs	r0, #0
    28d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000028d4 <_printf_i>:
    28d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28d6:	b08b      	sub	sp, #44	; 0x2c
    28d8:	9206      	str	r2, [sp, #24]
    28da:	1c0a      	adds	r2, r1, #0
    28dc:	3243      	adds	r2, #67	; 0x43
    28de:	9307      	str	r3, [sp, #28]
    28e0:	9005      	str	r0, [sp, #20]
    28e2:	9204      	str	r2, [sp, #16]
    28e4:	7e0a      	ldrb	r2, [r1, #24]
    28e6:	1c0c      	adds	r4, r1, #0
    28e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    28ea:	2a6e      	cmp	r2, #110	; 0x6e
    28ec:	d100      	bne.n	28f0 <_printf_i+0x1c>
    28ee:	e0a8      	b.n	2a42 <_printf_i+0x16e>
    28f0:	d811      	bhi.n	2916 <_printf_i+0x42>
    28f2:	2a63      	cmp	r2, #99	; 0x63
    28f4:	d022      	beq.n	293c <_printf_i+0x68>
    28f6:	d809      	bhi.n	290c <_printf_i+0x38>
    28f8:	2a00      	cmp	r2, #0
    28fa:	d100      	bne.n	28fe <_printf_i+0x2a>
    28fc:	e0b2      	b.n	2a64 <_printf_i+0x190>
    28fe:	2a58      	cmp	r2, #88	; 0x58
    2900:	d000      	beq.n	2904 <_printf_i+0x30>
    2902:	e0c2      	b.n	2a8a <_printf_i+0x1b6>
    2904:	3145      	adds	r1, #69	; 0x45
    2906:	700a      	strb	r2, [r1, #0]
    2908:	4a7c      	ldr	r2, [pc, #496]	; (2afc <_printf_i+0x228>)
    290a:	e04f      	b.n	29ac <_printf_i+0xd8>
    290c:	2a64      	cmp	r2, #100	; 0x64
    290e:	d01d      	beq.n	294c <_printf_i+0x78>
    2910:	2a69      	cmp	r2, #105	; 0x69
    2912:	d01b      	beq.n	294c <_printf_i+0x78>
    2914:	e0b9      	b.n	2a8a <_printf_i+0x1b6>
    2916:	2a73      	cmp	r2, #115	; 0x73
    2918:	d100      	bne.n	291c <_printf_i+0x48>
    291a:	e0a7      	b.n	2a6c <_printf_i+0x198>
    291c:	d809      	bhi.n	2932 <_printf_i+0x5e>
    291e:	2a6f      	cmp	r2, #111	; 0x6f
    2920:	d029      	beq.n	2976 <_printf_i+0xa2>
    2922:	2a70      	cmp	r2, #112	; 0x70
    2924:	d000      	beq.n	2928 <_printf_i+0x54>
    2926:	e0b0      	b.n	2a8a <_printf_i+0x1b6>
    2928:	2220      	movs	r2, #32
    292a:	6809      	ldr	r1, [r1, #0]
    292c:	430a      	orrs	r2, r1
    292e:	6022      	str	r2, [r4, #0]
    2930:	e037      	b.n	29a2 <_printf_i+0xce>
    2932:	2a75      	cmp	r2, #117	; 0x75
    2934:	d01f      	beq.n	2976 <_printf_i+0xa2>
    2936:	2a78      	cmp	r2, #120	; 0x78
    2938:	d033      	beq.n	29a2 <_printf_i+0xce>
    293a:	e0a6      	b.n	2a8a <_printf_i+0x1b6>
    293c:	1c0e      	adds	r6, r1, #0
    293e:	681a      	ldr	r2, [r3, #0]
    2940:	3642      	adds	r6, #66	; 0x42
    2942:	1d11      	adds	r1, r2, #4
    2944:	6019      	str	r1, [r3, #0]
    2946:	6813      	ldr	r3, [r2, #0]
    2948:	7033      	strb	r3, [r6, #0]
    294a:	e0a1      	b.n	2a90 <_printf_i+0x1bc>
    294c:	6821      	ldr	r1, [r4, #0]
    294e:	681a      	ldr	r2, [r3, #0]
    2950:	0608      	lsls	r0, r1, #24
    2952:	d406      	bmi.n	2962 <_printf_i+0x8e>
    2954:	0649      	lsls	r1, r1, #25
    2956:	d504      	bpl.n	2962 <_printf_i+0x8e>
    2958:	1d11      	adds	r1, r2, #4
    295a:	6019      	str	r1, [r3, #0]
    295c:	2300      	movs	r3, #0
    295e:	5ed5      	ldrsh	r5, [r2, r3]
    2960:	e002      	b.n	2968 <_printf_i+0x94>
    2962:	1d11      	adds	r1, r2, #4
    2964:	6019      	str	r1, [r3, #0]
    2966:	6815      	ldr	r5, [r2, #0]
    2968:	2d00      	cmp	r5, #0
    296a:	da3b      	bge.n	29e4 <_printf_i+0x110>
    296c:	232d      	movs	r3, #45	; 0x2d
    296e:	9a04      	ldr	r2, [sp, #16]
    2970:	426d      	negs	r5, r5
    2972:	7013      	strb	r3, [r2, #0]
    2974:	e036      	b.n	29e4 <_printf_i+0x110>
    2976:	6821      	ldr	r1, [r4, #0]
    2978:	681a      	ldr	r2, [r3, #0]
    297a:	0608      	lsls	r0, r1, #24
    297c:	d406      	bmi.n	298c <_printf_i+0xb8>
    297e:	0649      	lsls	r1, r1, #25
    2980:	d504      	bpl.n	298c <_printf_i+0xb8>
    2982:	6815      	ldr	r5, [r2, #0]
    2984:	1d11      	adds	r1, r2, #4
    2986:	6019      	str	r1, [r3, #0]
    2988:	b2ad      	uxth	r5, r5
    298a:	e002      	b.n	2992 <_printf_i+0xbe>
    298c:	1d11      	adds	r1, r2, #4
    298e:	6019      	str	r1, [r3, #0]
    2990:	6815      	ldr	r5, [r2, #0]
    2992:	4b5a      	ldr	r3, [pc, #360]	; (2afc <_printf_i+0x228>)
    2994:	7e22      	ldrb	r2, [r4, #24]
    2996:	9303      	str	r3, [sp, #12]
    2998:	270a      	movs	r7, #10
    299a:	2a6f      	cmp	r2, #111	; 0x6f
    299c:	d11d      	bne.n	29da <_printf_i+0x106>
    299e:	2708      	movs	r7, #8
    29a0:	e01b      	b.n	29da <_printf_i+0x106>
    29a2:	1c22      	adds	r2, r4, #0
    29a4:	2178      	movs	r1, #120	; 0x78
    29a6:	3245      	adds	r2, #69	; 0x45
    29a8:	7011      	strb	r1, [r2, #0]
    29aa:	4a55      	ldr	r2, [pc, #340]	; (2b00 <_printf_i+0x22c>)
    29ac:	6819      	ldr	r1, [r3, #0]
    29ae:	9203      	str	r2, [sp, #12]
    29b0:	1d08      	adds	r0, r1, #4
    29b2:	6822      	ldr	r2, [r4, #0]
    29b4:	6018      	str	r0, [r3, #0]
    29b6:	680d      	ldr	r5, [r1, #0]
    29b8:	0610      	lsls	r0, r2, #24
    29ba:	d402      	bmi.n	29c2 <_printf_i+0xee>
    29bc:	0650      	lsls	r0, r2, #25
    29be:	d500      	bpl.n	29c2 <_printf_i+0xee>
    29c0:	b2ad      	uxth	r5, r5
    29c2:	07d3      	lsls	r3, r2, #31
    29c4:	d502      	bpl.n	29cc <_printf_i+0xf8>
    29c6:	2320      	movs	r3, #32
    29c8:	431a      	orrs	r2, r3
    29ca:	6022      	str	r2, [r4, #0]
    29cc:	2710      	movs	r7, #16
    29ce:	2d00      	cmp	r5, #0
    29d0:	d103      	bne.n	29da <_printf_i+0x106>
    29d2:	2320      	movs	r3, #32
    29d4:	6822      	ldr	r2, [r4, #0]
    29d6:	439a      	bics	r2, r3
    29d8:	6022      	str	r2, [r4, #0]
    29da:	1c23      	adds	r3, r4, #0
    29dc:	2200      	movs	r2, #0
    29de:	3343      	adds	r3, #67	; 0x43
    29e0:	701a      	strb	r2, [r3, #0]
    29e2:	e002      	b.n	29ea <_printf_i+0x116>
    29e4:	270a      	movs	r7, #10
    29e6:	4b45      	ldr	r3, [pc, #276]	; (2afc <_printf_i+0x228>)
    29e8:	9303      	str	r3, [sp, #12]
    29ea:	6863      	ldr	r3, [r4, #4]
    29ec:	60a3      	str	r3, [r4, #8]
    29ee:	2b00      	cmp	r3, #0
    29f0:	db03      	blt.n	29fa <_printf_i+0x126>
    29f2:	2204      	movs	r2, #4
    29f4:	6821      	ldr	r1, [r4, #0]
    29f6:	4391      	bics	r1, r2
    29f8:	6021      	str	r1, [r4, #0]
    29fa:	2d00      	cmp	r5, #0
    29fc:	d102      	bne.n	2a04 <_printf_i+0x130>
    29fe:	9e04      	ldr	r6, [sp, #16]
    2a00:	2b00      	cmp	r3, #0
    2a02:	d00e      	beq.n	2a22 <_printf_i+0x14e>
    2a04:	9e04      	ldr	r6, [sp, #16]
    2a06:	1c28      	adds	r0, r5, #0
    2a08:	1c39      	adds	r1, r7, #0
    2a0a:	f7ff fbcf 	bl	21ac <__aeabi_uidivmod>
    2a0e:	9b03      	ldr	r3, [sp, #12]
    2a10:	3e01      	subs	r6, #1
    2a12:	5c5b      	ldrb	r3, [r3, r1]
    2a14:	1c28      	adds	r0, r5, #0
    2a16:	7033      	strb	r3, [r6, #0]
    2a18:	1c39      	adds	r1, r7, #0
    2a1a:	f7ff fb41 	bl	20a0 <__aeabi_uidiv>
    2a1e:	1e05      	subs	r5, r0, #0
    2a20:	d1f1      	bne.n	2a06 <_printf_i+0x132>
    2a22:	2f08      	cmp	r7, #8
    2a24:	d109      	bne.n	2a3a <_printf_i+0x166>
    2a26:	6823      	ldr	r3, [r4, #0]
    2a28:	07db      	lsls	r3, r3, #31
    2a2a:	d506      	bpl.n	2a3a <_printf_i+0x166>
    2a2c:	6863      	ldr	r3, [r4, #4]
    2a2e:	6922      	ldr	r2, [r4, #16]
    2a30:	4293      	cmp	r3, r2
    2a32:	dc02      	bgt.n	2a3a <_printf_i+0x166>
    2a34:	2330      	movs	r3, #48	; 0x30
    2a36:	3e01      	subs	r6, #1
    2a38:	7033      	strb	r3, [r6, #0]
    2a3a:	9b04      	ldr	r3, [sp, #16]
    2a3c:	1b9b      	subs	r3, r3, r6
    2a3e:	6123      	str	r3, [r4, #16]
    2a40:	e02b      	b.n	2a9a <_printf_i+0x1c6>
    2a42:	6809      	ldr	r1, [r1, #0]
    2a44:	681a      	ldr	r2, [r3, #0]
    2a46:	0608      	lsls	r0, r1, #24
    2a48:	d407      	bmi.n	2a5a <_printf_i+0x186>
    2a4a:	0649      	lsls	r1, r1, #25
    2a4c:	d505      	bpl.n	2a5a <_printf_i+0x186>
    2a4e:	1d11      	adds	r1, r2, #4
    2a50:	6019      	str	r1, [r3, #0]
    2a52:	6813      	ldr	r3, [r2, #0]
    2a54:	8aa2      	ldrh	r2, [r4, #20]
    2a56:	801a      	strh	r2, [r3, #0]
    2a58:	e004      	b.n	2a64 <_printf_i+0x190>
    2a5a:	1d11      	adds	r1, r2, #4
    2a5c:	6019      	str	r1, [r3, #0]
    2a5e:	6813      	ldr	r3, [r2, #0]
    2a60:	6962      	ldr	r2, [r4, #20]
    2a62:	601a      	str	r2, [r3, #0]
    2a64:	2300      	movs	r3, #0
    2a66:	9e04      	ldr	r6, [sp, #16]
    2a68:	6123      	str	r3, [r4, #16]
    2a6a:	e016      	b.n	2a9a <_printf_i+0x1c6>
    2a6c:	681a      	ldr	r2, [r3, #0]
    2a6e:	1d11      	adds	r1, r2, #4
    2a70:	6019      	str	r1, [r3, #0]
    2a72:	6816      	ldr	r6, [r2, #0]
    2a74:	2100      	movs	r1, #0
    2a76:	1c30      	adds	r0, r6, #0
    2a78:	6862      	ldr	r2, [r4, #4]
    2a7a:	f000 f855 	bl	2b28 <memchr>
    2a7e:	2800      	cmp	r0, #0
    2a80:	d001      	beq.n	2a86 <_printf_i+0x1b2>
    2a82:	1b80      	subs	r0, r0, r6
    2a84:	6060      	str	r0, [r4, #4]
    2a86:	6863      	ldr	r3, [r4, #4]
    2a88:	e003      	b.n	2a92 <_printf_i+0x1be>
    2a8a:	1c26      	adds	r6, r4, #0
    2a8c:	3642      	adds	r6, #66	; 0x42
    2a8e:	7032      	strb	r2, [r6, #0]
    2a90:	2301      	movs	r3, #1
    2a92:	6123      	str	r3, [r4, #16]
    2a94:	2300      	movs	r3, #0
    2a96:	9a04      	ldr	r2, [sp, #16]
    2a98:	7013      	strb	r3, [r2, #0]
    2a9a:	9b07      	ldr	r3, [sp, #28]
    2a9c:	9805      	ldr	r0, [sp, #20]
    2a9e:	9300      	str	r3, [sp, #0]
    2aa0:	1c21      	adds	r1, r4, #0
    2aa2:	9b06      	ldr	r3, [sp, #24]
    2aa4:	aa09      	add	r2, sp, #36	; 0x24
    2aa6:	f7ff fea7 	bl	27f8 <_printf_common>
    2aaa:	1c43      	adds	r3, r0, #1
    2aac:	d102      	bne.n	2ab4 <_printf_i+0x1e0>
    2aae:	2001      	movs	r0, #1
    2ab0:	4240      	negs	r0, r0
    2ab2:	e021      	b.n	2af8 <_printf_i+0x224>
    2ab4:	6923      	ldr	r3, [r4, #16]
    2ab6:	9805      	ldr	r0, [sp, #20]
    2ab8:	9906      	ldr	r1, [sp, #24]
    2aba:	1c32      	adds	r2, r6, #0
    2abc:	9d07      	ldr	r5, [sp, #28]
    2abe:	47a8      	blx	r5
    2ac0:	1c43      	adds	r3, r0, #1
    2ac2:	d0f4      	beq.n	2aae <_printf_i+0x1da>
    2ac4:	6823      	ldr	r3, [r4, #0]
    2ac6:	079b      	lsls	r3, r3, #30
    2ac8:	d405      	bmi.n	2ad6 <_printf_i+0x202>
    2aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2acc:	68e0      	ldr	r0, [r4, #12]
    2ace:	4298      	cmp	r0, r3
    2ad0:	da12      	bge.n	2af8 <_printf_i+0x224>
    2ad2:	1c18      	adds	r0, r3, #0
    2ad4:	e010      	b.n	2af8 <_printf_i+0x224>
    2ad6:	2500      	movs	r5, #0
    2ad8:	68e3      	ldr	r3, [r4, #12]
    2ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2adc:	1a9b      	subs	r3, r3, r2
    2ade:	429d      	cmp	r5, r3
    2ae0:	daf3      	bge.n	2aca <_printf_i+0x1f6>
    2ae2:	1c22      	adds	r2, r4, #0
    2ae4:	2301      	movs	r3, #1
    2ae6:	9805      	ldr	r0, [sp, #20]
    2ae8:	9906      	ldr	r1, [sp, #24]
    2aea:	3219      	adds	r2, #25
    2aec:	9e07      	ldr	r6, [sp, #28]
    2aee:	47b0      	blx	r6
    2af0:	1c43      	adds	r3, r0, #1
    2af2:	d0dc      	beq.n	2aae <_printf_i+0x1da>
    2af4:	3501      	adds	r5, #1
    2af6:	e7ef      	b.n	2ad8 <_printf_i+0x204>
    2af8:	b00b      	add	sp, #44	; 0x2c
    2afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2afc:	00002d7d 	.word	0x00002d7d
    2b00:	00002d8e 	.word	0x00002d8e

00002b04 <_sbrk_r>:
    2b04:	b538      	push	{r3, r4, r5, lr}
    2b06:	2300      	movs	r3, #0
    2b08:	4c06      	ldr	r4, [pc, #24]	; (2b24 <_sbrk_r+0x20>)
    2b0a:	1c05      	adds	r5, r0, #0
    2b0c:	1c08      	adds	r0, r1, #0
    2b0e:	6023      	str	r3, [r4, #0]
    2b10:	f7ff fa86 	bl	2020 <_sbrk>
    2b14:	1c43      	adds	r3, r0, #1
    2b16:	d103      	bne.n	2b20 <_sbrk_r+0x1c>
    2b18:	6823      	ldr	r3, [r4, #0]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d000      	beq.n	2b20 <_sbrk_r+0x1c>
    2b1e:	602b      	str	r3, [r5, #0]
    2b20:	bd38      	pop	{r3, r4, r5, pc}
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	20000168 	.word	0x20000168

00002b28 <memchr>:
    2b28:	b2c9      	uxtb	r1, r1
    2b2a:	1882      	adds	r2, r0, r2
    2b2c:	4290      	cmp	r0, r2
    2b2e:	d004      	beq.n	2b3a <memchr+0x12>
    2b30:	7803      	ldrb	r3, [r0, #0]
    2b32:	428b      	cmp	r3, r1
    2b34:	d002      	beq.n	2b3c <memchr+0x14>
    2b36:	3001      	adds	r0, #1
    2b38:	e7f8      	b.n	2b2c <memchr+0x4>
    2b3a:	2000      	movs	r0, #0
    2b3c:	4770      	bx	lr

00002b3e <memmove>:
    2b3e:	b510      	push	{r4, lr}
    2b40:	4281      	cmp	r1, r0
    2b42:	d208      	bcs.n	2b56 <memmove+0x18>
    2b44:	188b      	adds	r3, r1, r2
    2b46:	4298      	cmp	r0, r3
    2b48:	d205      	bcs.n	2b56 <memmove+0x18>
    2b4a:	1a9b      	subs	r3, r3, r2
    2b4c:	3a01      	subs	r2, #1
    2b4e:	d309      	bcc.n	2b64 <memmove+0x26>
    2b50:	5c99      	ldrb	r1, [r3, r2]
    2b52:	5481      	strb	r1, [r0, r2]
    2b54:	e7fa      	b.n	2b4c <memmove+0xe>
    2b56:	2300      	movs	r3, #0
    2b58:	4293      	cmp	r3, r2
    2b5a:	d003      	beq.n	2b64 <memmove+0x26>
    2b5c:	5ccc      	ldrb	r4, [r1, r3]
    2b5e:	54c4      	strb	r4, [r0, r3]
    2b60:	3301      	adds	r3, #1
    2b62:	e7f9      	b.n	2b58 <memmove+0x1a>
    2b64:	bd10      	pop	{r4, pc}
	...

00002b68 <_free_r>:
    2b68:	b530      	push	{r4, r5, lr}
    2b6a:	2900      	cmp	r1, #0
    2b6c:	d03e      	beq.n	2bec <_free_r+0x84>
    2b6e:	3904      	subs	r1, #4
    2b70:	680b      	ldr	r3, [r1, #0]
    2b72:	2b00      	cmp	r3, #0
    2b74:	da00      	bge.n	2b78 <_free_r+0x10>
    2b76:	18c9      	adds	r1, r1, r3
    2b78:	4a1d      	ldr	r2, [pc, #116]	; (2bf0 <_free_r+0x88>)
    2b7a:	6813      	ldr	r3, [r2, #0]
    2b7c:	1c14      	adds	r4, r2, #0
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d102      	bne.n	2b88 <_free_r+0x20>
    2b82:	604b      	str	r3, [r1, #4]
    2b84:	6011      	str	r1, [r2, #0]
    2b86:	e031      	b.n	2bec <_free_r+0x84>
    2b88:	4299      	cmp	r1, r3
    2b8a:	d20d      	bcs.n	2ba8 <_free_r+0x40>
    2b8c:	6808      	ldr	r0, [r1, #0]
    2b8e:	180a      	adds	r2, r1, r0
    2b90:	429a      	cmp	r2, r3
    2b92:	d103      	bne.n	2b9c <_free_r+0x34>
    2b94:	6813      	ldr	r3, [r2, #0]
    2b96:	18c3      	adds	r3, r0, r3
    2b98:	600b      	str	r3, [r1, #0]
    2b9a:	6853      	ldr	r3, [r2, #4]
    2b9c:	604b      	str	r3, [r1, #4]
    2b9e:	6021      	str	r1, [r4, #0]
    2ba0:	e024      	b.n	2bec <_free_r+0x84>
    2ba2:	428a      	cmp	r2, r1
    2ba4:	d803      	bhi.n	2bae <_free_r+0x46>
    2ba6:	1c13      	adds	r3, r2, #0
    2ba8:	685a      	ldr	r2, [r3, #4]
    2baa:	2a00      	cmp	r2, #0
    2bac:	d1f9      	bne.n	2ba2 <_free_r+0x3a>
    2bae:	681d      	ldr	r5, [r3, #0]
    2bb0:	195c      	adds	r4, r3, r5
    2bb2:	428c      	cmp	r4, r1
    2bb4:	d10b      	bne.n	2bce <_free_r+0x66>
    2bb6:	6809      	ldr	r1, [r1, #0]
    2bb8:	1869      	adds	r1, r5, r1
    2bba:	1858      	adds	r0, r3, r1
    2bbc:	6019      	str	r1, [r3, #0]
    2bbe:	4290      	cmp	r0, r2
    2bc0:	d114      	bne.n	2bec <_free_r+0x84>
    2bc2:	6810      	ldr	r0, [r2, #0]
    2bc4:	6852      	ldr	r2, [r2, #4]
    2bc6:	1809      	adds	r1, r1, r0
    2bc8:	6019      	str	r1, [r3, #0]
    2bca:	605a      	str	r2, [r3, #4]
    2bcc:	e00e      	b.n	2bec <_free_r+0x84>
    2bce:	428c      	cmp	r4, r1
    2bd0:	d902      	bls.n	2bd8 <_free_r+0x70>
    2bd2:	230c      	movs	r3, #12
    2bd4:	6003      	str	r3, [r0, #0]
    2bd6:	e009      	b.n	2bec <_free_r+0x84>
    2bd8:	6808      	ldr	r0, [r1, #0]
    2bda:	180c      	adds	r4, r1, r0
    2bdc:	4294      	cmp	r4, r2
    2bde:	d103      	bne.n	2be8 <_free_r+0x80>
    2be0:	6814      	ldr	r4, [r2, #0]
    2be2:	6852      	ldr	r2, [r2, #4]
    2be4:	1900      	adds	r0, r0, r4
    2be6:	6008      	str	r0, [r1, #0]
    2be8:	604a      	str	r2, [r1, #4]
    2bea:	6059      	str	r1, [r3, #4]
    2bec:	bd30      	pop	{r4, r5, pc}
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	200000c8 	.word	0x200000c8

00002bf4 <_realloc_r>:
    2bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bf6:	1c06      	adds	r6, r0, #0
    2bf8:	1c0c      	adds	r4, r1, #0
    2bfa:	1c15      	adds	r5, r2, #0
    2bfc:	2900      	cmp	r1, #0
    2bfe:	d104      	bne.n	2c0a <_realloc_r+0x16>
    2c00:	1c11      	adds	r1, r2, #0
    2c02:	f7ff fc4b 	bl	249c <_malloc_r>
    2c06:	1c04      	adds	r4, r0, #0
    2c08:	e018      	b.n	2c3c <_realloc_r+0x48>
    2c0a:	2a00      	cmp	r2, #0
    2c0c:	d103      	bne.n	2c16 <_realloc_r+0x22>
    2c0e:	f7ff ffab 	bl	2b68 <_free_r>
    2c12:	1c2c      	adds	r4, r5, #0
    2c14:	e012      	b.n	2c3c <_realloc_r+0x48>
    2c16:	f000 f813 	bl	2c40 <_malloc_usable_size_r>
    2c1a:	42a8      	cmp	r0, r5
    2c1c:	d20e      	bcs.n	2c3c <_realloc_r+0x48>
    2c1e:	1c30      	adds	r0, r6, #0
    2c20:	1c29      	adds	r1, r5, #0
    2c22:	f7ff fc3b 	bl	249c <_malloc_r>
    2c26:	1e07      	subs	r7, r0, #0
    2c28:	d007      	beq.n	2c3a <_realloc_r+0x46>
    2c2a:	1c21      	adds	r1, r4, #0
    2c2c:	1c2a      	adds	r2, r5, #0
    2c2e:	f7ff fc09 	bl	2444 <memcpy>
    2c32:	1c30      	adds	r0, r6, #0
    2c34:	1c21      	adds	r1, r4, #0
    2c36:	f7ff ff97 	bl	2b68 <_free_r>
    2c3a:	1c3c      	adds	r4, r7, #0
    2c3c:	1c20      	adds	r0, r4, #0
    2c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002c40 <_malloc_usable_size_r>:
    2c40:	1f0b      	subs	r3, r1, #4
    2c42:	681a      	ldr	r2, [r3, #0]
    2c44:	1f10      	subs	r0, r2, #4
    2c46:	2a00      	cmp	r2, #0
    2c48:	da04      	bge.n	2c54 <_malloc_usable_size_r+0x14>
    2c4a:	1889      	adds	r1, r1, r2
    2c4c:	3904      	subs	r1, #4
    2c4e:	680b      	ldr	r3, [r1, #0]
    2c50:	18d0      	adds	r0, r2, r3
    2c52:	3804      	subs	r0, #4
    2c54:	4770      	bx	lr
    2c56:	0000      	movs	r0, r0
    2c58:	00006003 	.word	0x00006003
    2c5c:	42000000 	.word	0x42000000
    2c60:	42000400 	.word	0x42000400
    2c64:	42000800 	.word	0x42000800
    2c68:	42000c00 	.word	0x42000c00
    2c6c:	42001000 	.word	0x42001000
    2c70:	43000400 	.word	0x43000400
    2c74:	30535441 	.word	0x30535441
    2c78:	000d3f30 	.word	0x000d3f30
    2c7c:	30535441 	.word	0x30535441
    2c80:	000d3f34 	.word	0x000d3f34
    2c84:	30535441 	.word	0x30535441
    2c88:	0d343d33 	.word	0x0d343d33
    2c8c:	002b2b2b 	.word	0x002b2b2b
    2c90:	562f5441 	.word	0x562f5441
    2c94:	0000000d 	.word	0x0000000d
    2c98:	30535441 	.word	0x30535441
    2c9c:	2b253d30 	.word	0x2b253d30
    2ca0:	0d643630 	.word	0x0d643630
    2ca4:	00000000 	.word	0x00000000
    2ca8:	30535441 	.word	0x30535441
    2cac:	2b253d34 	.word	0x2b253d34
    2cb0:	0d643330 	.word	0x0d643330
    2cb4:	00000000 	.word	0x00000000
    2cb8:	0d4f5441 	.word	0x0d4f5441
    2cbc:	00000000 	.word	0x00000000
    2cc0:	000018e2 	.word	0x000018e2
    2cc4:	000018de 	.word	0x000018de
    2cc8:	000018de 	.word	0x000018de
    2ccc:	00001940 	.word	0x00001940
    2cd0:	00001940 	.word	0x00001940
    2cd4:	000018f8 	.word	0x000018f8
    2cd8:	000018e8 	.word	0x000018e8
    2cdc:	000018fe 	.word	0x000018fe
    2ce0:	0000192e 	.word	0x0000192e
    2ce4:	00001a44 	.word	0x00001a44
    2ce8:	00001a24 	.word	0x00001a24
    2cec:	00001a24 	.word	0x00001a24
    2cf0:	00001abe 	.word	0x00001abe
    2cf4:	00001a36 	.word	0x00001a36
    2cf8:	00001a52 	.word	0x00001a52
    2cfc:	00001a28 	.word	0x00001a28
    2d00:	00001a60 	.word	0x00001a60
    2d04:	00001aa2 	.word	0x00001aa2
    2d08:	00000043 	.word	0x00000043

00002d0c <__sf_fake_stdin>:
	...

00002d2c <__sf_fake_stdout>:
	...

00002d4c <__sf_fake_stderr>:
	...
    2d6c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2d7c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2d8c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2d9c:	00006665                                ef..

00002da0 <_init>:
    2da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2da2:	46c0      	nop			; (mov r8, r8)
    2da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2da6:	bc08      	pop	{r3}
    2da8:	469e      	mov	lr, r3
    2daa:	4770      	bx	lr

00002dac <__init_array_start>:
    2dac:	000000dd 	.word	0x000000dd

00002db0 <_fini>:
    2db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2db6:	bc08      	pop	{r3}
    2db8:	469e      	mov	lr, r3
    2dba:	4770      	bx	lr

00002dbc <__fini_array_start>:
    2dbc:	000000b5 	.word	0x000000b5
